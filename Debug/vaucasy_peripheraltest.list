
vaucasy_peripheraltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c0  080072c0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000110  080073d8  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000bf8  080073d8  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001313a  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003238  00000000  00000000  000332bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4e  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a8a  00000000  00000000  00038156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167c8  00000000  00000000  00050be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b361  00000000  00000000  000673a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004220  00000000  00000000  000f270c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f692c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007240 	.word	0x08007240

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08007240 	.word	0x08007240

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b60      	ldr	r3, [pc, #384]	; (800066c <MX_GPIO_Init+0x19c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a5f      	ldr	r2, [pc, #380]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b5d      	ldr	r3, [pc, #372]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b59      	ldr	r3, [pc, #356]	; (800066c <MX_GPIO_Init+0x19c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a58      	ldr	r2, [pc, #352]	; (800066c <MX_GPIO_Init+0x19c>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <MX_GPIO_Init+0x19c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b52      	ldr	r3, [pc, #328]	; (800066c <MX_GPIO_Init+0x19c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a51      	ldr	r2, [pc, #324]	; (800066c <MX_GPIO_Init+0x19c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b4f      	ldr	r3, [pc, #316]	; (800066c <MX_GPIO_Init+0x19c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b4b      	ldr	r3, [pc, #300]	; (800066c <MX_GPIO_Init+0x19c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a4a      	ldr	r2, [pc, #296]	; (800066c <MX_GPIO_Init+0x19c>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <MX_GPIO_Init+0x19c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4b44      	ldr	r3, [pc, #272]	; (800066c <MX_GPIO_Init+0x19c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a43      	ldr	r2, [pc, #268]	; (800066c <MX_GPIO_Init+0x19c>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <MX_GPIO_Init+0x19c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL6_Pin|COL5_Pin|COL4_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	21e0      	movs	r1, #224	; 0xe0
 8000576:	483e      	ldr	r0, [pc, #248]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000578:	f000 fe80 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	211c      	movs	r1, #28
 8000580:	483c      	ldr	r0, [pc, #240]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000582:	f000 fe7b 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	483a      	ldr	r0, [pc, #232]	; (8000678 <MX_GPIO_Init+0x1a8>)
 800058e:	f000 fe75 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW4_Pin;
 8000592:	2304      	movs	r3, #4
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW4_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4834      	ldr	r0, [pc, #208]	; (8000678 <MX_GPIO_Init+0x1a8>)
 80005a6:	f000 fccd 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW3_Pin;
 80005aa:	2310      	movs	r3, #16
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW3_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	482c      	ldr	r0, [pc, #176]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005be:	f000 fcc1 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL6_Pin|COL5_Pin|COL4_Pin;
 80005c2:	23e0      	movs	r3, #224	; 0xe0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4825      	ldr	r0, [pc, #148]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005da:	f000 fcb3 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL2_Pin|COL3_Pin;
 80005de:	231c      	movs	r3, #28
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005f6:	f000 fca5 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW2_Pin;
 80005fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000610:	f000 fc98 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000614:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0x1a4>)
 800062a:	f000 fc8b 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL1_Pin;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL1_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x1a8>)
 8000648:	f000 fc7c 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 800064c:	2304      	movs	r3, #4
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <MX_GPIO_Init+0x1ac>)
 8000660:	f000 fc70 	bl	8000f44 <HAL_GPIO_Init>

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00

08000680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f000 fdf7 	bl	80012b0 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f984 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000012c 	.word	0x2000012c
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C3_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C3_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C3_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C3_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C3_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C3_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C3_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C3_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C3_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C3_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C3_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C3_Init+0x50>)
 800071a:	f000 fdc9 	bl	80012b0 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f956 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000180 	.word	0x20000180
 8000730:	40005c00 	.word	0x40005c00
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a42      	ldr	r2, [pc, #264]	; (8000860 <HAL_I2C_MspInit+0x128>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12c      	bne.n	80007b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	2312      	movs	r3, #18
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	2304      	movs	r3, #4
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4835      	ldr	r0, [pc, #212]	; (8000868 <HAL_I2C_MspInit+0x130>)
 8000792:	f000 fbd7 	bl	8000f44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007b2:	e050      	b.n	8000856 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2c      	ldr	r2, [pc, #176]	; (800086c <HAL_I2C_MspInit+0x134>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d14b      	bne.n	8000856 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fc:	2312      	movs	r3, #18
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000808:	2304      	movs	r3, #4
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <HAL_I2C_MspInit+0x138>)
 8000814:	f000 fb96 	bl	8000f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081e:	2312      	movs	r3, #18
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800082a:	2304      	movs	r3, #4
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_I2C_MspInit+0x13c>)
 8000836:	f000 fb85 	bl	8000f44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40005c00 	.word	0x40005c00
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 f9b9 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f83d 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f7ff fe23 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800088a:	f7ff fef9 	bl	8000680 <MX_I2C1_Init>
  MX_I2C3_Init();
 800088e:	f7ff ff25 	bl	80006dc <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 8000892:	f006 f871 	bl	8006978 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000896:	f000 f911 	bl	8000abc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  extern USBD_HandleTypeDef hUsbDeviceFS;
  uint8_t HID_buffer[8] = {0};
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
//	  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
//
//	  HAL_Delay(2000);

	  //COL6 es ROW0 a sarki billentyu
	  HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2120      	movs	r1, #32
 80008a6:	4813      	ldr	r0, [pc, #76]	; (80008f4 <main+0x7c>)
 80008a8:	f000 fce8 	bl	800127c <HAL_GPIO_WritePin>
	  if( HAL_GPIO_ReadPin(ROW0_GPIO_Port, ROW0_Pin) == GPIO_PIN_SET ) {
 80008ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <main+0x80>)
 80008b2:	f000 fccb 	bl	800124c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d1f2      	bne.n	80008a2 <main+0x2a>

	  	  HID_buffer[0] = 2; //left shift down
 80008bc:	2302      	movs	r3, #2
 80008be:	703b      	strb	r3, [r7, #0]
	  	  HID_buffer[3] = 7; // d down
 80008c0:	2307      	movs	r3, #7
 80008c2:	70fb      	strb	r3, [r7, #3]
	  	  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 80008c4:	463b      	mov	r3, r7
 80008c6:	2208      	movs	r2, #8
 80008c8:	4619      	mov	r1, r3
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <main+0x84>)
 80008cc:	f004 fcc8 	bl	8005260 <USBD_HID_SendReport>

	  	  HAL_Delay(20);
 80008d0:	2014      	movs	r0, #20
 80008d2:	f000 fa01 	bl	8000cd8 <HAL_Delay>

	  	  HID_buffer[0] = 0; //left shift up
 80008d6:	2300      	movs	r3, #0
 80008d8:	703b      	strb	r3, [r7, #0]
	  	  HID_buffer[3] = 0; // d up
 80008da:	2300      	movs	r3, #0
 80008dc:	70fb      	strb	r3, [r7, #3]
	  	  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 80008de:	463b      	mov	r3, r7
 80008e0:	2208      	movs	r2, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <main+0x84>)
 80008e6:	f004 fcbb 	bl	8005260 <USBD_HID_SendReport>

	  	  HAL_Delay(200);
 80008ea:	20c8      	movs	r0, #200	; 0xc8
 80008ec:	f000 f9f4 	bl	8000cd8 <HAL_Delay>
	  HAL_GPIO_WritePin(COL6_GPIO_Port, COL6_Pin, GPIO_PIN_SET);
 80008f0:	e7d7      	b.n	80008a2 <main+0x2a>
 80008f2:	bf00      	nop
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	20000224 	.word	0x20000224

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	; 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fc6a 	bl	80071e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a27      	ldr	r2, [pc, #156]	; (80009cc <SystemClock_Config+0xcc>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <SystemClock_Config+0xcc>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <SystemClock_Config+0xd0>)
 800094e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000974:	2304      	movs	r3, #4
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000978:	23a8      	movs	r3, #168	; 0xa8
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800097c:	2304      	movs	r3, #4
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000980:	2307      	movs	r3, #7
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4618      	mov	r0, r3
 800098a:	f002 f80f 	bl	80029ac <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000994:	f000 f81e 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2302      	movs	r3, #2
 800099e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	2102      	movs	r1, #2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fa71 	bl	8002e9c <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009c0:	f000 f808 	bl	80009d4 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3750      	adds	r7, #80	; 0x50
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40007000 	.word	0x40007000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f90c 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <OTG_FS_IRQHandler+0x10>)
 8000a8a:	f000 fe99 	bl	80017c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000700 	.word	0x20000700

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART1_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000af4:	f002 fbf2 	bl	80032dc <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f7ff ff69 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200001d4 	.word	0x200001d4
 8000b0c:	40011000 	.word	0x40011000

08000b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b88:	f000 f9dc 	bl	8000f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba4:	f7ff ff78 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f006 fb13 	bl	80071f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fe51 	bl	8000878 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000be4:	080072c8 	.word	0x080072c8
  ldr r2, =_sbss
 8000be8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000bec:	20000bf8 	.word	0x20000bf8

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f94f 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	200f      	movs	r0, #15
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff feda 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f967 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000021c 	.word	0x2000021c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000021c 	.word	0x2000021c

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e159      	b.n	8001214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8148 	bne.w	800120e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a2 	beq.w	800120e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b57      	ldr	r3, [pc, #348]	; (800122c <HAL_GPIO_Init+0x2e8>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a56      	ldr	r2, [pc, #344]	; (800122c <HAL_GPIO_Init+0x2e8>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <HAL_GPIO_Init+0x2e8>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a52      	ldr	r2, [pc, #328]	; (8001230 <HAL_GPIO_Init+0x2ec>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a49      	ldr	r2, [pc, #292]	; (8001234 <HAL_GPIO_Init+0x2f0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x202>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a48      	ldr	r2, [pc, #288]	; (8001238 <HAL_GPIO_Init+0x2f4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x1fe>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a47      	ldr	r2, [pc, #284]	; (800123c <HAL_GPIO_Init+0x2f8>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x1fa>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_GPIO_Init+0x2fc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x1f6>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a45      	ldr	r2, [pc, #276]	; (8001244 <HAL_GPIO_Init+0x300>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x1f2>
 8001132:	2304      	movs	r3, #4
 8001134:	e008      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001136:	2307      	movs	r3, #7
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x204>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x204>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001146:	2300      	movs	r3, #0
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4093      	lsls	r3, r2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001158:	4935      	ldr	r1, [pc, #212]	; (8001230 <HAL_GPIO_Init+0x2ec>)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_GPIO_Init+0x304>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x304>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_GPIO_Init+0x304>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <HAL_GPIO_Init+0x304>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HAL_GPIO_Init+0x304>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_GPIO_Init+0x304>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_GPIO_Init+0x304>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001208:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_GPIO_Init+0x304>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f aea2 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40013800 	.word	0x40013800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e12b      	b.n	800151a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fa2e 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001314:	f001 ffba 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a81      	ldr	r2, [pc, #516]	; (8001524 <HAL_I2C_Init+0x274>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d807      	bhi.n	8001334 <HAL_I2C_Init+0x84>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a80      	ldr	r2, [pc, #512]	; (8001528 <HAL_I2C_Init+0x278>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e006      	b.n	8001342 <HAL_I2C_Init+0x92>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a7d      	ldr	r2, [pc, #500]	; (800152c <HAL_I2C_Init+0x27c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0e7      	b.n	800151a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a78      	ldr	r2, [pc, #480]	; (8001530 <HAL_I2C_Init+0x280>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a6a      	ldr	r2, [pc, #424]	; (8001524 <HAL_I2C_Init+0x274>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d802      	bhi.n	8001384 <HAL_I2C_Init+0xd4>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	e009      	b.n	8001398 <HAL_I2C_Init+0xe8>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a69      	ldr	r2, [pc, #420]	; (8001534 <HAL_I2C_Init+0x284>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	3301      	adds	r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	495c      	ldr	r1, [pc, #368]	; (8001524 <HAL_I2C_Init+0x274>)
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d819      	bhi.n	80013ec <HAL_I2C_Init+0x13c>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e59      	subs	r1, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013cc:	400b      	ands	r3, r1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <HAL_I2C_Init+0x138>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e59      	subs	r1, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e6:	e051      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e04f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_I2C_Init+0x168>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e012      	b.n	800143e <HAL_I2C_Init+0x18e>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1e58      	subs	r0, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	0099      	lsls	r1, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	fbb0 f3f3 	udiv	r3, r0, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x196>
 8001442:	2301      	movs	r3, #1
 8001444:	e022      	b.n	800148c <HAL_I2C_Init+0x1dc>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10e      	bne.n	800146c <HAL_I2C_Init+0x1bc>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e58      	subs	r0, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6859      	ldr	r1, [r3, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	440b      	add	r3, r1
 800145c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146a:	e00f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	6809      	ldr	r1, [r1, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6911      	ldr	r1, [r2, #16]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68d2      	ldr	r2, [r2, #12]
 80014c6:	4311      	orrs	r1, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	000186a0 	.word	0x000186a0
 8001528:	001e847f 	.word	0x001e847f
 800152c:	003d08ff 	.word	0x003d08ff
 8001530:	431bde83 	.word	0x431bde83
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e101      	b.n	800174e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d106      	bne.n	800156a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f005 fb3d 	bl	8006be4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001578:	d102      	bne.n	8001580 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fa84 	bl	8003a92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7c1a      	ldrb	r2, [r3, #16]
 8001592:	f88d 2000 	strb.w	r2, [sp]
 8001596:	3304      	adds	r3, #4
 8001598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159a:	f002 f963 	bl	8003864 <USB_CoreInit>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0ce      	b.n	800174e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 fa7c 	bl	8003ab4 <USB_SetCurrentMode>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0bf      	b.n	800174e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e04a      	b.n	800166a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015d4:	7bfa      	ldrb	r2, [r7, #15]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	3315      	adds	r3, #21
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	3314      	adds	r3, #20
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	b298      	uxth	r0, r3
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	332e      	adds	r3, #46	; 0x2e
 8001610:	4602      	mov	r2, r0
 8001612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3318      	adds	r3, #24
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001628:	7bfa      	ldrb	r2, [r7, #15]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	331c      	adds	r3, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3320      	adds	r3, #32
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	3324      	adds	r3, #36	; 0x24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3af      	bcc.n	80015d4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e044      	b.n	8001704 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	f203 2355 	addw	r3, r3, #597	; 0x255
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3301      	adds	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	791b      	ldrb	r3, [r3, #4]
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3b5      	bcc.n	800167a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	7c1a      	ldrb	r2, [r3, #16]
 8001716:	f88d 2000 	strb.w	r2, [sp]
 800171a:	3304      	adds	r3, #4
 800171c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171e:	f002 fa15 	bl	8003b4c <USB_DevInit>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e00c      	b.n	800174e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fa5f 	bl	8004c0a <USB_DevDisconnect>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_PCD_Start+0x1c>
 800176e:	2302      	movs	r3, #2
 8001770:	e022      	b.n	80017b8 <HAL_PCD_Start+0x62>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 f966 	bl	8003a70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fa0d 	bl	8004bc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b08d      	sub	sp, #52	; 0x34
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f003 facb 	bl	8004d72 <USB_GetMode>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 848c 	bne.w	80020fc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fa2f 	bl	8004c4c <USB_ReadInterrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8482 	beq.w	80020fa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fa1c 	bl	8004c4c <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f002 0202 	and.w	r2, r2, #2
 800182c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fa0a 	bl	8004c4c <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b10      	cmp	r3, #16
 8001840:	d161      	bne.n	8001906 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0210 	bic.w	r2, r2, #16
 8001850:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f003 020f 	and.w	r2, r3, #15
 800185e:	4613      	mov	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	3304      	adds	r3, #4
 8001870:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	0c5b      	lsrs	r3, r3, #17
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	2b02      	cmp	r3, #2
 800187c:	d124      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d035      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	6a38      	ldr	r0, [r7, #32]
 800189e:	f003 f841 	bl	8004924 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ae:	441a      	add	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c0:	441a      	add	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	e016      	b.n	80018f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	0c5b      	lsrs	r3, r3, #17
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	d110      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80018da:	2208      	movs	r2, #8
 80018dc:	4619      	mov	r1, r3
 80018de:	6a38      	ldr	r0, [r7, #32]
 80018e0:	f003 f820 	bl	8004924 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f0:	441a      	add	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0210 	orr.w	r2, r2, #16
 8001904:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f99e 	bl	8004c4c <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800191a:	f040 80a7 	bne.w	8001a6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f9a3 	bl	8004c72 <USB_ReadDevAllOutEpInterrupt>
 800192c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800192e:	e099      	b.n	8001a64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 808e 	beq.w	8001a58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f9c7 	bl	8004cda <USB_ReadDevOutEPInterrupt>
 800194c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001964:	461a      	mov	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800196a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fe8b 	bl	8002688 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00c      	beq.n	8001996 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	4413      	add	r3, r2
 8001984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001988:	461a      	mov	r2, r3
 800198a:	2308      	movs	r3, #8
 800198c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800198e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ff61 	bl	8002858 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ac:	461a      	mov	r2, r3
 80019ae:	2310      	movs	r3, #16
 80019b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d030      	beq.n	8001a1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c4:	2b80      	cmp	r3, #128	; 0x80
 80019c6:	d109      	bne.n	80019dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	3304      	adds	r3, #4
 80019f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	78db      	ldrb	r3, [r3, #3]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2200      	movs	r2, #0
 80019fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f005 f9f2 	bl	8006df0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a34:	461a      	mov	r2, r3
 8001a36:	2320      	movs	r3, #32
 8001a38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	015a      	lsls	r2, r3, #5
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a50:	461a      	mov	r2, r3
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f af62 	bne.w	8001930 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 f8eb 	bl	8004c4c <USB_ReadInterrupts>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a80:	f040 80db 	bne.w	8001c3a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 f90c 	bl	8004ca6 <USB_ReadDevAllInEpInterrupt>
 8001a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001a94:	e0cd      	b.n	8001c32 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80c2 	beq.w	8001c26 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f932 	bl	8004d16 <USB_ReadDevInEPInterrupt>
 8001ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d057      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69f9      	ldr	r1, [r7, #28]
 8001ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ade:	4013      	ands	r3, r2
 8001ae0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aee:	461a      	mov	r2, r3
 8001af0:	2301      	movs	r3, #1
 8001af2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	799b      	ldrb	r3, [r3, #6]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d132      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	3320      	adds	r3, #32
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	331c      	adds	r3, #28
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4419      	add	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4403      	add	r3, r0
 8001b30:	3320      	adds	r3, #32
 8001b32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d113      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x3a2>
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3324      	adds	r3, #36	; 0x24
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d108      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	f003 f939 	bl	8004dd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 f8bc 	bl	8006ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b84:	461a      	mov	r2, r3
 8001b86:	2308      	movs	r3, #8
 8001b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bce:	6a38      	ldr	r0, [r7, #32]
 8001bd0:	f002 f920 	bl	8003e14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3310      	adds	r3, #16
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	3304      	adds	r3, #4
 8001be6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	78db      	ldrb	r3, [r3, #3]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f005 f909 	bl	8006e14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2302      	movs	r3, #2
 8001c12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fca5 	bl	8002570 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f af2e 	bne.w	8001a96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f804 	bl	8004c4c <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c4e:	d122      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c76:	2100      	movs	r1, #0
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fe8b 	bl	8002994 <HAL_PCDEx_LPM_Callback>
 8001c7e:	e002      	b.n	8001c86 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f005 f8a7 	bl	8006dd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 ffd6 	bl	8004c4c <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001caa:	d112      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d102      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 f863 	bl	8006d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cd0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 ffb8 	bl	8004c4c <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	f040 80b7 	bne.w	8001e58 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2110      	movs	r1, #16
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 f885 	bl	8003e14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d0e:	e046      	b.n	8001d9e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d22:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d34:	0151      	lsls	r1, r2, #5
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	440a      	add	r2, r1
 8001d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d50:	461a      	mov	r2, r3
 8001d52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d68:	0151      	lsls	r1, r2, #5
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	440a      	add	r2, r1
 8001d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d88:	0151      	lsls	r1, r2, #5
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	440a      	add	r2, r1
 8001d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	791b      	ldrb	r3, [r3, #4]
 8001da2:	461a      	mov	r2, r3
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d3b2      	bcc.n	8001d10 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001dbc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7bdb      	ldrb	r3, [r3, #15]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd6:	f043 030b 	orr.w	r3, r3, #11
 8001dda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dec:	f043 030b 	orr.w	r3, r3, #11
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	e015      	b.n	8001e20 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1a:	f043 030b 	orr.w	r3, r3, #11
 8001e1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e42:	461a      	mov	r2, r3
 8001e44:	f002 ffc6 	bl	8004dd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fef5 	bl	8004c4c <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e6c:	d123      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 ff8b 	bl	8004d8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f842 	bl	8003f06 <USB_GetDevSpeed>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681c      	ldr	r4, [r3, #0]
 8001e8e:	f001 f9f1 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8001e92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f001 fd46 	bl	800392c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f004 ff48 	bl	8006d36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fec6 	bl	8004c4c <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f004 ff25 	bl	8006d1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f002 0208 	and.w	r2, r2, #8
 8001ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 feb1 	bl	8004c4c <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d123      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	e014      	b.n	8001f30 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 faf2 	bl	800250e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	461a      	mov	r2, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d3e4      	bcc.n	8001f06 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fe83 	bl	8004c4c <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f50:	d13c      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
 8001f56:	e02b      	b.n	8001fb0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3318      	adds	r3, #24
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d115      	bne.n	8001faa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da12      	bge.n	8001faa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3317      	adds	r3, #23
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fab2 	bl	800250e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	3301      	adds	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	791b      	ldrb	r3, [r3, #4]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d3cd      	bcc.n	8001f58 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fe3b 	bl	8004c4c <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fe0:	d156      	bne.n	8002090 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e045      	b.n	8002074 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d12e      	bne.n	800206e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002010:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	da2b      	bge.n	800206e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002022:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002026:	429a      	cmp	r2, r3
 8002028:	d121      	bne.n	800206e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f203 2357 	addw	r3, r3, #599	; 0x257
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10a      	bne.n	800206e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6053      	str	r3, [r2, #4]
            break;
 800206c:	e008      	b.n	8002080 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	461a      	mov	r2, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	4293      	cmp	r3, r2
 800207e:	d3b3      	bcc.n	8001fe8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800208e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fdd9 	bl	8004c4c <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d10a      	bne.n	80020bc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f004 fec6 	bl	8006e38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fdc3 	bl	8004c4c <USB_ReadInterrupts>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d115      	bne.n	80020fc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f004 feb6 	bl	8006e54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e000      	b.n	80020fc <HAL_PCD_IRQHandler+0x93c>
      return;
 80020fa:	bf00      	nop
    }
  }
}
 80020fc:	3734      	adds	r7, #52	; 0x34
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}

08002102 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_PCD_SetAddress+0x1a>
 8002118:	2302      	movs	r3, #2
 800211a:	e012      	b.n	8002142 <HAL_PCD_SetAddress+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fd22 	bl	8004b7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4603      	mov	r3, r0
 800215a:	70fb      	strb	r3, [r7, #3]
 800215c:	460b      	mov	r3, r1
 800215e:	803b      	strh	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da0f      	bge.n	8002190 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 020f 	and.w	r2, r3, #15
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3310      	adds	r3, #16
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	705a      	strb	r2, [r3, #1]
 800218e:	e00f      	b.n	80021b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	3304      	adds	r3, #4
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80021bc:	883b      	ldrh	r3, [r7, #0]
 80021be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	78ba      	ldrb	r2, [r7, #2]
 80021ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d102      	bne.n	80021ea <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_PCD_EP_Open+0xae>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e00e      	b.n	8002216 <HAL_PCD_EP_Open+0xcc>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fea2 	bl	8003f50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002214:	7afb      	ldrb	r3, [r7, #11]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800222a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222e:	2b00      	cmp	r3, #0
 8002230:	da0f      	bge.n	8002252 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	f003 020f 	and.w	r2, r3, #15
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	3310      	adds	r3, #16
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	3304      	adds	r3, #4
 8002248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	705a      	strb	r2, [r3, #1]
 8002250:	e00f      	b.n	8002272 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	4613      	mov	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_EP_Close+0x6e>
 8002288:	2302      	movs	r3, #2
 800228a:	e00e      	b.n	80022aa <HAL_PCD_EP_Close+0x8c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	4618      	mov	r0, r3
 800229c:	f001 fee0 	bl	8004060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	460b      	mov	r3, r1
 80022c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2200      	movs	r2, #0
 80022f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	799b      	ldrb	r3, [r3, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	799b      	ldrb	r3, [r3, #6]
 8002316:	461a      	mov	r2, r3
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	f001 ff7d 	bl	8004218 <USB_EPStartXfer>

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	3310      	adds	r3, #16
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2201      	movs	r2, #1
 8002366:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	b2da      	uxtb	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	799b      	ldrb	r3, [r3, #6]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d102      	bne.n	8002382 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	799b      	ldrb	r3, [r3, #6]
 800238a:	461a      	mov	r2, r3
 800238c:	6979      	ldr	r1, [r7, #20]
 800238e:	f001 ff43 	bl	8004218 <USB_EPStartXfer>

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	7912      	ldrb	r2, [r2, #4]
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e04f      	b.n	800245a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da0f      	bge.n	80023e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 020f 	and.w	r2, r3, #15
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3310      	adds	r3, #16
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	705a      	strb	r2, [r3, #1]
 80023e0:	e00d      	b.n	80023fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	3304      	adds	r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_EP_SetStall+0x82>
 800241a:	2302      	movs	r3, #2
 800241c:	e01d      	b.n	800245a <HAL_PCD_EP_SetStall+0xbe>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68f9      	ldr	r1, [r7, #12]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fad1 	bl	80049d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7999      	ldrb	r1, [r3, #6]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800244a:	461a      	mov	r2, r3
 800244c:	f002 fcc2 	bl	8004dd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	7912      	ldrb	r2, [r2, #4]
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e042      	b.n	8002506 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da0f      	bge.n	80024a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3310      	adds	r3, #16
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	705a      	strb	r2, [r3, #1]
 80024a6:	e00f      	b.n	80024c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 020f 	and.w	r2, r3, #15
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_EP_ClrStall+0x86>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e00e      	b.n	8002506 <HAL_PCD_EP_ClrStall+0xa4>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fada 	bl	8004ab0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	460b      	mov	r3, r1
 8002518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800251a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da0c      	bge.n	800253c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	3310      	adds	r3, #16
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	3304      	adds	r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e00c      	b.n	8002556 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	3304      	adds	r3, #4
 8002554:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	4618      	mov	r0, r3
 800255e:	f002 f8f9 	bl	8004754 <USB_EPStopXfer>
 8002562:	4603      	mov	r3, r0
 8002564:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002566:	7afb      	ldrb	r3, [r7, #11]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	3310      	adds	r3, #16
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d901      	bls.n	80025a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e06b      	b.n	8002680 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d902      	bls.n	80025c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3303      	adds	r3, #3
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025cc:	e02a      	b.n	8002624 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d902      	bls.n	80025ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3303      	adds	r3, #3
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	68d9      	ldr	r1, [r3, #12]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4603      	mov	r3, r0
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f002 f94e 	bl	80048a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	441a      	add	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	429a      	cmp	r2, r3
 8002638:	d809      	bhi.n	800264e <PCD_WriteEmptyTxFifo+0xde>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002642:	429a      	cmp	r2, r3
 8002644:	d203      	bcs.n	800264e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1bf      	bne.n	80025ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d811      	bhi.n	800267e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	2201      	movs	r2, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	43db      	mvns	r3, r3
 8002674:	6939      	ldr	r1, [r7, #16]
 8002676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800267a:	4013      	ands	r3, r2
 800267c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	333c      	adds	r3, #60	; 0x3c
 80026a0:	3304      	adds	r3, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	799b      	ldrb	r3, [r3, #6]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d17b      	bne.n	80027b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	4a61      	ldr	r2, [pc, #388]	; (8002850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	f240 80b9 	bls.w	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80b3 	beq.w	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	461a      	mov	r2, r3
 80026ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f0:	6093      	str	r3, [r2, #8]
 80026f2:	e0a7      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	461a      	mov	r2, r3
 800270c:	2320      	movs	r3, #32
 800270e:	6093      	str	r3, [r2, #8]
 8002710:	e098      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 8093 	bne.w	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d90f      	bls.n	8002746 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273c:	461a      	mov	r2, r3
 800273e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	e07e      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	440b      	add	r3, r1
 8002768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d114      	bne.n	80027a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002790:	461a      	mov	r2, r3
 8002792:	2101      	movs	r1, #1
 8002794:	f002 fb1e 	bl	8004dd4 <USB_EP0_OutStart>
 8002798:	e006      	b.n	80027a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	441a      	add	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f004 fa7e 	bl	8006cb0 <HAL_PCD_DataOutStageCallback>
 80027b4:	e046      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d124      	bne.n	8002808 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	6093      	str	r3, [r2, #8]
 80027dc:	e032      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	2320      	movs	r3, #32
 80027f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f004 fa55 	bl	8006cb0 <HAL_PCD_DataOutStageCallback>
 8002806:	e01d      	b.n	8002844 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d114      	bne.n	8002838 <PCD_EP_OutXfrComplete_int+0x1b0>
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002830:	461a      	mov	r2, r3
 8002832:	2100      	movs	r1, #0
 8002834:	f002 face 	bl	8004dd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f004 fa36 	bl	8006cb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	4f54300a 	.word	0x4f54300a
 8002854:	4f54310a 	.word	0x4f54310a

08002858 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	333c      	adds	r3, #60	; 0x3c
 8002870:	3304      	adds	r3, #4
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d90e      	bls.n	80028ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a4:	461a      	mov	r2, r3
 80028a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f004 f9ed 	bl	8006c8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d90c      	bls.n	80028d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	799b      	ldrb	r3, [r3, #6]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80028cc:	461a      	mov	r2, r3
 80028ce:	2101      	movs	r1, #1
 80028d0:	f002 fa80 	bl	8004dd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	4f54300a 	.word	0x4f54300a

080028e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
 80028f0:	4613      	mov	r3, r2
 80028f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d107      	bne.n	8002912 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002902:	883b      	ldrh	r3, [r7, #0]
 8002904:	0419      	lsls	r1, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	430a      	orrs	r2, r1
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
 8002910:	e028      	b.n	8002964 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4413      	add	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e00d      	b.n	8002942 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3340      	adds	r3, #64	; 0x40
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4413      	add	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3301      	adds	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	3b01      	subs	r3, #1
 8002948:	429a      	cmp	r2, r3
 800294a:	d3ec      	bcc.n	8002926 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800294c:	883b      	ldrh	r3, [r7, #0]
 800294e:	0418      	lsls	r0, r3, #16
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	3b01      	subs	r3, #1
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	4302      	orrs	r2, r0
 800295c:	3340      	adds	r3, #64	; 0x40
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e267      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d075      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ca:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d00c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b85      	ldr	r3, [pc, #532]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b82      	ldr	r3, [pc, #520]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d10b      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x108>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d157      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e242      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x74>
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a75      	ldr	r2, [pc, #468]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6c      	ldr	r2, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a44:	4b69      	ldr	r3, [pc, #420]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a65      	ldr	r2, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe f92c 	bl	8000cc0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe f928 	bl	8000cc0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e207      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xc0>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe f918 	bl	8000cc0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe f914 	bl	8000cc0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1f3      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0xe8>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d063      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d11c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b44      	ldr	r3, [pc, #272]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d116      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1c7      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4937      	ldr	r1, [pc, #220]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	e03a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe f8cd 	bl	8000cc0 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe f8c9 	bl	8000cc0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1a8      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4925      	ldr	r1, [pc, #148]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe f8ac 	bl	8000cc0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7fe f8a8 	bl	8000cc0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e187      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d036      	beq.n	8002c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f88c 	bl	8000cc0 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe f888 	bl	8000cc0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e167      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x240>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x200>
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f875 	bl	8000cc0 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	e00e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe f871 	bl	8000cc0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d907      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e150      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b88      	ldr	r3, [pc, #544]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ea      	bne.n	8002bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8097 	beq.w	8002d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b7d      	ldr	r3, [pc, #500]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a7c      	ldr	r2, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b7a      	ldr	r3, [pc, #488]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b77      	ldr	r3, [pc, #476]	; (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b74      	ldr	r3, [pc, #464]	; (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f831 	bl	8000cc0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe f82d 	bl	8000cc0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e10c      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2ea>
 8002c88:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a63      	ldr	r2, [pc, #396]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x30c>
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a5e      	ldr	r2, [pc, #376]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8002caa:	4b5c      	ldr	r3, [pc, #368]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002cb8:	4b58      	ldr	r3, [pc, #352]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	4b55      	ldr	r3, [pc, #340]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fd fff2 	bl	8000cc0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fd ffee 	bl	8000cc0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0cb      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ee      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fd ffdc 	bl	8000cc0 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fd ffd8 	bl	8000cc0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0b5      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ee      	bne.n	8002d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a1 	beq.w	8002e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4a:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d05c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d141      	bne.n	8002de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fd ffac 	bl	8000cc0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fd ffa8 	bl	8000cc0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e087      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	491b      	ldr	r1, [pc, #108]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fd ff81 	bl	8000cc0 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fd ff7d 	bl	8000cc0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e05c      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x416>
 8002de0:	e054      	b.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fd ff6a 	bl	8000cc0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fd ff66 	bl	8000cc0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e045      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x444>
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e038      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x4ec>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d028      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d121      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d11a      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d111      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cc      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b68      	ldr	r3, [pc, #416]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d90c      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b63      	ldr	r3, [pc, #396]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	494d      	ldr	r1, [pc, #308]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d044      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d119      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e067      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4934      	ldr	r1, [pc, #208]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fd fe98 	bl	8000cc0 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fd fe94 	bl	8000cc0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e04f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d20c      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e032      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4916      	ldr	r1, [pc, #88]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003022:	f000 f821 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490a      	ldr	r1, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fdf8 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00
 8003058:	40023800 	.word	0x40023800
 800305c:	080072a0 	.word	0x080072a0
 8003060:	20000000 	.word	0x20000000
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b094      	sub	sp, #80	; 0x50
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003080:	4b79      	ldr	r3, [pc, #484]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 800308c:	2b08      	cmp	r3, #8
 800308e:	f200 80e1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800309a:	e0db      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b73      	ldr	r3, [pc, #460]	; (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a0:	e0db      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b73      	ldr	r3, [pc, #460]	; (8003270 <HAL_RCC_GetSysClockFreq+0x208>)
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a6:	e0d8      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b2:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030be:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	2200      	movs	r2, #0
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
 80030d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4621      	mov	r1, r4
 80030f4:	1a51      	subs	r1, r2, r1
 80030f6:	6139      	str	r1, [r7, #16]
 80030f8:	4629      	mov	r1, r5
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800310c:	4659      	mov	r1, fp
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003116:	4651      	mov	r1, sl
 8003118:	018a      	lsls	r2, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	ebb2 0801 	subs.w	r8, r2, r1
 8003120:	4659      	mov	r1, fp
 8003122:	eb63 0901 	sbc.w	r9, r3, r1
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313a:	4690      	mov	r8, r2
 800313c:	4699      	mov	r9, r3
 800313e:	4623      	mov	r3, r4
 8003140:	eb18 0303 	adds.w	r3, r8, r3
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	462b      	mov	r3, r5
 8003148:	eb49 0303 	adc.w	r3, r9, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800315a:	4629      	mov	r1, r5
 800315c:	024b      	lsls	r3, r1, #9
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003164:	4621      	mov	r1, r4
 8003166:	024a      	lsls	r2, r1, #9
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 8003172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003178:	f7fd f82c 	bl	80001d4 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	e058      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	4618      	mov	r0, r3
 8003190:	4611      	mov	r1, r2
 8003192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4641      	mov	r1, r8
 80031ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d8:	ebb2 040a 	subs.w	r4, r2, sl
 80031dc:	eb63 050b 	sbc.w	r5, r3, fp
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb45 0303 	adc.w	r3, r5, r3
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320e:	4629      	mov	r1, r5
 8003210:	028b      	lsls	r3, r1, #10
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003218:	4621      	mov	r1, r4
 800321a:	028a      	lsls	r2, r1, #10
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	f7fc ffd2 	bl	80001d4 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800324a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800325c:	4618      	mov	r0, r3
 800325e:	3750      	adds	r7, #80	; 0x50
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a9b      	lsrs	r3, r3, #10
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4903      	ldr	r1, [pc, #12]	; (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40023800 	.word	0x40023800
 80032b0:	080072b0 	.word	0x080072b0

080032b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b8:	f7ff ffdc 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0b5b      	lsrs	r3, r3, #13
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	; (80032d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	080072b0 	.word	0x080072b0

080032dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e042      	b.n	8003374 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fc04 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2224      	movs	r2, #36	; 0x24
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800331e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f82b 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b0c0      	sub	sp, #256	; 0x100
 8003382:	af00      	add	r7, sp, #0
 8003384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	ea40 0301 	orr.w	r3, r0, r1
 80033a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d4:	f021 010c 	bic.w	r1, r1, #12
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033e2:	430b      	orrs	r3, r1
 80033e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	6999      	ldr	r1, [r3, #24]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	ea40 0301 	orr.w	r3, r0, r1
 8003402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <UART_SetConfig+0x2cc>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d005      	beq.n	800341c <UART_SetConfig+0xa0>
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b8d      	ldr	r3, [pc, #564]	; (800364c <UART_SetConfig+0x2d0>)
 8003418:	429a      	cmp	r2, r3
 800341a:	d104      	bne.n	8003426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7ff ff4a 	bl	80032b4 <HAL_RCC_GetPCLK2Freq>
 8003420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003424:	e003      	b.n	800342e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003426:	f7ff ff31 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 800342a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	f040 810c 	bne.w	8003654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800344a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800344e:	4622      	mov	r2, r4
 8003450:	462b      	mov	r3, r5
 8003452:	1891      	adds	r1, r2, r2
 8003454:	65b9      	str	r1, [r7, #88]	; 0x58
 8003456:	415b      	adcs	r3, r3
 8003458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800345e:	4621      	mov	r1, r4
 8003460:	eb12 0801 	adds.w	r8, r2, r1
 8003464:	4629      	mov	r1, r5
 8003466:	eb43 0901 	adc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800348c:	462b      	mov	r3, r5
 800348e:	eb49 0303 	adc.w	r3, r9, r3
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034aa:	460b      	mov	r3, r1
 80034ac:	18db      	adds	r3, r3, r3
 80034ae:	653b      	str	r3, [r7, #80]	; 0x50
 80034b0:	4613      	mov	r3, r2
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
 80034b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034c0:	f7fc fe88 	bl	80001d4 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <UART_SetConfig+0x2d4>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	011c      	lsls	r4, r3, #4
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80034ec:	415b      	adcs	r3, r3
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034f4:	4641      	mov	r1, r8
 80034f6:	eb12 0a01 	adds.w	sl, r2, r1
 80034fa:	4649      	mov	r1, r9
 80034fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800350c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003514:	4692      	mov	sl, r2
 8003516:	469b      	mov	fp, r3
 8003518:	4643      	mov	r3, r8
 800351a:	eb1a 0303 	adds.w	r3, sl, r3
 800351e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003522:	464b      	mov	r3, r9
 8003524:	eb4b 0303 	adc.w	r3, fp, r3
 8003528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800353c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003540:	460b      	mov	r3, r1
 8003542:	18db      	adds	r3, r3, r3
 8003544:	643b      	str	r3, [r7, #64]	; 0x40
 8003546:	4613      	mov	r3, r2
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003556:	f7fc fe3d 	bl	80001d4 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <UART_SetConfig+0x2d4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	; 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <UART_SetConfig+0x2d4>)
 8003578:	fba3 2302 	umull	r2, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	63b9      	str	r1, [r7, #56]	; 0x38
 80035a0:	415b      	adcs	r3, r3
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6339      	str	r1, [r7, #48]	; 0x30
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035dc:	464b      	mov	r3, r9
 80035de:	460a      	mov	r2, r1
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035fc:	460b      	mov	r3, r1
 80035fe:	18db      	adds	r3, r3, r3
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
 8003602:	4613      	mov	r3, r2
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003612:	f7fc fddf 	bl	80001d4 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <UART_SetConfig+0x2d4>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <UART_SetConfig+0x2d4>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 0207 	and.w	r2, r3, #7
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4422      	add	r2, r4
 8003642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003644:	e106      	b.n	8003854 <UART_SetConfig+0x4d8>
 8003646:	bf00      	nop
 8003648:	40011000 	.word	0x40011000
 800364c:	40011400 	.word	0x40011400
 8003650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800365e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003666:	4642      	mov	r2, r8
 8003668:	464b      	mov	r3, r9
 800366a:	1891      	adds	r1, r2, r2
 800366c:	6239      	str	r1, [r7, #32]
 800366e:	415b      	adcs	r3, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003676:	4641      	mov	r1, r8
 8003678:	1854      	adds	r4, r2, r1
 800367a:	4649      	mov	r1, r9
 800367c:	eb43 0501 	adc.w	r5, r3, r1
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	00eb      	lsls	r3, r5, #3
 800368a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	4614      	mov	r4, r2
 8003692:	461d      	mov	r5, r3
 8003694:	4643      	mov	r3, r8
 8003696:	18e3      	adds	r3, r4, r3
 8003698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800369c:	464b      	mov	r3, r9
 800369e:	eb45 0303 	adc.w	r3, r5, r3
 80036a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036c2:	4629      	mov	r1, r5
 80036c4:	008b      	lsls	r3, r1, #2
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036cc:	4621      	mov	r1, r4
 80036ce:	008a      	lsls	r2, r1, #2
 80036d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036d4:	f7fc fd7e 	bl	80001d4 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4b60      	ldr	r3, [pc, #384]	; (8003860 <UART_SetConfig+0x4e4>)
 80036de:	fba3 2302 	umull	r2, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	011c      	lsls	r4, r3, #4
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	1891      	adds	r1, r2, r2
 80036fe:	61b9      	str	r1, [r7, #24]
 8003700:	415b      	adcs	r3, r3
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003708:	4641      	mov	r1, r8
 800370a:	1851      	adds	r1, r2, r1
 800370c:	6139      	str	r1, [r7, #16]
 800370e:	4649      	mov	r1, r9
 8003710:	414b      	adcs	r3, r1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003720:	4659      	mov	r1, fp
 8003722:	00cb      	lsls	r3, r1, #3
 8003724:	4651      	mov	r1, sl
 8003726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372a:	4651      	mov	r1, sl
 800372c:	00ca      	lsls	r2, r1, #3
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	4603      	mov	r3, r0
 8003734:	4642      	mov	r2, r8
 8003736:	189b      	adds	r3, r3, r2
 8003738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800373c:	464b      	mov	r3, r9
 800373e:	460a      	mov	r2, r1
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	67bb      	str	r3, [r7, #120]	; 0x78
 8003752:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003760:	4649      	mov	r1, r9
 8003762:	008b      	lsls	r3, r1, #2
 8003764:	4641      	mov	r1, r8
 8003766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376a:	4641      	mov	r1, r8
 800376c:	008a      	lsls	r2, r1, #2
 800376e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003772:	f7fc fd2f 	bl	80001d4 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4611      	mov	r1, r2
 800377c:	4b38      	ldr	r3, [pc, #224]	; (8003860 <UART_SetConfig+0x4e4>)
 800377e:	fba3 2301 	umull	r2, r3, r3, r1
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2264      	movs	r2, #100	; 0x64
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	1acb      	subs	r3, r1, r3
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a33      	ldr	r2, [pc, #204]	; (8003860 <UART_SetConfig+0x4e4>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379c:	441c      	add	r4, r3
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	673b      	str	r3, [r7, #112]	; 0x70
 80037a6:	677a      	str	r2, [r7, #116]	; 0x74
 80037a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037ac:	4642      	mov	r2, r8
 80037ae:	464b      	mov	r3, r9
 80037b0:	1891      	adds	r1, r2, r2
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	415b      	adcs	r3, r3
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037bc:	4641      	mov	r1, r8
 80037be:	1851      	adds	r1, r2, r1
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	4649      	mov	r1, r9
 80037c4:	414b      	adcs	r3, r1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037d4:	4659      	mov	r1, fp
 80037d6:	00cb      	lsls	r3, r1, #3
 80037d8:	4651      	mov	r1, sl
 80037da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037de:	4651      	mov	r1, sl
 80037e0:	00ca      	lsls	r2, r1, #3
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	4642      	mov	r2, r8
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ee:	464b      	mov	r3, r9
 80037f0:	460a      	mov	r2, r1
 80037f2:	eb42 0303 	adc.w	r3, r2, r3
 80037f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	663b      	str	r3, [r7, #96]	; 0x60
 8003802:	667a      	str	r2, [r7, #100]	; 0x64
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003810:	4649      	mov	r1, r9
 8003812:	008b      	lsls	r3, r1, #2
 8003814:	4641      	mov	r1, r8
 8003816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800381a:	4641      	mov	r1, r8
 800381c:	008a      	lsls	r2, r1, #2
 800381e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003822:	f7fc fcd7 	bl	80001d4 <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <UART_SetConfig+0x4e4>)
 800382c:	fba3 1302 	umull	r1, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	2164      	movs	r1, #100	; 0x64
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	3332      	adds	r3, #50	; 0x32
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <UART_SetConfig+0x4e4>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4422      	add	r2, r4
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003860:	51eb851f 	.word	0x51eb851f

08003864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003864:	b084      	sub	sp, #16
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	f107 001c 	add.w	r0, r7, #28
 8003872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003876:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800387a:	2b01      	cmp	r3, #1
 800387c:	d123      	bne.n	80038c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f001 fae8 	bl	8004e90 <USB_CoreReset>
 80038c0:	4603      	mov	r3, r0
 80038c2:	73fb      	strb	r3, [r7, #15]
 80038c4:	e01b      	b.n	80038fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f001 fadc 	bl	8004e90 <USB_CoreReset>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
 80038f0:	e005      	b.n	80038fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038fe:	7fbb      	ldrb	r3, [r7, #30]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10b      	bne.n	800391c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f043 0206 	orr.w	r2, r3, #6
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003928:	b004      	add	sp, #16
 800392a:	4770      	bx	lr

0800392c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d165      	bne.n	8003a0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <USB_SetTurnaroundTime+0x11c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d906      	bls.n	8003956 <USB_SetTurnaroundTime+0x2a>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <USB_SetTurnaroundTime+0x120>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d202      	bcs.n	8003956 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003950:	230f      	movs	r3, #15
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e062      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <USB_SetTurnaroundTime+0x120>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d306      	bcc.n	800396c <USB_SetTurnaroundTime+0x40>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <USB_SetTurnaroundTime+0x124>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d202      	bcs.n	800396c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003966:	230e      	movs	r3, #14
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e057      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <USB_SetTurnaroundTime+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d306      	bcc.n	8003982 <USB_SetTurnaroundTime+0x56>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4a37      	ldr	r2, [pc, #220]	; (8003a54 <USB_SetTurnaroundTime+0x128>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d202      	bcs.n	8003982 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800397c:	230d      	movs	r3, #13
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e04c      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a33      	ldr	r2, [pc, #204]	; (8003a54 <USB_SetTurnaroundTime+0x128>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d306      	bcc.n	8003998 <USB_SetTurnaroundTime+0x6c>
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	4a32      	ldr	r2, [pc, #200]	; (8003a58 <USB_SetTurnaroundTime+0x12c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d802      	bhi.n	8003998 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003992:	230c      	movs	r3, #12
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	e041      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <USB_SetTurnaroundTime+0x12c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d906      	bls.n	80039ae <USB_SetTurnaroundTime+0x82>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <USB_SetTurnaroundTime+0x130>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d802      	bhi.n	80039ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80039a8:	230b      	movs	r3, #11
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	e036      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a2a      	ldr	r2, [pc, #168]	; (8003a5c <USB_SetTurnaroundTime+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d906      	bls.n	80039c4 <USB_SetTurnaroundTime+0x98>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4a29      	ldr	r2, [pc, #164]	; (8003a60 <USB_SetTurnaroundTime+0x134>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d802      	bhi.n	80039c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039be:	230a      	movs	r3, #10
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e02b      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <USB_SetTurnaroundTime+0x134>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d906      	bls.n	80039da <USB_SetTurnaroundTime+0xae>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <USB_SetTurnaroundTime+0x138>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d202      	bcs.n	80039da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039d4:	2309      	movs	r3, #9
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e020      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <USB_SetTurnaroundTime+0x138>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d306      	bcc.n	80039f0 <USB_SetTurnaroundTime+0xc4>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <USB_SetTurnaroundTime+0x13c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d802      	bhi.n	80039f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039ea:	2308      	movs	r3, #8
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e015      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	; (8003a68 <USB_SetTurnaroundTime+0x13c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d906      	bls.n	8003a06 <USB_SetTurnaroundTime+0xda>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <USB_SetTurnaroundTime+0x140>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d202      	bcs.n	8003a06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003a00:	2307      	movs	r3, #7
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e00a      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003a06:	2306      	movs	r3, #6
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	e007      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003a12:	2309      	movs	r3, #9
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e001      	b.n	8003a1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a18:	2309      	movs	r3, #9
 8003a1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	029b      	lsls	r3, r3, #10
 8003a30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	00d8acbf 	.word	0x00d8acbf
 8003a4c:	00e4e1c0 	.word	0x00e4e1c0
 8003a50:	00f42400 	.word	0x00f42400
 8003a54:	01067380 	.word	0x01067380
 8003a58:	011a499f 	.word	0x011a499f
 8003a5c:	01312cff 	.word	0x01312cff
 8003a60:	014ca43f 	.word	0x014ca43f
 8003a64:	016e3600 	.word	0x016e3600
 8003a68:	01a6ab1f 	.word	0x01a6ab1f
 8003a6c:	01e84800 	.word	0x01e84800

08003a70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0201 	bic.w	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ae2:	200a      	movs	r0, #10
 8003ae4:	f7fd f8f8 	bl	8000cd8 <HAL_Delay>
      ms += 10U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	330a      	adds	r3, #10
 8003aec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 f93f 	bl	8004d72 <USB_GetMode>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d01e      	beq.n	8003b38 <USB_SetCurrentMode+0x84>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2bc7      	cmp	r3, #199	; 0xc7
 8003afe:	d9f0      	bls.n	8003ae2 <USB_SetCurrentMode+0x2e>
 8003b00:	e01a      	b.n	8003b38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d115      	bne.n	8003b34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b14:	200a      	movs	r0, #10
 8003b16:	f7fd f8df 	bl	8000cd8 <HAL_Delay>
      ms += 10U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	330a      	adds	r3, #10
 8003b1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f926 	bl	8004d72 <USB_GetMode>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <USB_SetCurrentMode+0x84>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2bc7      	cmp	r3, #199	; 0xc7
 8003b30:	d9f0      	bls.n	8003b14 <USB_SetCurrentMode+0x60>
 8003b32:	e001      	b.n	8003b38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e005      	b.n	8003b44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2bc8      	cmp	r3, #200	; 0xc8
 8003b3c:	d101      	bne.n	8003b42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	e009      	b.n	8003b80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3340      	adds	r3, #64	; 0x40
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b0e      	cmp	r3, #14
 8003b84:	d9f2      	bls.n	8003b6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11c      	bne.n	8003bc8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc6:	e00b      	b.n	8003be0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d10d      	bne.n	8003c10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f968 	bl	8003ed4 <USB_SetDevSpeed>
 8003c04:	e008      	b.n	8003c18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c06:	2101      	movs	r1, #1
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f963 	bl	8003ed4 <USB_SetDevSpeed>
 8003c0e:	e003      	b.n	8003c18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c10:	2103      	movs	r1, #3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f95e 	bl	8003ed4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c18:	2110      	movs	r1, #16
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8fa 	bl	8003e14 <USB_FlushTxFifo>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f924 	bl	8003e78 <USB_FlushRxFifo>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e043      	b.n	8003cec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7a:	d118      	bne.n	8003cae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e013      	b.n	8003cc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e008      	b.n	8003cc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d3b5      	bcc.n	8003c64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e043      	b.n	8003d86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d14:	d118      	bne.n	8003d48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	e013      	b.n	8003d5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e008      	b.n	8003d5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	461a      	mov	r2, r3
 8003d56:	2300      	movs	r3, #0
 8003d58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3301      	adds	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d3b5      	bcc.n	8003cfe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003db2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f043 0210 	orr.w	r2, r3, #16
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <USB_DevInit+0x2c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dd4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f043 0208 	orr.w	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0c:	b004      	add	sp, #16
 8003e0e:	4770      	bx	lr
 8003e10:	803c3800 	.word	0x803c3800

08003e14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3301      	adds	r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e2e:	d901      	bls.n	8003e34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e01b      	b.n	8003e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	daf2      	bge.n	8003e22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	019b      	lsls	r3, r3, #6
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e58:	d901      	bls.n	8003e5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e006      	b.n	8003e6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d0f0      	beq.n	8003e4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e90:	d901      	bls.n	8003e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e018      	b.n	8003ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	daf2      	bge.n	8003e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003eb4:	d901      	bls.n	8003eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e006      	b.n	8003ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d0f0      	beq.n	8003ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	68f9      	ldr	r1, [r7, #12]
 8003ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b087      	sub	sp, #28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
 8003f2a:	e00a      	b.n	8003f42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d002      	beq.n	8003f38 <USB_GetDevSpeed+0x32>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d102      	bne.n	8003f3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	75fb      	strb	r3, [r7, #23]
 8003f3c:	e001      	b.n	8003f42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f3e:	230f      	movs	r3, #15
 8003f40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d13a      	bne.n	8003fe2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d155      	bne.n	8004050 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	791b      	ldrb	r3, [r3, #4]
 8003fbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	059b      	lsls	r3, r3, #22
 8003fc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e036      	b.n	8004050 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004000:	4313      	orrs	r3, r2
 8004002:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d11a      	bne.n	8004050 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004036:	430b      	orrs	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	440a      	add	r2, r1
 8004042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d161      	bne.n	8004140 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800408e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004092:	d11f      	bne.n	80040d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	0151      	lsls	r1, r2, #5
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	440a      	add	r2, r1
 80040aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f4:	4013      	ands	r3, r2
 80040f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	b29b      	uxth	r3, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004118:	4013      	ands	r3, r2
 800411a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0159      	lsls	r1, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	440b      	add	r3, r1
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	4619      	mov	r1, r3
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <USB_DeactivateEndpoint+0x1b0>)
 800413a:	4013      	ands	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
 800413e:	e060      	b.n	8004202 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004156:	d11f      	bne.n	8004198 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	0151      	lsls	r1, r2, #5
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	440a      	add	r2, r1
 800416e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004176:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004192:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004196:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	43db      	mvns	r3, r3
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b8:	4013      	ands	r3, r2
 80041ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	43db      	mvns	r3, r3
 80041d6:	68f9      	ldr	r1, [r7, #12]
 80041d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041dc:	4013      	ands	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	0159      	lsls	r1, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	440b      	add	r3, r1
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	4619      	mov	r1, r3
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <USB_DeactivateEndpoint+0x1b4>)
 80041fe:	4013      	ands	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	ec337800 	.word	0xec337800
 8004214:	eff37800 	.word	0xeff37800

08004218 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b01      	cmp	r3, #1
 8004236:	f040 8180 	bne.w	800453a <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d132      	bne.n	80042a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	0151      	lsls	r1, r2, #5
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	440a      	add	r2, r1
 8004258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004260:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004264:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a0:	0cdb      	lsrs	r3, r3, #19
 80042a2:	04db      	lsls	r3, r3, #19
 80042a4:	6113      	str	r3, [r2, #16]
 80042a6:	e098      	b.n	80043da <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c2:	0cdb      	lsrs	r3, r3, #19
 80042c4:	04db      	lsls	r3, r3, #19
 80042c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d903      	bls.n	8004306 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004324:	6113      	str	r3, [r2, #16]
 8004326:	e045      	b.n	80043b4 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4413      	add	r3, r2
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	8afb      	ldrh	r3, [r7, #22]
 800434e:	04db      	lsls	r3, r3, #19
 8004350:	4619      	mov	r1, r3
 8004352:	4ba4      	ldr	r3, [pc, #656]	; (80045e4 <USB_EPStartXfer+0x3cc>)
 8004354:	400b      	ands	r3, r1
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	0148      	lsls	r0, r1, #5
 800435a:	69f9      	ldr	r1, [r7, #28]
 800435c:	4401      	add	r1, r0
 800435e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004362:	4313      	orrs	r3, r2
 8004364:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	791b      	ldrb	r3, [r3, #4]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d122      	bne.n	80043b4 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004388:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800438c:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	8afb      	ldrh	r3, [r7, #22]
 800439e:	075b      	lsls	r3, r3, #29
 80043a0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	0148      	lsls	r0, r1, #5
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	4401      	add	r1, r0
 80043ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	0148      	lsls	r0, r1, #5
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	4401      	add	r1, r0
 80043d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043d6:	4313      	orrs	r3, r2
 80043d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d14b      	bne.n	8004478 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	791b      	ldrb	r3, [r3, #4]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d128      	bne.n	8004456 <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d110      	bne.n	8004436 <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e00f      	b.n	8004456 <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	0151      	lsls	r1, r2, #5
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	440a      	add	r2, r1
 800446c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004470:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e165      	b.n	8004744 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004496:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	791b      	ldrb	r3, [r3, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d015      	beq.n	80044cc <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 814d 	beq.w	8004744 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f303 	lsl.w	r3, r1, r3
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c6:	4313      	orrs	r3, r2
 80044c8:	634b      	str	r3, [r1, #52]	; 0x34
 80044ca:	e13b      	b.n	8004744 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d110      	bne.n	80044fe <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e00f      	b.n	800451e <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	b298      	uxth	r0, r3
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	4603      	mov	r3, r0
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9b8 	bl	80048a8 <USB_WritePacket>
 8004538:	e104      	b.n	8004744 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004554:	0cdb      	lsrs	r3, r3, #19
 8004556:	04db      	lsls	r3, r3, #19
 8004558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800457c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d131      	bne.n	80045e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	0148      	lsls	r0, r1, #5
 80045b6:	69f9      	ldr	r1, [r7, #28]
 80045b8:	4401      	add	r1, r0
 80045ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e0:	6113      	str	r3, [r2, #16]
 80045e2:	e061      	b.n	80046a8 <USB_EPStartXfer+0x490>
 80045e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d123      	bne.n	8004638 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	0148      	lsls	r0, r1, #5
 800460a:	69f9      	ldr	r1, [r7, #28]
 800460c:	4401      	add	r1, r0
 800460e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004612:	4313      	orrs	r3, r2
 8004614:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004634:	6113      	str	r3, [r2, #16]
 8004636:	e037      	b.n	80046a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4413      	add	r3, r2
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	8afa      	ldrh	r2, [r7, #22]
 8004654:	fb03 f202 	mul.w	r2, r3, r2
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	8afb      	ldrh	r3, [r7, #22]
 800466c:	04d9      	lsls	r1, r3, #19
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <USB_EPStartXfer+0x538>)
 8004670:	400b      	ands	r3, r1
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	0148      	lsls	r0, r1, #5
 8004676:	69f9      	ldr	r1, [r7, #28]
 8004678:	4401      	add	r1, r0
 800467a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800467e:	4313      	orrs	r3, r2
 8004680:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	0148      	lsls	r0, r1, #5
 800469c:	69f9      	ldr	r1, [r7, #28]
 800469e:	4401      	add	r1, r0
 80046a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046a4:	4313      	orrs	r3, r2
 80046a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d10d      	bne.n	80046ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	460a      	mov	r2, r1
 80046c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d128      	bne.n	8004724 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d110      	bne.n	8004704 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e00f      	b.n	8004724 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3720      	adds	r7, #32
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	1ff80000 	.word	0x1ff80000

08004754 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d14a      	bne.n	8004808 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800478a:	f040 8086 	bne.w	800489a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f242 7210 	movw	r2, #10000	; 0x2710
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d902      	bls.n	80047ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
          break;
 80047ea:	e056      	b.n	800489a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004804:	d0e7      	beq.n	80047d6 <USB_EPStopXfer+0x82>
 8004806:	e048      	b.n	800489a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004820:	d13b      	bne.n	800489a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	7812      	ldrb	r2, [r2, #0]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004844:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f242 7210 	movw	r2, #10000	; 0x2710
 8004876:	4293      	cmp	r3, r2
 8004878:	d902      	bls.n	8004880 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
          break;
 800487e:	e00c      	b.n	800489a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004898:	d0e7      	beq.n	800486a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	460b      	mov	r3, r1
 80048b8:	71fb      	strb	r3, [r7, #7]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d123      	bne.n	8004916 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ce:	88bb      	ldrh	r3, [r7, #4]
 80048d0:	3303      	adds	r3, #3
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e018      	b.n	800490e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	031a      	lsls	r2, r3, #12
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3301      	adds	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	3301      	adds	r3, #1
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	429a      	cmp	r2, r3
 8004914:	d3e2      	bcc.n	80048dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3724      	adds	r7, #36	; 0x24
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004924:	b480      	push	{r7}
 8004926:	b08b      	sub	sp, #44	; 0x2c
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	b29b      	uxth	r3, r3
 8004940:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
 800494e:	e014      	b.n	800497a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	601a      	str	r2, [r3, #0]
    pDest++;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	3301      	adds	r3, #1
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	3301      	adds	r3, #1
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	3301      	adds	r3, #1
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	3301      	adds	r3, #1
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	3301      	adds	r3, #1
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d3e6      	bcc.n	8004950 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004982:	8bfb      	ldrh	r3, [r7, #30]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01e      	beq.n	80049c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	461a      	mov	r2, r3
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	701a      	strb	r2, [r3, #0]
      i++;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	3301      	adds	r3, #1
 80049b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049ba:	8bfb      	ldrh	r3, [r7, #30]
 80049bc:	3b01      	subs	r3, #1
 80049be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ea      	bne.n	800499c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	372c      	adds	r7, #44	; 0x2c
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d12c      	bne.n	8004a4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	db12      	blt.n	8004a28 <USB_EPSetStall+0x54>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00f      	beq.n	8004a28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e02b      	b.n	8004aa2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db12      	blt.n	8004a82 <USB_EPSetStall+0xae>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00f      	beq.n	8004a82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d128      	bne.n	8004b1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d003      	beq.n	8004afc <USB_EPClearStall+0x4c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	791b      	ldrb	r3, [r3, #4]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d138      	bne.n	8004b6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e027      	b.n	8004b6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	791b      	ldrb	r3, [r3, #4]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d003      	beq.n	8004b4e <USB_EPClearStall+0x9e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d10f      	bne.n	8004b6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bf6:	f023 0302 	bic.w	r3, r3, #2
 8004bfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4013      	ands	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c64:	68fb      	ldr	r3, [r7, #12]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	4013      	ands	r3, r2
 8004c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0c1b      	lsrs	r3, r3, #16
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	b29b      	uxth	r3, r3
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d08:	68bb      	ldr	r3, [r7, #8]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	01db      	lsls	r3, r3, #7
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4013      	ands	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d64:	68bb      	ldr	r3, [r7, #8]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dac:	f023 0307 	bic.w	r3, r3, #7
 8004db0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	333c      	adds	r3, #60	; 0x3c
 8004dea:	3304      	adds	r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <USB_EP0_OutStart+0xb8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d90a      	bls.n	8004e0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e08:	d101      	bne.n	8004e0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e037      	b.n	8004e7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f043 0318 	orr.w	r3, r3, #24
 8004e40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e56:	7afb      	ldrb	r3, [r7, #11]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10f      	bne.n	8004e7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	4f54300a 	.word	0x4f54300a

08004e90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ea8:	d901      	bls.n	8004eae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e01b      	b.n	8004ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	daf2      	bge.n	8004e9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f043 0201 	orr.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ed2:	d901      	bls.n	8004ed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d0f0      	beq.n	8004ec6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004f00:	2010      	movs	r0, #16
 8004f02:	f002 f92d 	bl	8007160 <USBD_static_malloc>
 8004f06:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	32b0      	adds	r2, #176	; 0xb0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e048      	b.n	8004fb4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	32b0      	adds	r2, #176	; 0xb0
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	32b0      	adds	r2, #176	; 0xb0
 8004f3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1b      	ldrb	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <USBD_HID_Init+0xc8>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	3326      	adds	r3, #38	; 0x26
 8004f64:	2207      	movs	r2, #7
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e00c      	b.n	8004f84 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <USBD_HID_Init+0xc8>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	f003 020f 	and.w	r2, r3, #15
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3326      	adds	r3, #38	; 0x26
 8004f80:	220a      	movs	r2, #10
 8004f82:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <USBD_HID_Init+0xc8>)
 8004f86:	7819      	ldrb	r1, [r3, #0]
 8004f88:	2304      	movs	r3, #4
 8004f8a:	2203      	movs	r2, #3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 ffd6 	bl	8006f3e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <USBD_HID_Init+0xc8>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	f003 020f 	and.w	r2, r3, #15
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3324      	adds	r3, #36	; 0x24
 8004fa8:	2201      	movs	r2, #1
 8004faa:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	200000bf 	.word	0x200000bf

08004fc0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004fcc:	4b1f      	ldr	r3, [pc, #124]	; (800504c <USBD_HID_DeInit+0x8c>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 ffd9 	bl	8006f8a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	; (800504c <USBD_HID_DeInit+0x8c>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f003 020f 	and.w	r2, r3, #15
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3324      	adds	r3, #36	; 0x24
 8004fee:	2200      	movs	r2, #0
 8004ff0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <USBD_HID_DeInit+0x8c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 020f 	and.w	r2, r3, #15
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3326      	adds	r3, #38	; 0x26
 8005008:	2200      	movs	r2, #0
 800500a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	32b0      	adds	r2, #176	; 0xb0
 8005016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d011      	beq.n	8005042 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	32b0      	adds	r2, #176	; 0xb0
 8005028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502c:	4618      	mov	r0, r3
 800502e:	f002 f8a5 	bl	800717c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	32b0      	adds	r2, #176	; 0xb0
 800503c:	2100      	movs	r1, #0
 800503e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200000bf 	.word	0x200000bf

08005050 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	32b0      	adds	r2, #176	; 0xb0
 8005064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005068:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	e0e8      	b.n	800524e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005084:	2b00      	cmp	r3, #0
 8005086:	d046      	beq.n	8005116 <USBD_HID_Setup+0xc6>
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 80d8 	bne.w	800523e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	3b02      	subs	r3, #2
 8005094:	2b09      	cmp	r3, #9
 8005096:	d836      	bhi.n	8005106 <USBD_HID_Setup+0xb6>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <USBD_HID_Setup+0x50>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050f7 	.word	0x080050f7
 80050a4:	080050d7 	.word	0x080050d7
 80050a8:	08005107 	.word	0x08005107
 80050ac:	08005107 	.word	0x08005107
 80050b0:	08005107 	.word	0x08005107
 80050b4:	08005107 	.word	0x08005107
 80050b8:	08005107 	.word	0x08005107
 80050bc:	08005107 	.word	0x08005107
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050c9 	.word	0x080050c9
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	885b      	ldrh	r3, [r3, #2]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]
          break;
 80050d4:	e01e      	b.n	8005114 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 fbe7 	bl	80068b0 <USBD_CtlSendData>
          break;
 80050e2:	e017      	b.n	8005114 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	885b      	ldrh	r3, [r3, #2]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	605a      	str	r2, [r3, #4]
          break;
 80050f4:	e00e      	b.n	8005114 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2201      	movs	r2, #1
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f001 fbd6 	bl	80068b0 <USBD_CtlSendData>
          break;
 8005104:	e006      	b.n	8005114 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f001 fb54 	bl	80067b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800510e:	2303      	movs	r3, #3
 8005110:	75fb      	strb	r3, [r7, #23]
          break;
 8005112:	bf00      	nop
      }
      break;
 8005114:	e09a      	b.n	800524c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b0b      	cmp	r3, #11
 800511c:	f200 8086 	bhi.w	800522c <USBD_HID_Setup+0x1dc>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <USBD_HID_Setup+0xd8>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005159 	.word	0x08005159
 800512c:	0800523b 	.word	0x0800523b
 8005130:	0800522d 	.word	0x0800522d
 8005134:	0800522d 	.word	0x0800522d
 8005138:	0800522d 	.word	0x0800522d
 800513c:	0800522d 	.word	0x0800522d
 8005140:	08005183 	.word	0x08005183
 8005144:	0800522d 	.word	0x0800522d
 8005148:	0800522d 	.word	0x0800522d
 800514c:	0800522d 	.word	0x0800522d
 8005150:	080051db 	.word	0x080051db
 8005154:	08005205 	.word	0x08005205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b03      	cmp	r3, #3
 8005162:	d107      	bne.n	8005174 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005164:	f107 030a 	add.w	r3, r7, #10
 8005168:	2202      	movs	r2, #2
 800516a:	4619      	mov	r1, r3
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f001 fb9f 	bl	80068b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005172:	e063      	b.n	800523c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fb1d 	bl	80067b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800517c:	2303      	movs	r3, #3
 800517e:	75fb      	strb	r3, [r7, #23]
          break;
 8005180:	e05c      	b.n	800523c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	885b      	ldrh	r3, [r3, #2]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b22      	cmp	r3, #34	; 0x22
 800518c:	d108      	bne.n	80051a0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	88db      	ldrh	r3, [r3, #6]
 8005192:	2b3f      	cmp	r3, #63	; 0x3f
 8005194:	bf28      	it	cs
 8005196:	233f      	movcs	r3, #63	; 0x3f
 8005198:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <USBD_HID_Setup+0x208>)
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e015      	b.n	80051cc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	885b      	ldrh	r3, [r3, #2]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b21      	cmp	r3, #33	; 0x21
 80051aa:	d108      	bne.n	80051be <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <USBD_HID_Setup+0x20c>)
 80051ae:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	88db      	ldrh	r3, [r3, #6]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	bf28      	it	cs
 80051b8:	2309      	movcs	r3, #9
 80051ba:	82bb      	strh	r3, [r7, #20]
 80051bc:	e006      	b.n	80051cc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 faf8 	bl	80067b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80051c6:	2303      	movs	r3, #3
 80051c8:	75fb      	strb	r3, [r7, #23]
            break;
 80051ca:	e037      	b.n	800523c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80051cc:	8abb      	ldrh	r3, [r7, #20]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6939      	ldr	r1, [r7, #16]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fb6c 	bl	80068b0 <USBD_CtlSendData>
          break;
 80051d8:	e030      	b.n	800523c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d107      	bne.n	80051f6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3308      	adds	r3, #8
 80051ea:	2201      	movs	r2, #1
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fb5e 	bl	80068b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051f4:	e022      	b.n	800523c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fadc 	bl	80067b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80051fe:	2303      	movs	r3, #3
 8005200:	75fb      	strb	r3, [r7, #23]
          break;
 8005202:	e01b      	b.n	800523c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b03      	cmp	r3, #3
 800520e:	d106      	bne.n	800521e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	885b      	ldrh	r3, [r3, #2]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800521c:	e00e      	b.n	800523c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 fac8 	bl	80067b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005226:	2303      	movs	r3, #3
 8005228:	75fb      	strb	r3, [r7, #23]
          break;
 800522a:	e007      	b.n	800523c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fac1 	bl	80067b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	75fb      	strb	r3, [r7, #23]
          break;
 8005238:	e000      	b.n	800523c <USBD_HID_Setup+0x1ec>
          break;
 800523a:	bf00      	nop
      }
      break;
 800523c:	e006      	b.n	800524c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 fab8 	bl	80067b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005246:	2303      	movs	r3, #3
 8005248:	75fb      	strb	r3, [r7, #23]
      break;
 800524a:	bf00      	nop
  }

  return (uint8_t)ret;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000080 	.word	0x20000080
 800525c:	20000068 	.word	0x20000068

08005260 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	32b0      	adds	r2, #176	; 0xb0
 8005278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	e014      	b.n	80052b2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d10d      	bne.n	80052b0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	7b1b      	ldrb	r3, [r3, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2201      	movs	r2, #1
 80052a0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <USBD_HID_SendReport+0x5c>)
 80052a4:	7819      	ldrb	r1, [r3, #0]
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 ff15 	bl	80070da <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	200000bf 	.word	0x200000bf

080052c0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80052c8:	2181      	movs	r1, #129	; 0x81
 80052ca:	4809      	ldr	r0, [pc, #36]	; (80052f0 <USBD_HID_GetFSCfgDesc+0x30>)
 80052cc:	f000 fc3b 	bl	8005b46 <USBD_GetEpDesc>
 80052d0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	220a      	movs	r2, #10
 80052dc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2222      	movs	r2, #34	; 0x22
 80052e2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80052e4:	4b02      	ldr	r3, [pc, #8]	; (80052f0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000044 	.word	0x20000044

080052f4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80052fc:	2181      	movs	r1, #129	; 0x81
 80052fe:	4809      	ldr	r0, [pc, #36]	; (8005324 <USBD_HID_GetHSCfgDesc+0x30>)
 8005300:	f000 fc21 	bl	8005b46 <USBD_GetEpDesc>
 8005304:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2207      	movs	r2, #7
 8005310:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2222      	movs	r2, #34	; 0x22
 8005316:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005318:	4b02      	ldr	r3, [pc, #8]	; (8005324 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000044 	.word	0x20000044

08005328 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005330:	2181      	movs	r1, #129	; 0x81
 8005332:	4809      	ldr	r0, [pc, #36]	; (8005358 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005334:	f000 fc07 	bl	8005b46 <USBD_GetEpDesc>
 8005338:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	220a      	movs	r2, #10
 8005344:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2222      	movs	r2, #34	; 0x22
 800534a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800534c:	4b02      	ldr	r3, [pc, #8]	; (8005358 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000044 	.word	0x20000044

0800535c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	32b0      	adds	r2, #176	; 0xb0
 8005372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005376:	2200      	movs	r2, #0
 8005378:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	220a      	movs	r2, #10
 8005394:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000074 	.word	0x20000074

080053a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e01f      	b.n	8005400 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	79fa      	ldrb	r2, [r7, #7]
 80053f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f001 fd3b 	bl	8006e70 <USBD_LL_Init>
 80053fa:	4603      	mov	r3, r0
 80053fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800541c:	2303      	movs	r3, #3
 800541e:	e025      	b.n	800546c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32ae      	adds	r2, #174	; 0xae
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32ae      	adds	r2, #174	; 0xae
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	f107 020e 	add.w	r2, r7, #14
 8005450:	4610      	mov	r0, r2
 8005452:	4798      	blx	r3
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fd43 	bl	8006f08 <USBD_LL_Start>
 8005482:	4603      	mov	r3, r0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005494:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	4611      	mov	r1, r2
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
 80054cc:	4603      	mov	r3, r0
 80054ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	4611      	mov	r1, r2
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005500:	2303      	movs	r3, #3
 8005502:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f001 f90e 	bl	8006742 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005534:	461a      	mov	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2b02      	cmp	r3, #2
 8005548:	d01a      	beq.n	8005580 <USBD_LL_SetupStage+0x72>
 800554a:	2b02      	cmp	r3, #2
 800554c:	d822      	bhi.n	8005594 <USBD_LL_SetupStage+0x86>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <USBD_LL_SetupStage+0x4a>
 8005552:	2b01      	cmp	r3, #1
 8005554:	d00a      	beq.n	800556c <USBD_LL_SetupStage+0x5e>
 8005556:	e01d      	b.n	8005594 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb65 	bl	8005c30 <USBD_StdDevReq>
 8005566:	4603      	mov	r3, r0
 8005568:	73fb      	strb	r3, [r7, #15]
      break;
 800556a:	e020      	b.n	80055ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fbcd 	bl	8005d14 <USBD_StdItfReq>
 800557a:	4603      	mov	r3, r0
 800557c:	73fb      	strb	r3, [r7, #15]
      break;
 800557e:	e016      	b.n	80055ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fc2f 	bl	8005dec <USBD_StdEPReq>
 800558e:	4603      	mov	r3, r0
 8005590:	73fb      	strb	r3, [r7, #15]
      break;
 8005592:	e00c      	b.n	80055ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800559a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fd10 	bl	8006fc8 <USBD_LL_StallEP>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	bf00      	nop
  }

  return ret;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	460b      	mov	r3, r1
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80055ca:	7afb      	ldrb	r3, [r7, #11]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d16e      	bne.n	80056ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055de:	2b03      	cmp	r3, #3
 80055e0:	f040 8098 	bne.w	8005714 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d913      	bls.n	8005618 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	1ad2      	subs	r2, r2, r3
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4293      	cmp	r3, r2
 8005608:	bf28      	it	cs
 800560a:	4613      	movcs	r3, r2
 800560c:	461a      	mov	r2, r3
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f001 f979 	bl	8006908 <USBD_CtlContinueRx>
 8005616:	e07d      	b.n	8005714 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2b02      	cmp	r3, #2
 8005624:	d014      	beq.n	8005650 <USBD_LL_DataOutStage+0x98>
 8005626:	2b02      	cmp	r3, #2
 8005628:	d81d      	bhi.n	8005666 <USBD_LL_DataOutStage+0xae>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <USBD_LL_DataOutStage+0x7c>
 800562e:	2b01      	cmp	r3, #1
 8005630:	d003      	beq.n	800563a <USBD_LL_DataOutStage+0x82>
 8005632:	e018      	b.n	8005666 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	75bb      	strb	r3, [r7, #22]
            break;
 8005638:	e018      	b.n	800566c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005640:	b2db      	uxtb	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fa64 	bl	8005b12 <USBD_CoreFindIF>
 800564a:	4603      	mov	r3, r0
 800564c:	75bb      	strb	r3, [r7, #22]
            break;
 800564e:	e00d      	b.n	800566c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fa66 	bl	8005b2c <USBD_CoreFindEP>
 8005660:	4603      	mov	r3, r0
 8005662:	75bb      	strb	r3, [r7, #22]
            break;
 8005664:	e002      	b.n	800566c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	75bb      	strb	r3, [r7, #22]
            break;
 800566a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800566c:	7dbb      	ldrb	r3, [r7, #22]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d119      	bne.n	80056a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b03      	cmp	r3, #3
 800567c:	d113      	bne.n	80056a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800567e:	7dba      	ldrb	r2, [r7, #22]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	32ae      	adds	r2, #174	; 0xae
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800568e:	7dba      	ldrb	r2, [r7, #22]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005696:	7dba      	ldrb	r2, [r7, #22]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	32ae      	adds	r2, #174	; 0xae
 800569c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 f93f 	bl	800692a <USBD_CtlSendStatus>
 80056ac:	e032      	b.n	8005714 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fa37 	bl	8005b2c <USBD_CoreFindEP>
 80056be:	4603      	mov	r3, r0
 80056c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056c2:	7dbb      	ldrb	r3, [r7, #22]
 80056c4:	2bff      	cmp	r3, #255	; 0xff
 80056c6:	d025      	beq.n	8005714 <USBD_LL_DataOutStage+0x15c>
 80056c8:	7dbb      	ldrb	r3, [r7, #22]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d122      	bne.n	8005714 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d117      	bne.n	800570a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80056da:	7dba      	ldrb	r2, [r7, #22]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	32ae      	adds	r2, #174	; 0xae
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00f      	beq.n	800570a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80056ea:	7dba      	ldrb	r2, [r7, #22]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80056f2:	7dba      	ldrb	r2, [r7, #22]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	32ae      	adds	r2, #174	; 0xae
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	7afa      	ldrb	r2, [r7, #11]
 8005700:	4611      	mov	r1, r2
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	e000      	b.n	8005716 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	460b      	mov	r3, r1
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800572c:	7afb      	ldrb	r3, [r7, #11]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d16f      	bne.n	8005812 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3314      	adds	r3, #20
 8005736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800573e:	2b02      	cmp	r3, #2
 8005740:	d15a      	bne.n	80057f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	429a      	cmp	r2, r3
 800574c:	d914      	bls.n	8005778 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	1ad2      	subs	r2, r2, r3
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	461a      	mov	r2, r3
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f001 f8be 	bl	80068e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800576a:	2300      	movs	r3, #0
 800576c:	2200      	movs	r2, #0
 800576e:	2100      	movs	r1, #0
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f001 fcd3 	bl	800711c <USBD_LL_PrepareReceive>
 8005776:	e03f      	b.n	80057f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	d11c      	bne.n	80057be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800578c:	429a      	cmp	r2, r3
 800578e:	d316      	bcc.n	80057be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800579a:	429a      	cmp	r2, r3
 800579c:	d20f      	bcs.n	80057be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800579e:	2200      	movs	r2, #0
 80057a0:	2100      	movs	r1, #0
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f001 f89f 	bl	80068e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b0:	2300      	movs	r3, #0
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f001 fcb0 	bl	800711c <USBD_LL_PrepareReceive>
 80057bc:	e01c      	b.n	80057f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d10f      	bne.n	80057ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f001 fbeb 	bl	8006fc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f001 f8ac 	bl	8006950 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d03a      	beq.n	8005878 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fe42 	bl	800548c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005810:	e032      	b.n	8005878 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005818:	b2db      	uxtb	r3, r3
 800581a:	4619      	mov	r1, r3
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f985 	bl	8005b2c <USBD_CoreFindEP>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2bff      	cmp	r3, #255	; 0xff
 800582a:	d025      	beq.n	8005878 <USBD_LL_DataInStage+0x15a>
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d122      	bne.n	8005878 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d11c      	bne.n	8005878 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800583e:	7dfa      	ldrb	r2, [r7, #23]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	32ae      	adds	r2, #174	; 0xae
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d014      	beq.n	8005878 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800584e:	7dfa      	ldrb	r2, [r7, #23]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005856:	7dfa      	ldrb	r2, [r7, #23]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	32ae      	adds	r2, #174	; 0xae
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	7afa      	ldrb	r2, [r7, #11]
 8005864:	4611      	mov	r1, r2
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	4798      	blx	r3
 800586a:	4603      	mov	r3, r0
 800586c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800586e:	7dbb      	ldrb	r3, [r7, #22]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005874:	7dbb      	ldrb	r3, [r7, #22]
 8005876:	e000      	b.n	800587a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d014      	beq.n	80058e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	4611      	mov	r1, r2
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80058e4:	2303      	movs	r3, #3
 80058e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	2200      	movs	r2, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fb25 	bl	8006f3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	2200      	movs	r2, #0
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fb17 	bl	8006f3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2240      	movs	r2, #64	; 0x40
 800591a:	621a      	str	r2, [r3, #32]

  return ret;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b04      	cmp	r3, #4
 8005958:	d006      	beq.n	8005968 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005960:	b2da      	uxtb	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2204      	movs	r2, #4
 800596c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b04      	cmp	r3, #4
 8005990:	d106      	bne.n	80059a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005998:	b2da      	uxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d110      	bne.n	80059e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	32ae      	adds	r2, #174	; 0xae
 8005a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e01c      	b.n	8005a4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d115      	bne.n	8005a48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	32ae      	adds	r2, #174	; 0xae
 8005a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	32ae      	adds	r2, #174	; 0xae
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	4611      	mov	r1, r2
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	32ae      	adds	r2, #174	; 0xae
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e01c      	b.n	8005aae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d115      	bne.n	8005aac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	32ae      	adds	r2, #174	; 0xae
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	32ae      	adds	r2, #174	; 0xae
 8005a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6852      	ldr	r2, [r2, #4]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	4611      	mov	r1, r2
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	885b      	ldrh	r3, [r3, #2]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d920      	bls.n	8005bb0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005b76:	e013      	b.n	8005ba0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005b78:	f107 030a 	add.w	r3, r7, #10
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6978      	ldr	r0, [r7, #20]
 8005b80:	f000 f81b 	bl	8005bba <USBD_GetNextDesc>
 8005b84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d108      	bne.n	8005ba0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	789b      	ldrb	r3, [r3, #2]
 8005b96:	78fa      	ldrb	r2, [r7, #3]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d008      	beq.n	8005bae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	885b      	ldrh	r3, [r3, #2]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d8e5      	bhi.n	8005b78 <USBD_GetEpDesc+0x32>
 8005bac:	e000      	b.n	8005bb0 <USBD_GetEpDesc+0x6a>
          break;
 8005bae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005bb0:	693b      	ldr	r3, [r7, #16]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	881a      	ldrh	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c12:	8a3b      	ldrh	r3, [r7, #16]
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	b21a      	sxth	r2, r3
 8005c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	b21b      	sxth	r3, r3
 8005c20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c22:	89fb      	ldrh	r3, [r7, #14]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d005      	beq.n	8005c56 <USBD_StdDevReq+0x26>
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d857      	bhi.n	8005cfe <USBD_StdDevReq+0xce>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00f      	beq.n	8005c72 <USBD_StdDevReq+0x42>
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d153      	bne.n	8005cfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	32ae      	adds	r2, #174	; 0xae
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e04a      	b.n	8005d08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d83b      	bhi.n	8005cf2 <USBD_StdDevReq+0xc2>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <USBD_StdDevReq+0x50>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005cf3 	.word	0x08005cf3
 8005c8c:	08005cdf 	.word	0x08005cdf
 8005c90:	08005cf3 	.word	0x08005cf3
 8005c94:	08005cb3 	.word	0x08005cb3
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cf3 	.word	0x08005cf3
 8005ca0:	08005ccb 	.word	0x08005ccb
 8005ca4:	08005cbd 	.word	0x08005cbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa3c 	bl	8006128 <USBD_GetDescriptor>
          break;
 8005cb0:	e024      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fba1 	bl	80063fc <USBD_SetAddress>
          break;
 8005cba:	e01f      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fbe0 	bl	8006484 <USBD_SetConfig>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
          break;
 8005cc8:	e018      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fc83 	bl	80065d8 <USBD_GetConfig>
          break;
 8005cd2:	e013      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fcb4 	bl	8006644 <USBD_GetStatus>
          break;
 8005cdc:	e00e      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fce3 	bl	80066ac <USBD_SetFeature>
          break;
 8005ce6:	e009      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fd07 	bl	80066fe <USBD_ClrFeature>
          break;
 8005cf0:	e004      	b.n	8005cfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fd5e 	bl	80067b6 <USBD_CtlError>
          break;
 8005cfa:	bf00      	nop
      }
      break;
 8005cfc:	e004      	b.n	8005d08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fd58 	bl	80067b6 <USBD_CtlError>
      break;
 8005d06:	bf00      	nop
  }

  return ret;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop

08005d14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d005      	beq.n	8005d3a <USBD_StdItfReq+0x26>
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d852      	bhi.n	8005dd8 <USBD_StdItfReq+0xc4>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <USBD_StdItfReq+0x26>
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d14e      	bne.n	8005dd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d840      	bhi.n	8005dca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	889b      	ldrh	r3, [r3, #4]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d836      	bhi.n	8005dc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	889b      	ldrh	r3, [r3, #4]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fed9 	bl	8005b12 <USBD_CoreFindIF>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	2bff      	cmp	r3, #255	; 0xff
 8005d68:	d01d      	beq.n	8005da6 <USBD_StdItfReq+0x92>
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11a      	bne.n	8005da6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005d70:	7bba      	ldrb	r2, [r7, #14]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	32ae      	adds	r2, #174	; 0xae
 8005d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d80:	7bba      	ldrb	r2, [r7, #14]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d88:	7bba      	ldrb	r2, [r7, #14]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32ae      	adds	r2, #174	; 0xae
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d9e:	e004      	b.n	8005daa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005da0:	2303      	movs	r3, #3
 8005da2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005da4:	e001      	b.n	8005daa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005da6:	2303      	movs	r3, #3
 8005da8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	88db      	ldrh	r3, [r3, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d110      	bne.n	8005dd4 <USBD_StdItfReq+0xc0>
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fdb6 	bl	800692a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005dbe:	e009      	b.n	8005dd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcf7 	bl	80067b6 <USBD_CtlError>
          break;
 8005dc8:	e004      	b.n	8005dd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fcf2 	bl	80067b6 <USBD_CtlError>
          break;
 8005dd2:	e000      	b.n	8005dd6 <USBD_StdItfReq+0xc2>
          break;
 8005dd4:	bf00      	nop
      }
      break;
 8005dd6:	e004      	b.n	8005de2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fceb 	bl	80067b6 <USBD_CtlError>
      break;
 8005de0:	bf00      	nop
  }

  return ret;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	889b      	ldrh	r3, [r3, #4]
 8005dfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d007      	beq.n	8005e1c <USBD_StdEPReq+0x30>
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	f200 817f 	bhi.w	8006110 <USBD_StdEPReq+0x324>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d02a      	beq.n	8005e6c <USBD_StdEPReq+0x80>
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	f040 817a 	bne.w	8006110 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe83 	bl	8005b2c <USBD_CoreFindEP>
 8005e26:	4603      	mov	r3, r0
 8005e28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e2a:	7b7b      	ldrb	r3, [r7, #13]
 8005e2c:	2bff      	cmp	r3, #255	; 0xff
 8005e2e:	f000 8174 	beq.w	800611a <USBD_StdEPReq+0x32e>
 8005e32:	7b7b      	ldrb	r3, [r7, #13]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8170 	bne.w	800611a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e3a:	7b7a      	ldrb	r2, [r7, #13]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e42:	7b7a      	ldrb	r2, [r7, #13]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	32ae      	adds	r2, #174	; 0xae
 8005e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8163 	beq.w	800611a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e54:	7b7a      	ldrb	r2, [r7, #13]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32ae      	adds	r2, #174	; 0xae
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e6a:	e156      	b.n	800611a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d008      	beq.n	8005e86 <USBD_StdEPReq+0x9a>
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	f300 8145 	bgt.w	8006104 <USBD_StdEPReq+0x318>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 809b 	beq.w	8005fb6 <USBD_StdEPReq+0x1ca>
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d03c      	beq.n	8005efe <USBD_StdEPReq+0x112>
 8005e84:	e13e      	b.n	8006104 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d002      	beq.n	8005e98 <USBD_StdEPReq+0xac>
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d016      	beq.n	8005ec4 <USBD_StdEPReq+0xd8>
 8005e96:	e02c      	b.n	8005ef2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <USBD_StdEPReq+0xce>
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b80      	cmp	r3, #128	; 0x80
 8005ea2:	d00a      	beq.n	8005eba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 f88d 	bl	8006fc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 f889 	bl	8006fc8 <USBD_LL_StallEP>
 8005eb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eb8:	e020      	b.n	8005efc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fc7a 	bl	80067b6 <USBD_CtlError>
              break;
 8005ec2:	e01b      	b.n	8005efc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	885b      	ldrh	r3, [r3, #2]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10e      	bne.n	8005eea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <USBD_StdEPReq+0xfe>
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	2b80      	cmp	r3, #128	; 0x80
 8005ed6:	d008      	beq.n	8005eea <USBD_StdEPReq+0xfe>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	88db      	ldrh	r3, [r3, #6]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f86f 	bl	8006fc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fd1d 	bl	800692a <USBD_CtlSendStatus>

              break;
 8005ef0:	e004      	b.n	8005efc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fc5e 	bl	80067b6 <USBD_CtlError>
              break;
 8005efa:	bf00      	nop
          }
          break;
 8005efc:	e107      	b.n	800610e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d002      	beq.n	8005f10 <USBD_StdEPReq+0x124>
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d016      	beq.n	8005f3c <USBD_StdEPReq+0x150>
 8005f0e:	e04b      	b.n	8005fa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00d      	beq.n	8005f32 <USBD_StdEPReq+0x146>
 8005f16:	7bbb      	ldrb	r3, [r7, #14]
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d00a      	beq.n	8005f32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 f851 	bl	8006fc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 f84d 	bl	8006fc8 <USBD_LL_StallEP>
 8005f2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f30:	e040      	b.n	8005fb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fc3e 	bl	80067b6 <USBD_CtlError>
              break;
 8005f3a:	e03b      	b.n	8005fb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	885b      	ldrh	r3, [r3, #2]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d136      	bne.n	8005fb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 f857 	bl	8007006 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fce6 	bl	800692a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fde2 	bl	8005b2c <USBD_CoreFindEP>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f6c:	7b7b      	ldrb	r3, [r7, #13]
 8005f6e:	2bff      	cmp	r3, #255	; 0xff
 8005f70:	d01f      	beq.n	8005fb2 <USBD_StdEPReq+0x1c6>
 8005f72:	7b7b      	ldrb	r3, [r7, #13]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11c      	bne.n	8005fb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005f78:	7b7a      	ldrb	r2, [r7, #13]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f80:	7b7a      	ldrb	r2, [r7, #13]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32ae      	adds	r2, #174	; 0xae
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f90:	7b7a      	ldrb	r2, [r7, #13]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32ae      	adds	r2, #174	; 0xae
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fa6:	e004      	b.n	8005fb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fc03 	bl	80067b6 <USBD_CtlError>
              break;
 8005fb0:	e000      	b.n	8005fb4 <USBD_StdEPReq+0x1c8>
              break;
 8005fb2:	bf00      	nop
          }
          break;
 8005fb4:	e0ab      	b.n	800610e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USBD_StdEPReq+0x1dc>
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d032      	beq.n	800602c <USBD_StdEPReq+0x240>
 8005fc6:	e097      	b.n	80060f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <USBD_StdEPReq+0x1f2>
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	2b80      	cmp	r3, #128	; 0x80
 8005fd2:	d004      	beq.n	8005fde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fbed 	bl	80067b6 <USBD_CtlError>
                break;
 8005fdc:	e091      	b.n	8006102 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da0b      	bge.n	8005ffe <USBD_StdEPReq+0x212>
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	3310      	adds	r3, #16
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	e00b      	b.n	8006016 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2202      	movs	r2, #2
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc43 	bl	80068b0 <USBD_CtlSendData>
              break;
 800602a:	e06a      	b.n	8006102 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800602c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da11      	bge.n	8006058 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	3324      	adds	r3, #36	; 0x24
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d117      	bne.n	800607e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fbb0 	bl	80067b6 <USBD_CtlError>
                  break;
 8006056:	e054      	b.n	8006102 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	f003 020f 	and.w	r2, r3, #15
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fb9d 	bl	80067b6 <USBD_CtlError>
                  break;
 800607c:	e041      	b.n	8006102 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800607e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da0b      	bge.n	800609e <USBD_StdEPReq+0x2b2>
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	3310      	adds	r3, #16
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	e00b      	b.n	80060b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <USBD_StdEPReq+0x2d8>
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d103      	bne.n	80060cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e00e      	b.n	80060ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 ffb7 	bl	8007044 <USBD_LL_IsStallEP>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e002      	b.n	80060ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2202      	movs	r2, #2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbdd 	bl	80068b0 <USBD_CtlSendData>
              break;
 80060f6:	e004      	b.n	8006102 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fb5b 	bl	80067b6 <USBD_CtlError>
              break;
 8006100:	bf00      	nop
          }
          break;
 8006102:	e004      	b.n	800610e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb55 	bl	80067b6 <USBD_CtlError>
          break;
 800610c:	bf00      	nop
      }
      break;
 800610e:	e005      	b.n	800611c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fb4f 	bl	80067b6 <USBD_CtlError>
      break;
 8006118:	e000      	b.n	800611c <USBD_StdEPReq+0x330>
      break;
 800611a:	bf00      	nop
  }

  return ret;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	885b      	ldrh	r3, [r3, #2]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	2b06      	cmp	r3, #6
 800614a:	f200 8128 	bhi.w	800639e <USBD_GetDescriptor+0x276>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <USBD_GetDescriptor+0x2c>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006171 	.word	0x08006171
 8006158:	08006189 	.word	0x08006189
 800615c:	080061c9 	.word	0x080061c9
 8006160:	0800639f 	.word	0x0800639f
 8006164:	0800639f 	.word	0x0800639f
 8006168:	0800633f 	.word	0x0800633f
 800616c:	0800636b 	.word	0x0800636b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
      break;
 8006186:	e112      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7c1b      	ldrb	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10d      	bne.n	80061ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	f107 0208 	add.w	r2, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061aa:	e100      	b.n	80063ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3301      	adds	r3, #1
 80061c2:	2202      	movs	r2, #2
 80061c4:	701a      	strb	r2, [r3, #0]
      break;
 80061c6:	e0f2      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	f200 80ac 	bhi.w	800632c <USBD_GetDescriptor+0x204>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USBD_GetDescriptor+0xb4>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061f5 	.word	0x080061f5
 80061e0:	08006229 	.word	0x08006229
 80061e4:	0800625d 	.word	0x0800625d
 80061e8:	08006291 	.word	0x08006291
 80061ec:	080062c5 	.word	0x080062c5
 80061f0:	080062f9 	.word	0x080062f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	7c12      	ldrb	r2, [r2, #16]
 800620c:	f107 0108 	add.w	r1, r7, #8
 8006210:	4610      	mov	r0, r2
 8006212:	4798      	blx	r3
 8006214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006216:	e091      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 facb 	bl	80067b6 <USBD_CtlError>
            err++;
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	3301      	adds	r3, #1
 8006224:	72fb      	strb	r3, [r7, #11]
          break;
 8006226:	e089      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624a:	e077      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fab1 	bl	80067b6 <USBD_CtlError>
            err++;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	3301      	adds	r3, #1
 8006258:	72fb      	strb	r3, [r7, #11]
          break;
 800625a:	e06f      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7c12      	ldrb	r2, [r2, #16]
 8006274:	f107 0108 	add.w	r1, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800627e:	e05d      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa97 	bl	80067b6 <USBD_CtlError>
            err++;
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	3301      	adds	r3, #1
 800628c:	72fb      	strb	r3, [r7, #11]
          break;
 800628e:	e055      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	7c12      	ldrb	r2, [r2, #16]
 80062a8:	f107 0108 	add.w	r1, r7, #8
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b2:	e043      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa7d 	bl	80067b6 <USBD_CtlError>
            err++;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	3301      	adds	r3, #1
 80062c0:	72fb      	strb	r3, [r7, #11]
          break;
 80062c2:	e03b      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062e6:	e029      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa63 	bl	80067b6 <USBD_CtlError>
            err++;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	3301      	adds	r3, #1
 80062f4:	72fb      	strb	r3, [r7, #11]
          break;
 80062f6:	e021      	b.n	800633c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631a:	e00f      	b.n	800633c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa49 	bl	80067b6 <USBD_CtlError>
            err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
          break;
 800632a:	e007      	b.n	800633c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa41 	bl	80067b6 <USBD_CtlError>
          err++;
 8006334:	7afb      	ldrb	r3, [r7, #11]
 8006336:	3301      	adds	r3, #1
 8006338:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800633a:	bf00      	nop
      }
      break;
 800633c:	e037      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7c1b      	ldrb	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f107 0208 	add.w	r2, r7, #8
 8006352:	4610      	mov	r0, r2
 8006354:	4798      	blx	r3
 8006356:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006358:	e029      	b.n	80063ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa2a 	bl	80067b6 <USBD_CtlError>
        err++;
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	3301      	adds	r3, #1
 8006366:	72fb      	strb	r3, [r7, #11]
      break;
 8006368:	e021      	b.n	80063ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	7c1b      	ldrb	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	4610      	mov	r0, r2
 8006380:	4798      	blx	r3
 8006382:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	2207      	movs	r2, #7
 800638a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800638c:	e00f      	b.n	80063ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa10 	bl	80067b6 <USBD_CtlError>
        err++;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	3301      	adds	r3, #1
 800639a:	72fb      	strb	r3, [r7, #11]
      break;
 800639c:	e007      	b.n	80063ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa08 	bl	80067b6 <USBD_CtlError>
      err++;
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	3301      	adds	r3, #1
 80063aa:	72fb      	strb	r3, [r7, #11]
      break;
 80063ac:	bf00      	nop
  }

  if (err != 0U)
 80063ae:	7afb      	ldrb	r3, [r7, #11]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d11e      	bne.n	80063f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	88db      	ldrh	r3, [r3, #6]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d016      	beq.n	80063ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	88da      	ldrh	r2, [r3, #6]
 80063c6:	893b      	ldrh	r3, [r7, #8]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf28      	it	cs
 80063cc:	4613      	movcs	r3, r2
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063d2:	893b      	ldrh	r3, [r7, #8]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fa69 	bl	80068b0 <USBD_CtlSendData>
 80063de:	e009      	b.n	80063f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9e7 	bl	80067b6 <USBD_CtlError>
 80063e8:	e004      	b.n	80063f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa9d 	bl	800692a <USBD_CtlSendStatus>
 80063f0:	e000      	b.n	80063f4 <USBD_GetDescriptor+0x2cc>
    return;
 80063f2:	bf00      	nop
  }
}
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop

080063fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	889b      	ldrh	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d131      	bne.n	8006472 <USBD_SetAddress+0x76>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	88db      	ldrh	r3, [r3, #6]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d12d      	bne.n	8006472 <USBD_SetAddress+0x76>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	885b      	ldrh	r3, [r3, #2]
 800641a:	2b7f      	cmp	r3, #127	; 0x7f
 800641c:	d829      	bhi.n	8006472 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d104      	bne.n	8006440 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9bc 	bl	80067b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800643e:	e01d      	b.n	800647c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7bfa      	ldrb	r2, [r7, #15]
 8006444:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fe25 	bl	800709c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa69 	bl	800692a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006466:	e009      	b.n	800647c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006470:	e004      	b.n	800647c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f99e 	bl	80067b6 <USBD_CtlError>
  }
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	885b      	ldrh	r3, [r3, #2]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <USBD_SetConfig+0x150>)
 800649a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800649c:	4b4d      	ldr	r3, [pc, #308]	; (80065d4 <USBD_SetConfig+0x150>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d905      	bls.n	80064b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f985 	bl	80067b6 <USBD_CtlError>
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e08c      	b.n	80065ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d002      	beq.n	80064c2 <USBD_SetConfig+0x3e>
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d029      	beq.n	8006514 <USBD_SetConfig+0x90>
 80064c0:	e075      	b.n	80065ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064c2:	4b44      	ldr	r3, [pc, #272]	; (80065d4 <USBD_SetConfig+0x150>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064ca:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <USBD_SetConfig+0x150>)
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064d4:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <USBD_SetConfig+0x150>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fe ffe1 	bl	80054a2 <USBD_SetClassConfig>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f962 	bl	80067b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2202      	movs	r2, #2
 80064f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064fa:	e065      	b.n	80065c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa14 	bl	800692a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2203      	movs	r2, #3
 8006506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800650a:	e05d      	b.n	80065c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa0c 	bl	800692a <USBD_CtlSendStatus>
      break;
 8006512:	e059      	b.n	80065c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006514:	4b2f      	ldr	r3, [pc, #188]	; (80065d4 <USBD_SetConfig+0x150>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d112      	bne.n	8006542 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <USBD_SetConfig+0x150>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <USBD_SetConfig+0x150>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fe ffd0 	bl	80054da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9f5 	bl	800692a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006540:	e042      	b.n	80065c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <USBD_SetConfig+0x150>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d02a      	beq.n	80065a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fe ffbe 	bl	80054da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800655e:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <USBD_SetConfig+0x150>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <USBD_SetConfig+0x150>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fe ff97 	bl	80054a2 <USBD_SetClassConfig>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f918 	bl	80067b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fe ffa3 	bl	80054da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800659c:	e014      	b.n	80065c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9c3 	bl	800692a <USBD_CtlSendStatus>
      break;
 80065a4:	e010      	b.n	80065c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9bf 	bl	800692a <USBD_CtlSendStatus>
      break;
 80065ac:	e00c      	b.n	80065c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f900 	bl	80067b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <USBD_SetConfig+0x150>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fe ff8c 	bl	80054da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065c2:	2303      	movs	r3, #3
 80065c4:	73fb      	strb	r3, [r7, #15]
      break;
 80065c6:	bf00      	nop
  }

  return ret;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000220 	.word	0x20000220

080065d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	88db      	ldrh	r3, [r3, #6]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d004      	beq.n	80065f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f8e2 	bl	80067b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065f2:	e023      	b.n	800663c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	dc02      	bgt.n	8006606 <USBD_GetConfig+0x2e>
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc03      	bgt.n	800660c <USBD_GetConfig+0x34>
 8006604:	e015      	b.n	8006632 <USBD_GetConfig+0x5a>
 8006606:	2b03      	cmp	r3, #3
 8006608:	d00b      	beq.n	8006622 <USBD_GetConfig+0x4a>
 800660a:	e012      	b.n	8006632 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3308      	adds	r3, #8
 8006616:	2201      	movs	r2, #1
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f948 	bl	80068b0 <USBD_CtlSendData>
        break;
 8006620:	e00c      	b.n	800663c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	2201      	movs	r2, #1
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f940 	bl	80068b0 <USBD_CtlSendData>
        break;
 8006630:	e004      	b.n	800663c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f8be 	bl	80067b6 <USBD_CtlError>
        break;
 800663a:	bf00      	nop
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006654:	b2db      	uxtb	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	2b02      	cmp	r3, #2
 800665a:	d81e      	bhi.n	800669a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	88db      	ldrh	r3, [r3, #6]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d004      	beq.n	800666e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f8a5 	bl	80067b6 <USBD_CtlError>
        break;
 800666c:	e01a      	b.n	80066a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f043 0202 	orr.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	330c      	adds	r3, #12
 800668e:	2202      	movs	r2, #2
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f90c 	bl	80068b0 <USBD_CtlSendData>
      break;
 8006698:	e004      	b.n	80066a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f88a 	bl	80067b6 <USBD_CtlError>
      break;
 80066a2:	bf00      	nop
  }
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	885b      	ldrh	r3, [r3, #2]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d107      	bne.n	80066ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f92f 	bl	800692a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80066cc:	e013      	b.n	80066f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	885b      	ldrh	r3, [r3, #2]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d10b      	bne.n	80066ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	889b      	ldrh	r3, [r3, #4]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	b29b      	uxth	r3, r3
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f91f 	bl	800692a <USBD_CtlSendStatus>
}
 80066ec:	e003      	b.n	80066f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f860 	bl	80067b6 <USBD_CtlError>
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670e:	b2db      	uxtb	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	2b02      	cmp	r3, #2
 8006714:	d80b      	bhi.n	800672e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10c      	bne.n	8006738 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8ff 	bl	800692a <USBD_CtlSendStatus>
      }
      break;
 800672c:	e004      	b.n	8006738 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f840 	bl	80067b6 <USBD_CtlError>
      break;
 8006736:	e000      	b.n	800673a <USBD_ClrFeature+0x3c>
      break;
 8006738:	bf00      	nop
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	781a      	ldrb	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f7ff fa41 	bl	8005bf4 <SWAPBYTE>
 8006772:	4603      	mov	r3, r0
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fa34 	bl	8005bf4 <SWAPBYTE>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff fa27 	bl	8005bf4 <SWAPBYTE>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	80da      	strh	r2, [r3, #6]
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fc00 	bl	8006fc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067c8:	2100      	movs	r1, #0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fbfc 	bl	8006fc8 <USBD_LL_StallEP>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d042      	beq.n	8006874 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80067f2:	6938      	ldr	r0, [r7, #16]
 80067f4:	f000 f842 	bl	800687c <USBD_GetLen>
 80067f8:	4603      	mov	r3, r0
 80067fa:	3301      	adds	r3, #1
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006802:	d808      	bhi.n	8006816 <USBD_GetString+0x3e>
 8006804:	6938      	ldr	r0, [r7, #16]
 8006806:	f000 f839 	bl	800687c <USBD_GetLen>
 800680a:	4603      	mov	r3, r0
 800680c:	3301      	adds	r3, #1
 800680e:	b29b      	uxth	r3, r3
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	e001      	b.n	800681a <USBD_GetString+0x42>
 8006816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4413      	add	r3, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7812      	ldrb	r2, [r2, #0]
 8006828:	701a      	strb	r2, [r3, #0]
  idx++;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	3301      	adds	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	4413      	add	r3, r2
 8006836:	2203      	movs	r2, #3
 8006838:	701a      	strb	r2, [r3, #0]
  idx++;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	3301      	adds	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006840:	e013      	b.n	800686a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4413      	add	r3, r2
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3301      	adds	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
    idx++;
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	3301      	adds	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4413      	add	r3, r2
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
    idx++;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	3301      	adds	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e7      	bne.n	8006842 <USBD_GetString+0x6a>
 8006872:	e000      	b.n	8006876 <USBD_GetString+0x9e>
    return;
 8006874:	bf00      	nop
  }
}
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800688c:	e005      	b.n	800689a <USBD_GetLen+0x1e>
  {
    len++;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	3301      	adds	r3, #1
 8006892:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	3301      	adds	r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f5      	bne.n	800688e <USBD_GetLen+0x12>
  }

  return len;
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2202      	movs	r2, #2
 80068c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	2100      	movs	r1, #0
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fbff 	bl	80070da <USBD_LL_Transmit>

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	2100      	movs	r1, #0
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fbee 	bl	80070da <USBD_LL_Transmit>

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	2100      	movs	r1, #0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fbfe 	bl	800711c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2204      	movs	r2, #4
 8006936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800693a:	2300      	movs	r3, #0
 800693c:	2200      	movs	r2, #0
 800693e:	2100      	movs	r1, #0
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fbca 	bl	80070da <USBD_LL_Transmit>

  return USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2205      	movs	r2, #5
 800695c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006960:	2300      	movs	r3, #0
 8006962:	2200      	movs	r2, #0
 8006964:	2100      	movs	r1, #0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fbd8 	bl	800711c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800697c:	2200      	movs	r2, #0
 800697e:	490e      	ldr	r1, [pc, #56]	; (80069b8 <MX_USB_DEVICE_Init+0x40>)
 8006980:	480e      	ldr	r0, [pc, #56]	; (80069bc <MX_USB_DEVICE_Init+0x44>)
 8006982:	f7fe fd11 	bl	80053a8 <USBD_Init>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800698c:	f7fa f822 	bl	80009d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006990:	490b      	ldr	r1, [pc, #44]	; (80069c0 <MX_USB_DEVICE_Init+0x48>)
 8006992:	480a      	ldr	r0, [pc, #40]	; (80069bc <MX_USB_DEVICE_Init+0x44>)
 8006994:	f7fe fd38 	bl	8005408 <USBD_RegisterClass>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800699e:	f7fa f819 	bl	80009d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069a2:	4806      	ldr	r0, [pc, #24]	; (80069bc <MX_USB_DEVICE_Init+0x44>)
 80069a4:	f7fe fd66 	bl	8005474 <USBD_Start>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80069ae:	f7fa f811 	bl	80009d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069b2:	bf00      	nop
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200000c0 	.word	0x200000c0
 80069bc:	20000224 	.word	0x20000224
 80069c0:	2000000c 	.word	0x2000000c

080069c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	6039      	str	r1, [r7, #0]
 80069ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2212      	movs	r2, #18
 80069d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80069d6:	4b03      	ldr	r3, [pc, #12]	; (80069e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	200000dc 	.word	0x200000dc

080069e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2204      	movs	r2, #4
 80069f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80069fa:	4b03      	ldr	r3, [pc, #12]	; (8006a08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	200000f0 	.word	0x200000f0

08006a0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	6039      	str	r1, [r7, #0]
 8006a16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	4907      	ldr	r1, [pc, #28]	; (8006a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a22:	4808      	ldr	r0, [pc, #32]	; (8006a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a24:	f7ff fed8 	bl	80067d8 <USBD_GetString>
 8006a28:	e004      	b.n	8006a34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4904      	ldr	r1, [pc, #16]	; (8006a40 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a2e:	4805      	ldr	r0, [pc, #20]	; (8006a44 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a30:	f7ff fed2 	bl	80067d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a34:	4b02      	ldr	r3, [pc, #8]	; (8006a40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000500 	.word	0x20000500
 8006a44:	08007258 	.word	0x08007258

08006a48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	4904      	ldr	r1, [pc, #16]	; (8006a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a58:	4804      	ldr	r0, [pc, #16]	; (8006a6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a5a:	f7ff febd 	bl	80067d8 <USBD_GetString>
  return USBD_StrDesc;
 8006a5e:	4b02      	ldr	r3, [pc, #8]	; (8006a68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000500 	.word	0x20000500
 8006a6c:	08007270 	.word	0x08007270

08006a70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	6039      	str	r1, [r7, #0]
 8006a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	221a      	movs	r2, #26
 8006a80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a82:	f000 f843 	bl	8006b0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a86:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200000f4 	.word	0x200000f4

08006a94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	6039      	str	r1, [r7, #0]
 8006a9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4907      	ldr	r1, [pc, #28]	; (8006ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aaa:	4808      	ldr	r0, [pc, #32]	; (8006acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006aac:	f7ff fe94 	bl	80067d8 <USBD_GetString>
 8006ab0:	e004      	b.n	8006abc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4904      	ldr	r1, [pc, #16]	; (8006ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ab6:	4805      	ldr	r0, [pc, #20]	; (8006acc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ab8:	f7ff fe8e 	bl	80067d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000500 	.word	0x20000500
 8006acc:	08007284 	.word	0x08007284

08006ad0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d105      	bne.n	8006aee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4907      	ldr	r1, [pc, #28]	; (8006b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ae6:	4808      	ldr	r0, [pc, #32]	; (8006b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ae8:	f7ff fe76 	bl	80067d8 <USBD_GetString>
 8006aec:	e004      	b.n	8006af8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4904      	ldr	r1, [pc, #16]	; (8006b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006af2:	4805      	ldr	r0, [pc, #20]	; (8006b08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006af4:	f7ff fe70 	bl	80067d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006af8:	4b02      	ldr	r3, [pc, #8]	; (8006b04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000500 	.word	0x20000500
 8006b08:	08007290 	.word	0x08007290

08006b0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <Get_SerialNum+0x44>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <Get_SerialNum+0x48>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <Get_SerialNum+0x4c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b32:	2208      	movs	r2, #8
 8006b34:	4909      	ldr	r1, [pc, #36]	; (8006b5c <Get_SerialNum+0x50>)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f814 	bl	8006b64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	4908      	ldr	r1, [pc, #32]	; (8006b60 <Get_SerialNum+0x54>)
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f000 f80f 	bl	8006b64 <IntToUnicode>
  }
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	1fff7a10 	.word	0x1fff7a10
 8006b54:	1fff7a14 	.word	0x1fff7a14
 8006b58:	1fff7a18 	.word	0x1fff7a18
 8006b5c:	200000f6 	.word	0x200000f6
 8006b60:	20000106 	.word	0x20000106

08006b64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
 8006b7a:	e027      	b.n	8006bcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	0f1b      	lsrs	r3, r3, #28
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d80b      	bhi.n	8006b9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	0f1b      	lsrs	r3, r3, #28
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	440b      	add	r3, r1
 8006b94:	3230      	adds	r2, #48	; 0x30
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	e00a      	b.n	8006bb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	0f1b      	lsrs	r3, r3, #28
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	440b      	add	r3, r1
 8006bac:	3237      	adds	r2, #55	; 0x37
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	75fb      	strb	r3, [r7, #23]
 8006bcc:	7dfa      	ldrb	r2, [r7, #23]
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3d3      	bcc.n	8006b7c <IntToUnicode+0x18>
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c04:	d13a      	bne.n	8006c7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	6313      	str	r3, [r2, #48]	; 0x30
 8006c16:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c30:	2303      	movs	r3, #3
 8006c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c34:	230a      	movs	r3, #10
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c38:	f107 0314 	add.w	r3, r7, #20
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4812      	ldr	r0, [pc, #72]	; (8006c88 <HAL_PCD_MspInit+0xa4>)
 8006c40:	f7fa f980 	bl	8000f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c44:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c48:	4a0e      	ldr	r2, [pc, #56]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4e:	6353      	str	r3, [r2, #52]	; 0x34
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_PCD_MspInit+0xa0>)
 8006c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2100      	movs	r1, #0
 8006c70:	2043      	movs	r0, #67	; 0x43
 8006c72:	f7fa f930 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c76:	2043      	movs	r0, #67	; 0x43
 8006c78:	f7fa f949 	bl	8000f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	3728      	adds	r7, #40	; 0x28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40023800 	.word	0x40023800
 8006c88:	40020000 	.word	0x40020000

08006c8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe fc33 	bl	800550e <USBD_LL_SetupStage>
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	00db      	lsls	r3, r3, #3
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f7fe fc6d 	bl	80055b8 <USBD_LL_DataOutStage>
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4413      	add	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	3320      	adds	r3, #32
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	f7fe fd06 	bl	800571e <USBD_LL_DataInStage>
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fe40 	bl	80059ae <USBD_LL_SOF>
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	79db      	ldrb	r3, [r3, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e008      	b.n	8006d62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	79db      	ldrb	r3, [r3, #7]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d102      	bne.n	8006d5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	e001      	b.n	8006d62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006d5e:	f7f9 fe39 	bl	80009d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006d68:	7bfa      	ldrb	r2, [r7, #15]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fdda 	bl	8005926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fd82 	bl	8005882 <USBD_LL_Reset>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fdd5 	bl	8005946 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7adb      	ldrb	r3, [r3, #11]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <HAL_PCD_SuspendCallback+0x48>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <HAL_PCD_SuspendCallback+0x48>)
 8006dc2:	f043 0306 	orr.w	r3, r3, #6
 8006dc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	e000ed00 	.word	0xe000ed00

08006dd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fdcb 	bl	800597e <USBD_LL_Resume>
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	4611      	mov	r1, r2
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fe23 	bl	8005a52 <USBD_LL_IsoOUTIncomplete>
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fddf 	bl	80059ee <USBD_LL_IsoINIncomplete>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fe35 	bl	8005ab6 <USBD_LL_DevConnected>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fe32 	bl	8005acc <USBD_LL_DevDisconnected>
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d13c      	bne.n	8006efa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e80:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <USBD_LL_Init+0x94>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <USBD_LL_Init+0x94>)
 8006e8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e90:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <USBD_LL_Init+0x94>)
 8006e92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006e96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <USBD_LL_Init+0x94>)
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e9e:	4b19      	ldr	r3, [pc, #100]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006eaa:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <USBD_LL_Init+0x94>)
 8006eac:	2202      	movs	r2, #2
 8006eae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <USBD_LL_Init+0x94>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <USBD_LL_Init+0x94>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <USBD_LL_Init+0x94>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ece:	480d      	ldr	r0, [pc, #52]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ed0:	f7fa fb32 	bl	8001538 <HAL_PCD_Init>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006eda:	f7f9 fd7b 	bl	80009d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ede:	2180      	movs	r1, #128	; 0x80
 8006ee0:	4808      	ldr	r0, [pc, #32]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ee2:	f7fb fd46 	bl	8002972 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ee6:	2240      	movs	r2, #64	; 0x40
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4806      	ldr	r0, [pc, #24]	; (8006f04 <USBD_LL_Init+0x94>)
 8006eec:	f7fb fcfa 	bl	80028e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ef0:	2280      	movs	r2, #128	; 0x80
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	4803      	ldr	r0, [pc, #12]	; (8006f04 <USBD_LL_Init+0x94>)
 8006ef6:	f7fb fcf5 	bl	80028e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000700 	.word	0x20000700

08006f08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fa fc19 	bl	8001756 <HAL_PCD_Start>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 f930 	bl	8007190 <USBD_Get_USB_Status>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	4608      	mov	r0, r1
 8006f48:	4611      	mov	r1, r2
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	70fb      	strb	r3, [r7, #3]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70bb      	strb	r3, [r7, #2]
 8006f54:	4613      	mov	r3, r2
 8006f56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f66:	78bb      	ldrb	r3, [r7, #2]
 8006f68:	883a      	ldrh	r2, [r7, #0]
 8006f6a:	78f9      	ldrb	r1, [r7, #3]
 8006f6c:	f7fb f8ed 	bl	800214a <HAL_PCD_EP_Open>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f90a 	bl	8007190 <USBD_Get_USB_Status>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fb f938 	bl	800221e <HAL_PCD_EP_Close>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f8eb 	bl	8007190 <USBD_Get_USB_Status>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fe2:	78fa      	ldrb	r2, [r7, #3]
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fb f9d8 	bl	800239c <HAL_PCD_EP_SetStall>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f8cc 	bl	8007190 <USBD_Get_USB_Status>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f7fb fa1c 	bl	8002462 <HAL_PCD_EP_ClrStall>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f8ad 	bl	8007190 <USBD_Get_USB_Status>
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800703a:	7bbb      	ldrb	r3, [r7, #14]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007056:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da0b      	bge.n	8007078 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	3316      	adds	r3, #22
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	e00b      	b.n	8007090 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800708e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fb f821 	bl	8002102 <HAL_PCD_SetAddress>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f862 	bl	8007190 <USBD_Get_USB_Status>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	460b      	mov	r3, r1
 80070e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80070f8:	7af9      	ldrb	r1, [r7, #11]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	f7fb f913 	bl	8002328 <HAL_PCD_EP_Transmit>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007106:	7dfb      	ldrb	r3, [r7, #23]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f841 	bl	8007190 <USBD_Get_USB_Status>
 800710e:	4603      	mov	r3, r0
 8007110:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007112:	7dbb      	ldrb	r3, [r7, #22]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	460b      	mov	r3, r1
 800712a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800713a:	7af9      	ldrb	r1, [r7, #11]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	f7fb f8b7 	bl	80022b2 <HAL_PCD_EP_Receive>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f820 	bl	8007190 <USBD_Get_USB_Status>
 8007150:	4603      	mov	r3, r0
 8007152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007154:	7dbb      	ldrb	r3, [r7, #22]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007168:	4b03      	ldr	r3, [pc, #12]	; (8007178 <USBD_static_malloc+0x18>)
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000be4 	.word	0x20000be4

0800717c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d817      	bhi.n	80071d4 <USBD_Get_USB_Status+0x44>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_Get_USB_Status+0x1c>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071c3 	.word	0x080071c3
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071cf 	.word	0x080071cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
    break;
 80071c0:	e00b      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	73fb      	strb	r3, [r7, #15]
    break;
 80071c6:	e008      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
    break;
 80071cc:	e005      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
    break;
 80071d2:	e002      	b.n	80071da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071d4:	2303      	movs	r3, #3
 80071d6:	73fb      	strb	r3, [r7, #15]
    break;
 80071d8:	bf00      	nop
  }
  return usb_status;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <memset>:
 80071e8:	4402      	add	r2, r0
 80071ea:	4603      	mov	r3, r0
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d100      	bne.n	80071f2 <memset+0xa>
 80071f0:	4770      	bx	lr
 80071f2:	f803 1b01 	strb.w	r1, [r3], #1
 80071f6:	e7f9      	b.n	80071ec <memset+0x4>

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4d0d      	ldr	r5, [pc, #52]	; (8007230 <__libc_init_array+0x38>)
 80071fc:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 80071fe:	1b64      	subs	r4, r4, r5
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2600      	movs	r6, #0
 8007204:	42a6      	cmp	r6, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	4d0b      	ldr	r5, [pc, #44]	; (8007238 <__libc_init_array+0x40>)
 800720a:	4c0c      	ldr	r4, [pc, #48]	; (800723c <__libc_init_array+0x44>)
 800720c:	f000 f818 	bl	8007240 <_init>
 8007210:	1b64      	subs	r4, r4, r5
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	2600      	movs	r6, #0
 8007216:	42a6      	cmp	r6, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007220:	4798      	blx	r3
 8007222:	3601      	adds	r6, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f855 3b04 	ldr.w	r3, [r5], #4
 800722a:	4798      	blx	r3
 800722c:	3601      	adds	r6, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	080072c0 	.word	0x080072c0
 8007234:	080072c0 	.word	0x080072c0
 8007238:	080072c0 	.word	0x080072c0
 800723c:	080072c4 	.word	0x080072c4

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
