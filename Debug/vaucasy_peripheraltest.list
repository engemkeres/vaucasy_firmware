
vaucasy_peripheraltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007300  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007518  08007518  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007520  08007520  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007520  08007520  00017520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08007528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000110  08007638  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000bf8  08007638  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013312  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000327b  00000000  00000000  00033495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4e  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018aae  00000000  00000000  0003836e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001689d  00000000  00000000  00050e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b421  00000000  00000000  000676b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004248  00000000  00000000  000f2adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f6d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800747c 	.word	0x0800747c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	0800747c 	.word	0x0800747c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b60      	ldr	r3, [pc, #384]	; (800066c <MX_GPIO_Init+0x19c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a5f      	ldr	r2, [pc, #380]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b5d      	ldr	r3, [pc, #372]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b59      	ldr	r3, [pc, #356]	; (800066c <MX_GPIO_Init+0x19c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a58      	ldr	r2, [pc, #352]	; (800066c <MX_GPIO_Init+0x19c>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <MX_GPIO_Init+0x19c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b52      	ldr	r3, [pc, #328]	; (800066c <MX_GPIO_Init+0x19c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a51      	ldr	r2, [pc, #324]	; (800066c <MX_GPIO_Init+0x19c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b4f      	ldr	r3, [pc, #316]	; (800066c <MX_GPIO_Init+0x19c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b4b      	ldr	r3, [pc, #300]	; (800066c <MX_GPIO_Init+0x19c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a4a      	ldr	r2, [pc, #296]	; (800066c <MX_GPIO_Init+0x19c>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <MX_GPIO_Init+0x19c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4b44      	ldr	r3, [pc, #272]	; (800066c <MX_GPIO_Init+0x19c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a43      	ldr	r2, [pc, #268]	; (800066c <MX_GPIO_Init+0x19c>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <MX_GPIO_Init+0x19c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL6_Pin|COL5_Pin|COL4_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	21e0      	movs	r1, #224	; 0xe0
 8000576:	483e      	ldr	r0, [pc, #248]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000578:	f000 ff8e 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	211c      	movs	r1, #28
 8000580:	483c      	ldr	r0, [pc, #240]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000582:	f000 ff89 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	483a      	ldr	r0, [pc, #232]	; (8000678 <MX_GPIO_Init+0x1a8>)
 800058e:	f000 ff83 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW4_Pin;
 8000592:	2304      	movs	r3, #4
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW4_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4834      	ldr	r0, [pc, #208]	; (8000678 <MX_GPIO_Init+0x1a8>)
 80005a6:	f000 fddb 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW3_Pin;
 80005aa:	2310      	movs	r3, #16
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW3_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	482c      	ldr	r0, [pc, #176]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005be:	f000 fdcf 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL6_Pin|COL5_Pin|COL4_Pin;
 80005c2:	23e0      	movs	r3, #224	; 0xe0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4825      	ldr	r0, [pc, #148]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005da:	f000 fdc1 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL2_Pin|COL3_Pin;
 80005de:	231c      	movs	r3, #28
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005f6:	f000 fdb3 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW2_Pin;
 80005fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000610:	f000 fda6 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000614:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0x1a4>)
 800062a:	f000 fd99 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL1_Pin;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL1_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x1a8>)
 8000648:	f000 fd8a 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 800064c:	2304      	movs	r3, #4
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <MX_GPIO_Init+0x1ac>)
 8000660:	f000 fd7e 	bl	8001160 <HAL_GPIO_Init>

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00

08000680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f000 ff05 	bl	80014cc <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa92 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000012c 	.word	0x2000012c
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C3_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C3_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C3_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C3_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C3_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C3_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C3_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C3_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C3_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C3_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C3_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C3_Init+0x50>)
 800071a:	f000 fed7 	bl	80014cc <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fa64 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000180 	.word	0x20000180
 8000730:	40005c00 	.word	0x40005c00
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a42      	ldr	r2, [pc, #264]	; (8000860 <HAL_I2C_MspInit+0x128>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12c      	bne.n	80007b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	2312      	movs	r3, #18
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	2304      	movs	r3, #4
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4835      	ldr	r0, [pc, #212]	; (8000868 <HAL_I2C_MspInit+0x130>)
 8000792:	f000 fce5 	bl	8001160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007b2:	e050      	b.n	8000856 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2c      	ldr	r2, [pc, #176]	; (800086c <HAL_I2C_MspInit+0x134>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d14b      	bne.n	8000856 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fc:	2312      	movs	r3, #18
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000808:	2304      	movs	r3, #4
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <HAL_I2C_MspInit+0x138>)
 8000814:	f000 fca4 	bl	8001160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081e:	2312      	movs	r3, #18
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800082a:	2304      	movs	r3, #4
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_I2C_MspInit+0x13c>)
 8000836:	f000 fc93 	bl	8001160 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40005c00 	.word	0x40005c00
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b099      	sub	sp, #100	; 0x64
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	colrow COL[2] = {
 800087e:	4ba3      	ldr	r3, [pc, #652]	; (8000b0c <main+0x294>)
 8000880:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{COL6_GPIO_Port, COL6_Pin},
			{COL5_GPIO_Port, COL5_Pin}
	};

	colrow ROW[2] = {
 800088a:	4ba1      	ldr	r3, [pc, #644]	; (8000b10 <main+0x298>)
 800088c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ROW0_GPIO_Port, ROW0_Pin},
			{ROW1_GPIO_Port, ROW1_Pin}
	};

	uint8_t keyMap[2][2] = {
 8000896:	4b9f      	ldr	r3, [pc, #636]	; (8000b14 <main+0x29c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fab8 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f93c 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f7ff fe14 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008a8:	f7ff feea 	bl	8000680 <MX_I2C1_Init>
  MX_I2C3_Init();
 80008ac:	f7ff ff16 	bl	80006dc <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 80008b0:	f006 f970 	bl	8006b94 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80008b4:	f000 fa10 	bl	8000cd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  extern USBD_HandleTypeDef hUsbDeviceFS;
  uint8_t keyState[ROWS][COLS] = {0};  // Keeps track of the current state of each key
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t HID_buffer[8] = {0};         // USB HID report buffer
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  uint8_t previousHIDBuffer[8] = {0};  // To detect changes
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  uint32_t keyTimers[ROWS][COLS] = {0}; // Key debounce and repeat timers
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  const uint32_t debounceDelay = 5;    // Debounce delay in ms
 80008d8:	2305      	movs	r3, #5
 80008da:	65bb      	str	r3, [r7, #88]	; 0x58
  const uint32_t repeatDelay = 50;     // Repeat delay for held keys in ms
 80008dc:	2332      	movs	r3, #50	; 0x32
 80008de:	657b      	str	r3, [r7, #84]	; 0x54


	  //--------------------- version 5 -----------------------


	  uint8_t keyIndex = 2; // Start filling keycodes from HID_buffer[2]
 80008e0:	2302      	movs	r3, #2
 80008e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  memset(HID_buffer + 2, 0, 6); // Clear keycode slots
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	3302      	adds	r3, #2
 80008ec:	2206      	movs	r2, #6
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fd97 	bl	8007424 <memset>

	  for (uint8_t i = 0; i < COLS; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80008fc:	e0e0      	b.n	8000ac0 <main+0x248>
		  // Activate only the current column
		  for (uint8_t c = 0; c < COLS; c++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000904:	e01e      	b.n	8000944 <main+0xcc>
			  HAL_GPIO_WritePin(COL[c].GPIO_PORT, COL[c].GPIO_PIN, (c == i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000906:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	3360      	adds	r3, #96	; 0x60
 800090e:	443b      	add	r3, r7
 8000910:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8000914:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	3360      	adds	r3, #96	; 0x60
 800091c:	443b      	add	r3, r7
 800091e:	f833 1c20 	ldrh.w	r1, [r3, #-32]
 8000922:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8000926:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800092a:	429a      	cmp	r2, r3
 800092c:	bf0c      	ite	eq
 800092e:	2301      	moveq	r3, #1
 8000930:	2300      	movne	r3, #0
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	f000 fdaf 	bl	8001498 <HAL_GPIO_WritePin>
		  for (uint8_t c = 0; c < COLS; c++) {
 800093a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800093e:	3301      	adds	r3, #1
 8000940:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000944:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000948:	2b01      	cmp	r3, #1
 800094a:	d9dc      	bls.n	8000906 <main+0x8e>
		  }

		  HAL_Delay(1); // Allow signal to stabilize
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fad1 	bl	8000ef4 <HAL_Delay>

		  // Check rows for pressed keys
		  for (uint8_t j = 0; j < ROWS; j++) {
 8000952:	2300      	movs	r3, #0
 8000954:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000958:	e0a5      	b.n	8000aa6 <main+0x22e>
			  uint8_t isPressed = HAL_GPIO_ReadPin(ROW[j].GPIO_PORT, ROW[j].GPIO_PIN) == GPIO_PIN_SET;
 800095a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	3360      	adds	r3, #96	; 0x60
 8000962:	443b      	add	r3, r7
 8000964:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8000968:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	3360      	adds	r3, #96	; 0x60
 8000970:	443b      	add	r3, r7
 8000972:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f000 fd75 	bl	8001468 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  uint32_t currentTime = HAL_GetTick();
 800098e:	f000 faa5 	bl	8000edc <HAL_GetTick>
 8000992:	64f8      	str	r0, [r7, #76]	; 0x4c

			  // Handle key press
			  if (isPressed) {
 8000994:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000998:	2b00      	cmp	r3, #0
 800099a:	d04c      	beq.n	8000a36 <main+0x1be>
				  if (keyState[j][i] == 0 && (currentTime - keyTimers[j][i] >= debounceDelay)) {
 800099c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80009a0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	3260      	adds	r2, #96	; 0x60
 80009a8:	443a      	add	r2, r7
 80009aa:	4413      	add	r3, r2
 80009ac:	3b3c      	subs	r3, #60	; 0x3c
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d173      	bne.n	8000a9c <main+0x224>
 80009b4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80009b8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	3360      	adds	r3, #96	; 0x60
 80009c4:	443b      	add	r3, r7
 80009c6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80009ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d863      	bhi.n	8000a9c <main+0x224>
					  // First valid press or repeat
					  if (keyIndex < 8) {
 80009d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d814      	bhi.n	8000a06 <main+0x18e>
						  HID_buffer[keyIndex++] = keyMap[j][i]; // Add keycode to HID buffer
 80009dc:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
 80009e0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80009e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80009e8:	1c58      	adds	r0, r3, #1
 80009ea:	f887 005f 	strb.w	r0, [r7, #95]	; 0x5f
 80009ee:	4618      	mov	r0, r3
 80009f0:	004b      	lsls	r3, r1, #1
 80009f2:	3360      	adds	r3, #96	; 0x60
 80009f4:	443b      	add	r3, r7
 80009f6:	4413      	add	r3, r2
 80009f8:	3b38      	subs	r3, #56	; 0x38
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8000a00:	443b      	add	r3, r7
 8000a02:	f803 2c44 	strb.w	r2, [r3, #-68]
					  }
					  keyTimers[j][i] = currentTime; // Reset timer
 8000a06:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a0a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a0e:	0052      	lsls	r2, r2, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	3360      	adds	r3, #96	; 0x60
 8000a16:	443b      	add	r3, r7
 8000a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a1a:	f843 2c5c 	str.w	r2, [r3, #-92]
					  keyState[j][i] = 1; // Mark as pressed
 8000a1e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a22:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	3260      	adds	r2, #96	; 0x60
 8000a2a:	443a      	add	r2, r7
 8000a2c:	4413      	add	r3, r2
 8000a2e:	3b3c      	subs	r3, #60	; 0x3c
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e032      	b.n	8000a9c <main+0x224>
				  }
			  } else {
				  // Handle key release
				  if (keyState[j][i] == 1 && (currentTime - keyTimers[j][i] >= debounceDelay)) {
 8000a36:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a3a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	3260      	adds	r2, #96	; 0x60
 8000a42:	443a      	add	r2, r7
 8000a44:	4413      	add	r3, r2
 8000a46:	3b3c      	subs	r3, #60	; 0x3c
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d126      	bne.n	8000a9c <main+0x224>
 8000a4e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a52:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a56:	0052      	lsls	r2, r2, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	3360      	adds	r3, #96	; 0x60
 8000a5e:	443b      	add	r3, r7
 8000a60:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8000a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d816      	bhi.n	8000a9c <main+0x224>
					  keyState[j][i] = 0; // Mark as released
 8000a6e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a72:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a76:	0052      	lsls	r2, r2, #1
 8000a78:	3260      	adds	r2, #96	; 0x60
 8000a7a:	443a      	add	r2, r7
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3b3c      	subs	r3, #60	; 0x3c
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
					  keyTimers[j][i] = currentTime; // Reset timer
 8000a84:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8000a88:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000a8c:	0052      	lsls	r2, r2, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	3360      	adds	r3, #96	; 0x60
 8000a94:	443b      	add	r3, r7
 8000a96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a98:	f843 2c5c 	str.w	r2, [r3, #-92]
		  for (uint8_t j = 0; j < ROWS; j++) {
 8000a9c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000aa6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	f67f af55 	bls.w	800095a <main+0xe2>
				  }
			  }
		  }

		  HAL_Delay(5); // Small delay before switching columns
 8000ab0:	2005      	movs	r0, #5
 8000ab2:	f000 fa1f 	bl	8000ef4 <HAL_Delay>
	  for (uint8_t i = 0; i < COLS; i++) {
 8000ab6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000aba:	3301      	adds	r3, #1
 8000abc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8000ac0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	f67f af1a 	bls.w	80008fe <main+0x86>
	  }

	  // Send HID report if there's a change or for held keys
	  if (memcmp(HID_buffer, previousHIDBuffer, 8) != 0 || keyIndex > 2) {
 8000aca:	f107 0114 	add.w	r1, r7, #20
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f006 fc95 	bl	8007404 <memcmp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d104      	bne.n	8000aea <main+0x272>
 8000ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	f67f aefb 	bls.w	80008e0 <main+0x68>
		  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2208      	movs	r2, #8
 8000af0:	4619      	mov	r1, r3
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <main+0x2a0>)
 8000af4:	f004 fcc2 	bl	800547c <USBD_HID_SendReport>
		  memcpy(previousHIDBuffer, HID_buffer, 8); // Update previous buffer
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	f107 021c 	add.w	r2, r7, #28
 8000b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b04:	e883 0003 	stmia.w	r3, {r0, r1}
  {
 8000b08:	e6ea      	b.n	80008e0 <main+0x68>
 8000b0a:	bf00      	nop
 8000b0c:	08007494 	.word	0x08007494
 8000b10:	080074a4 	.word	0x080074a4
 8000b14:	080074b4 	.word	0x080074b4
 8000b18:	20000224 	.word	0x20000224

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f006 fc7a 	bl	8007424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <SystemClock_Config+0xcc>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <SystemClock_Config+0xd0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <SystemClock_Config+0xd0>)
 8000b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b94:	23a8      	movs	r3, #168	; 0xa8
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 f80f 	bl	8002bc8 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bb0:	f000 f81e 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 fa71 	bl	80030b8 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bdc:	f000 f808 	bl	8000bf0 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	; 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f90c 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <OTG_FS_IRQHandler+0x10>)
 8000ca6:	f000 fe99 	bl	80019dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000700 	.word	0x20000700

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_USART1_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART1_UART_Init+0x4c>)
 8000d10:	f002 fbf2 	bl	80034f8 <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f7ff ff69 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001d4 	.word	0x200001d4
 8000d28:	40011000 	.word	0x40011000

08000d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x8c>)
 8000da4:	f000 f9dc 	bl	8001160 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc0:	f7ff ff78 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f006 fb23 	bl	8007434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fd43 	bl	8000878 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000e00:	08007528 	.word	0x08007528
  ldr r2, =_sbss
 8000e04:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000e08:	20000bf8 	.word	0x20000bf8

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff feda 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000021c 	.word	0x2000021c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000021c 	.word	0x2000021c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e159      	b.n	8001430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8148 	bne.w	800142a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d005      	beq.n	80011b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d130      	bne.n	8001214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d017      	beq.n	8001250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a2 	beq.w	800142a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b57      	ldr	r3, [pc, #348]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x2e8>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a49      	ldr	r2, [pc, #292]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x202>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x1fe>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_GPIO_Init+0x2f8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x1fa>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_GPIO_Init+0x2fc>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x1f6>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_GPIO_Init+0x300>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x1f2>
 800134e:	2304      	movs	r3, #4
 8001350:	e008      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001352:	2307      	movs	r3, #7
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001356:	2303      	movs	r3, #3
 8001358:	e004      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135a:	2302      	movs	r3, #2
 800135c:	e002      	b.n	8001364 <HAL_GPIO_Init+0x204>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_GPIO_Init+0x204>
 8001362:	2300      	movs	r3, #0
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	f002 0203 	and.w	r2, r2, #3
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	4093      	lsls	r3, r2
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001374:	4935      	ldr	r1, [pc, #212]	; (800144c <HAL_GPIO_Init+0x2ec>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x304>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3301      	adds	r3, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	f67f aea2 	bls.w	800117c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40013800 	.word	0x40013800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021000 	.word	0x40021000
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e12b      	b.n	8001736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff f920 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001530:	f001 ffba 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8001534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a81      	ldr	r2, [pc, #516]	; (8001740 <HAL_I2C_Init+0x274>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d807      	bhi.n	8001550 <HAL_I2C_Init+0x84>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a80      	ldr	r2, [pc, #512]	; (8001744 <HAL_I2C_Init+0x278>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	e006      	b.n	800155e <HAL_I2C_Init+0x92>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a7d      	ldr	r2, [pc, #500]	; (8001748 <HAL_I2C_Init+0x27c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0e7      	b.n	8001736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a78      	ldr	r2, [pc, #480]	; (800174c <HAL_I2C_Init+0x280>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_I2C_Init+0x274>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d802      	bhi.n	80015a0 <HAL_I2C_Init+0xd4>
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3301      	adds	r3, #1
 800159e:	e009      	b.n	80015b4 <HAL_I2C_Init+0xe8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4a69      	ldr	r2, [pc, #420]	; (8001750 <HAL_I2C_Init+0x284>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	3301      	adds	r3, #1
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	495c      	ldr	r1, [pc, #368]	; (8001740 <HAL_I2C_Init+0x274>)
 80015d0:	428b      	cmp	r3, r1
 80015d2:	d819      	bhi.n	8001608 <HAL_I2C_Init+0x13c>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1e59      	subs	r1, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015e8:	400b      	ands	r3, r1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <HAL_I2C_Init+0x138>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e59      	subs	r1, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015fc:	3301      	adds	r3, #1
 80015fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001602:	e051      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001604:	2304      	movs	r3, #4
 8001606:	e04f      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d111      	bne.n	8001634 <HAL_I2C_Init+0x168>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e012      	b.n	800165a <HAL_I2C_Init+0x18e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	0099      	lsls	r1, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_Init+0x196>
 800165e:	2301      	movs	r3, #1
 8001660:	e022      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10e      	bne.n	8001688 <HAL_I2C_Init+0x1bc>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1e58      	subs	r0, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	440b      	add	r3, r1
 8001678:	fbb0 f3f3 	udiv	r3, r0, r3
 800167c:	3301      	adds	r3, #1
 800167e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	e00f      	b.n	80016a8 <HAL_I2C_Init+0x1dc>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	0099      	lsls	r1, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	fbb0 f3f3 	udiv	r3, r0, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	6809      	ldr	r1, [r1, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69da      	ldr	r2, [r3, #28]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6911      	ldr	r1, [r2, #16]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	4311      	orrs	r1, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	000186a0 	.word	0x000186a0
 8001744:	001e847f 	.word	0x001e847f
 8001748:	003d08ff 	.word	0x003d08ff
 800174c:	431bde83 	.word	0x431bde83
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af02      	add	r7, sp, #8
 800175a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e101      	b.n	800196a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f005 fb3d 	bl	8006e00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001794:	d102      	bne.n	800179c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fa84 	bl	8003cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7c1a      	ldrb	r2, [r3, #16]
 80017ae:	f88d 2000 	strb.w	r2, [sp]
 80017b2:	3304      	adds	r3, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	f002 f963 	bl	8003a80 <USB_CoreInit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ce      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fa7c 	bl	8003cd0 <USB_SetCurrentMode>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0bf      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e04a      	b.n	8001886 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3315      	adds	r3, #21
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3314      	adds	r3, #20
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	b298      	uxth	r0, r3
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	332e      	adds	r3, #46	; 0x2e
 800182c:	4602      	mov	r2, r0
 800182e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3318      	adds	r3, #24
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	331c      	adds	r3, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3320      	adds	r3, #32
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3324      	adds	r3, #36	; 0x24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3af      	bcc.n	80017f0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e044      	b.n	8001920 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f203 2355 	addw	r3, r3, #597	; 0x255
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3b5      	bcc.n	8001896 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7c1a      	ldrb	r2, [r3, #16]
 8001932:	f88d 2000 	strb.w	r2, [sp]
 8001936:	3304      	adds	r3, #4
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	f002 fa15 	bl	8003d68 <USB_DevInit>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00c      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fa5f 	bl	8004e26 <USB_DevDisconnect>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_PCD_Start+0x1c>
 800198a:	2302      	movs	r3, #2
 800198c:	e022      	b.n	80019d4 <HAL_PCD_Start+0x62>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 f966 	bl	8003c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fa0d 	bl	8004de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08d      	sub	sp, #52	; 0x34
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 facb 	bl	8004f8e <USB_GetMode>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 848c 	bne.w	8002318 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fa2f 	bl	8004e68 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8482 	beq.w	8002316 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fa1c 	bl	8004e68 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 0202 	and.w	r2, r2, #2
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fa0a 	bl	8004e68 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d161      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0210 	bic.w	r2, r2, #16
 8001a6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	0c5b      	lsrs	r3, r3, #17
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d124      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d035      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6a38      	ldr	r0, [r7, #32]
 8001aba:	f003 f841 	bl	8004b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aca:	441a      	add	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001adc:	441a      	add	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	e016      	b.n	8001b12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	0c5b      	lsrs	r3, r3, #17
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d110      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001af6:	2208      	movs	r2, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	6a38      	ldr	r0, [r7, #32]
 8001afc:	f003 f820 	bl	8004b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b0c:	441a      	add	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0210 	orr.w	r2, r2, #16
 8001b20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f99e 	bl	8004e68 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b36:	f040 80a7 	bne.w	8001c88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f9a3 	bl	8004e8e <USB_ReadDevAllOutEpInterrupt>
 8001b48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b4a:	e099      	b.n	8001c80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 808e 	beq.w	8001c74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 f9c7 	bl	8004ef6 <USB_ReadDevOutEPInterrupt>
 8001b68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b80:	461a      	mov	r2, r3
 8001b82:	2301      	movs	r3, #1
 8001b84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fe8b 	bl	80028a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ff61 	bl	8002a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2310      	movs	r3, #16
 8001bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d030      	beq.n	8001c3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d109      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f005 f9f2 	bl	800700c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c34:	461a      	mov	r2, r3
 8001c36:	2302      	movs	r3, #2
 8001c38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c50:	461a      	mov	r2, r3
 8001c52:	2320      	movs	r3, #32
 8001c54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	3301      	adds	r3, #1
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f af62 	bne.w	8001b4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 f8eb 	bl	8004e68 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c9c:	f040 80db 	bne.w	8001e56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 f90c 	bl	8004ec2 <USB_ReadDevAllInEpInterrupt>
 8001caa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cb0:	e0cd      	b.n	8001e4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80c2 	beq.w	8001e42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 f932 	bl	8004f32 <USB_ReadDevInEPInterrupt>
 8001cce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d057      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d132      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3320      	adds	r3, #32
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4403      	add	r3, r0
 8001d38:	331c      	adds	r3, #28
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4419      	add	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4403      	add	r3, r0
 8001d4c:	3320      	adds	r3, #32
 8001d4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3324      	adds	r3, #36	; 0x24
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d108      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001d76:	461a      	mov	r2, r3
 8001d78:	2101      	movs	r1, #1
 8001d7a:	f003 f939 	bl	8004ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 f8bc 	bl	8006f02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2308      	movs	r3, #8
 8001da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2340      	movs	r3, #64	; 0x40
 8001ddc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dea:	6a38      	ldr	r0, [r7, #32]
 8001dec:	f002 f920 	bl	8004030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 f909 	bl	8007030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fca5 	bl	800278c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f47f af2e 	bne.w	8001cb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f804 	bl	8004e68 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e6a:	d122      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fe8b 	bl	8002bb0 <HAL_PCDEx_LPM_Callback>
 8001e9a:	e002      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f005 f8a7 	bl	8006ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 ffd6 	bl	8004e68 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec6:	d112      	bne.n	8001eee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f005 f863 	bl	8006fa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eec:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 ffb8 	bl	8004e68 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	f040 80b7 	bne.w	8002074 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 f885 	bl	8004030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2a:	e046      	b.n	8001fba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f50:	0151      	lsls	r1, r2, #5
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	440a      	add	r2, r1
 8001f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f84:	0151      	lsls	r1, r2, #5
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	440a      	add	r2, r1
 8001f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fa4:	0151      	lsls	r1, r2, #5
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	440a      	add	r2, r1
 8001faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d3b2      	bcc.n	8001f2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fd8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7bdb      	ldrb	r3, [r3, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff2:	f043 030b 	orr.w	r3, r3, #11
 8001ff6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002008:	f043 030b 	orr.w	r3, r3, #11
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	e015      	b.n	800203c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002022:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002026:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002036:	f043 030b 	orr.w	r3, r3, #11
 800203a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800204e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800205e:	461a      	mov	r2, r3
 8002060:	f002 ffc6 	bl	8004ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f002 fef5 	bl	8004e68 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002088:	d123      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 ff8b 	bl	8004faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 f842 	bl	8004122 <USB_GetDevSpeed>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681c      	ldr	r4, [r3, #0]
 80020aa:	f001 f9f1 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80020ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020b4:	461a      	mov	r2, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f001 fd46 	bl	8003b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f004 ff48 	bl	8006f52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 fec6 	bl	8004e68 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d10a      	bne.n	80020fc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f004 ff25 	bl	8006f36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f002 0208 	and.w	r2, r2, #8
 80020fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 feb1 	bl	8004e68 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d123      	bne.n	8002158 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	e014      	b.n	800214c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d105      	bne.n	8002146 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4619      	mov	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 faf2 	bl	800272a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	3301      	adds	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	461a      	mov	r2, r3
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	4293      	cmp	r3, r2
 8002156:	d3e4      	bcc.n	8002122 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fe83 	bl	8004e68 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800216c:	d13c      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800216e:	2301      	movs	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	e02b      	b.n	80021cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3318      	adds	r3, #24
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d115      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800219a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800219c:	2b00      	cmp	r3, #0
 800219e:	da12      	bge.n	80021c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3317      	adds	r3, #23
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fab2 	bl	800272a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d3cd      	bcc.n	8002174 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f002 fe3b 	bl	8004e68 <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fc:	d156      	bne.n	80022ac <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fe:	2301      	movs	r3, #1
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e045      	b.n	8002290 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d12e      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800222c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	da2b      	bge.n	800228a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800223e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002242:	429a      	cmp	r2, r3
 8002244:	d121      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002286:	6053      	str	r3, [r2, #4]
            break;
 8002288:	e008      	b.n	800229c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	3301      	adds	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	4293      	cmp	r3, r2
 800229a:	d3b3      	bcc.n	8002204 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fdd9 	bl	8004e68 <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d10a      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f004 fec6 	bl	8007054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fdc3 	bl	8004e68 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d115      	bne.n	8002318 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f004 feb6 	bl	8007070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	e000      	b.n	8002318 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002316:	bf00      	nop
    }
  }
}
 8002318:	3734      	adds	r7, #52	; 0x34
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_PCD_SetAddress+0x1a>
 8002334:	2302      	movs	r3, #2
 8002336:	e012      	b.n	800235e <HAL_PCD_SetAddress+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f002 fd22 	bl	8004d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	460b      	mov	r3, r1
 800237a:	803b      	strh	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0f      	bge.n	80023ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3310      	adds	r3, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	705a      	strb	r2, [r3, #1]
 80023aa:	e00f      	b.n	80023cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023d8:	883b      	ldrh	r3, [r7, #0]
 80023da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	78ba      	ldrb	r2, [r7, #2]
 80023e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023fa:	78bb      	ldrb	r3, [r7, #2]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_PCD_EP_Open+0xae>
 8002410:	2302      	movs	r3, #2
 8002412:	e00e      	b.n	8002432 <HAL_PCD_EP_Open+0xcc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fea2 	bl	800416c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002430:	7afb      	ldrb	r3, [r7, #11]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	da0f      	bge.n	800246e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3310      	adds	r3, #16
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	705a      	strb	r2, [r3, #1]
 800246c:	e00f      	b.n	800248e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_EP_Close+0x6e>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_Close+0x8c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 fee0 	bl	800427c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	460b      	mov	r3, r1
 80024dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	b2da      	uxtb	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	799b      	ldrb	r3, [r3, #6]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	461a      	mov	r2, r3
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	f001 ff7d 	bl	8004434 <USB_EPStartXfer>

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	460b      	mov	r3, r1
 8002552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	f003 020f 	and.w	r2, r3, #15
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3310      	adds	r3, #16
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2201      	movs	r2, #1
 8002582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	b2da      	uxtb	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	799b      	ldrb	r3, [r3, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	799b      	ldrb	r3, [r3, #6]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	f001 ff43 	bl	8004434 <USB_EPStartXfer>

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	7912      	ldrb	r2, [r2, #4]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e04f      	b.n	8002676 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da0f      	bge.n	80025fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3310      	adds	r3, #16
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	705a      	strb	r2, [r3, #1]
 80025fc:	e00d      	b.n	800261a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_PCD_EP_SetStall+0x82>
 8002636:	2302      	movs	r3, #2
 8002638:	e01d      	b.n	8002676 <HAL_PCD_EP_SetStall+0xbe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fad1 	bl	8004bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7999      	ldrb	r1, [r3, #6]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002666:	461a      	mov	r2, r3
 8002668:	f002 fcc2 	bl	8004ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	7912      	ldrb	r2, [r2, #4]
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e042      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800269c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da0f      	bge.n	80026c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 020f 	and.w	r2, r3, #15
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3310      	adds	r3, #16
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	3304      	adds	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
 80026c2:	e00f      	b.n	80026e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_EP_ClrStall+0x86>
 8002700:	2302      	movs	r3, #2
 8002702:	e00e      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fada 	bl	8004ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0c      	bge.n	8002758 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3310      	adds	r3, #16
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e00c      	b.n	8002772 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 f8f9 	bl	8004970 <USB_EPStopXfer>
 800277e:	4603      	mov	r3, r0
 8002780:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002782:	7afb      	ldrb	r3, [r7, #11]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3310      	adds	r3, #16
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d901      	bls.n	80027c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e06b      	b.n	800289c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d902      	bls.n	80027e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3303      	adds	r3, #3
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027e8:	e02a      	b.n	8002840 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d902      	bls.n	8002806 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3303      	adds	r3, #3
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68d9      	ldr	r1, [r3, #12]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4603      	mov	r3, r0
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f002 f94e 	bl	8004ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	441a      	add	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	441a      	add	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	429a      	cmp	r2, r3
 8002854:	d809      	bhi.n	800286a <PCD_WriteEmptyTxFifo+0xde>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285e:	429a      	cmp	r2, r3
 8002860:	d203      	bcs.n	800286a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1bf      	bne.n	80027ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	d811      	bhi.n	800289a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	2201      	movs	r2, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	43db      	mvns	r3, r3
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002896:	4013      	ands	r3, r2
 8002898:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	333c      	adds	r3, #60	; 0x3c
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	799b      	ldrb	r3, [r3, #6]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d17b      	bne.n	80029d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4a61      	ldr	r2, [pc, #388]	; (8002a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f240 80b9 	bls.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80b3 	beq.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e0a7      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002926:	461a      	mov	r2, r3
 8002928:	2320      	movs	r3, #32
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	e098      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 8093 	bne.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4a4b      	ldr	r2, [pc, #300]	; (8002a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d90f      	bls.n	8002962 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295e:	6093      	str	r3, [r2, #8]
 8002960:	e07e      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	440b      	add	r3, r1
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d114      	bne.n	80029c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	f002 fb1e 	bl	8004ff0 <USB_EP0_OutStart>
 80029b4:	e006      	b.n	80029c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	441a      	add	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f004 fa7e 	bl	8006ecc <HAL_PCD_DataOutStageCallback>
 80029d0:	e046      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d124      	bne.n	8002a24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	e032      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a10:	461a      	mov	r2, r3
 8002a12:	2320      	movs	r3, #32
 8002a14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f004 fa55 	bl	8006ecc <HAL_PCD_DataOutStageCallback>
 8002a22:	e01d      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d114      	bne.n	8002a54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f002 face 	bl	8004ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f004 fa36 	bl	8006ecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	4f54300a 	.word	0x4f54300a
 8002a70:	4f54310a 	.word	0x4f54310a

08002a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	333c      	adds	r3, #60	; 0x3c
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d90e      	bls.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 f9ed 	bl	8006ea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90c      	bls.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f002 fa80 	bl	8004ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	4f54300a 	.word	0x4f54300a

08002b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b1e:	883b      	ldrh	r3, [r7, #0]
 8002b20:	0419      	lsls	r1, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b2c:	e028      	b.n	8002b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e00d      	b.n	8002b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3340      	adds	r3, #64	; 0x40
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3ec      	bcc.n	8002b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b68:	883b      	ldrh	r3, [r7, #0]
 8002b6a:	0418      	lsls	r0, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4302      	orrs	r2, r0
 8002b78:	3340      	adds	r3, #64	; 0x40
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e267      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e242      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe f92c 	bl	8000edc <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe f928 	bl	8000edc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e207      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f918 	bl	8000edc <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f914 	bl	8000edc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1f3      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c7      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f8cd 	bl	8000edc <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f8c9 	bl	8000edc <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a8      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f8ac 	bl	8000edc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe f8a8 	bl	8000edc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e187      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d036      	beq.n	8002e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f88c 	bl	8000edc <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe f888 	bl	8000edc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e167      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe f875 	bl	8000edc <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00e      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe f871 	bl	8000edc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e150      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ea      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b74      	ldr	r3, [pc, #464]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f831 	bl	8000edc <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe f82d 	bl	8000edc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e10c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x30c>
 8002eba:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b55      	ldr	r3, [pc, #340]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fd fff2 	bl	8000edc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fd ffee 	bl	8000edc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0cb      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7fd ffdc 	bl	8000edc <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fd ffd8 	bl	8000edc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0b5      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a1 	beq.w	80030a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d05c      	beq.n	800302c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d141      	bne.n	8002ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fd ffac 	bl	8000edc <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd ffa8 	bl	8000edc <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e087      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	491b      	ldr	r1, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fd ff81 	bl	8000edc <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fd ff7d 	bl	8000edc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e05c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x416>
 8002ffc:	e054      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fd ff6a 	bl	8000edc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fd ff66 	bl	8000edc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e045      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
 800302a:	e03d      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e038      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd fe98 	bl	8000edc <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd fe94 	bl	8000edc <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fdf8 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08007500 	.word	0x08007500
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b094      	sub	sp, #80	; 0x50
 800328a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x40>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	f200 80e1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x3a>
 80032b6:	e0db      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032bc:	e0db      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032be:	4b73      	ldr	r3, [pc, #460]	; (800348c <HAL_RCC_GetSysClockFreq+0x208>)
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
 80032f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4621      	mov	r1, r4
 8003310:	1a51      	subs	r1, r2, r1
 8003312:	6139      	str	r1, [r7, #16]
 8003314:	4629      	mov	r1, r5
 8003316:	eb63 0301 	sbc.w	r3, r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003332:	4651      	mov	r1, sl
 8003334:	018a      	lsls	r2, r1, #6
 8003336:	4651      	mov	r1, sl
 8003338:	ebb2 0801 	subs.w	r8, r2, r1
 800333c:	4659      	mov	r1, fp
 800333e:	eb63 0901 	sbc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	462b      	mov	r3, r5
 8003364:	eb49 0303 	adc.w	r3, r9, r3
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003376:	4629      	mov	r1, r5
 8003378:	024b      	lsls	r3, r1, #9
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003380:	4621      	mov	r1, r4
 8003382:	024a      	lsls	r2, r1, #9
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003394:	f7fc ff1e 	bl	80001d4 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	e058      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4611      	mov	r1, r2
 80033ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4641      	mov	r1, r8
 80033d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f4:	ebb2 040a 	subs.w	r4, r2, sl
 80033f8:	eb63 050b 	sbc.w	r5, r3, fp
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	f7fc fec4 	bl	80001d4 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003478:	4618      	mov	r0, r3
 800347a:	3750      	adds	r7, #80	; 0x50
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08007510 	.word	0x08007510

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08007510 	.word	0x08007510

080034f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e042      	b.n	8003590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fd fc04 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f82b 	bl	8003598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b0c0      	sub	sp, #256	; 0x100
 800359e:	af00      	add	r7, sp, #0
 80035a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	68d9      	ldr	r1, [r3, #12]
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	ea40 0301 	orr.w	r3, r0, r1
 80035c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035f0:	f021 010c 	bic.w	r1, r1, #12
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035fe:	430b      	orrs	r3, r1
 8003600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	6999      	ldr	r1, [r3, #24]
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	ea40 0301 	orr.w	r3, r0, r1
 800361e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b8f      	ldr	r3, [pc, #572]	; (8003864 <UART_SetConfig+0x2cc>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d005      	beq.n	8003638 <UART_SetConfig+0xa0>
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <UART_SetConfig+0x2d0>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d104      	bne.n	8003642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7ff ff4a 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 800363c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003640:	e003      	b.n	800364a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003642:	f7ff ff31 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8003646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	f040 810c 	bne.w	8003870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365c:	2200      	movs	r2, #0
 800365e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	1891      	adds	r1, r2, r2
 8003670:	65b9      	str	r1, [r7, #88]	; 0x58
 8003672:	415b      	adcs	r3, r3
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800367a:	4621      	mov	r1, r4
 800367c:	eb12 0801 	adds.w	r8, r2, r1
 8003680:	4629      	mov	r1, r5
 8003682:	eb43 0901 	adc.w	r9, r3, r1
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800369a:	4690      	mov	r8, r2
 800369c:	4699      	mov	r9, r3
 800369e:	4623      	mov	r3, r4
 80036a0:	eb18 0303 	adds.w	r3, r8, r3
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036a8:	462b      	mov	r3, r5
 80036aa:	eb49 0303 	adc.w	r3, r9, r3
 80036ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036c6:	460b      	mov	r3, r1
 80036c8:	18db      	adds	r3, r3, r3
 80036ca:	653b      	str	r3, [r7, #80]	; 0x50
 80036cc:	4613      	mov	r3, r2
 80036ce:	eb42 0303 	adc.w	r3, r2, r3
 80036d2:	657b      	str	r3, [r7, #84]	; 0x54
 80036d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036dc:	f7fc fd7a 	bl	80001d4 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4b61      	ldr	r3, [pc, #388]	; (800386c <UART_SetConfig+0x2d4>)
 80036e6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	011c      	lsls	r4, r3, #4
 80036ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003700:	4642      	mov	r2, r8
 8003702:	464b      	mov	r3, r9
 8003704:	1891      	adds	r1, r2, r2
 8003706:	64b9      	str	r1, [r7, #72]	; 0x48
 8003708:	415b      	adcs	r3, r3
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003710:	4641      	mov	r1, r8
 8003712:	eb12 0a01 	adds.w	sl, r2, r1
 8003716:	4649      	mov	r1, r9
 8003718:	eb43 0b01 	adc.w	fp, r3, r1
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800372c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003730:	4692      	mov	sl, r2
 8003732:	469b      	mov	fp, r3
 8003734:	4643      	mov	r3, r8
 8003736:	eb1a 0303 	adds.w	r3, sl, r3
 800373a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800373e:	464b      	mov	r3, r9
 8003740:	eb4b 0303 	adc.w	r3, fp, r3
 8003744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800375c:	460b      	mov	r3, r1
 800375e:	18db      	adds	r3, r3, r3
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
 8003762:	4613      	mov	r3, r2
 8003764:	eb42 0303 	adc.w	r3, r2, r3
 8003768:	647b      	str	r3, [r7, #68]	; 0x44
 800376a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800376e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003772:	f7fc fd2f 	bl	80001d4 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4611      	mov	r1, r2
 800377c:	4b3b      	ldr	r3, [pc, #236]	; (800386c <UART_SetConfig+0x2d4>)
 800377e:	fba3 2301 	umull	r2, r3, r3, r1
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2264      	movs	r2, #100	; 0x64
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	1acb      	subs	r3, r1, r3
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <UART_SetConfig+0x2d4>)
 8003794:	fba3 2302 	umull	r2, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037a0:	441c      	add	r4, r3
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80037bc:	415b      	adcs	r3, r3
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037c4:	4641      	mov	r1, r8
 80037c6:	1851      	adds	r1, r2, r1
 80037c8:	6339      	str	r1, [r7, #48]	; 0x30
 80037ca:	4649      	mov	r1, r9
 80037cc:	414b      	adcs	r3, r1
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037dc:	4659      	mov	r1, fp
 80037de:	00cb      	lsls	r3, r1, #3
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e6:	4651      	mov	r1, sl
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	4642      	mov	r2, r8
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f8:	464b      	mov	r3, r9
 80037fa:	460a      	mov	r2, r1
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003818:	460b      	mov	r3, r1
 800381a:	18db      	adds	r3, r3, r3
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
 800381e:	4613      	mov	r3, r2
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800382a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800382e:	f7fc fcd1 	bl	80001d4 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <UART_SetConfig+0x2d4>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	; 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	; 0x32
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <UART_SetConfig+0x2d4>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 0207 	and.w	r2, r3, #7
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4422      	add	r2, r4
 800385e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003860:	e106      	b.n	8003a70 <UART_SetConfig+0x4d8>
 8003862:	bf00      	nop
 8003864:	40011000 	.word	0x40011000
 8003868:	40011400 	.word	0x40011400
 800386c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800387a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800387e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003882:	4642      	mov	r2, r8
 8003884:	464b      	mov	r3, r9
 8003886:	1891      	adds	r1, r2, r2
 8003888:	6239      	str	r1, [r7, #32]
 800388a:	415b      	adcs	r3, r3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003892:	4641      	mov	r1, r8
 8003894:	1854      	adds	r4, r2, r1
 8003896:	4649      	mov	r1, r9
 8003898:	eb43 0501 	adc.w	r5, r3, r1
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038b8:	464b      	mov	r3, r9
 80038ba:	eb45 0303 	adc.w	r3, r5, r3
 80038be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038de:	4629      	mov	r1, r5
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e8:	4621      	mov	r1, r4
 80038ea:	008a      	lsls	r2, r1, #2
 80038ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038f0:	f7fc fc70 	bl	80001d4 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b60      	ldr	r3, [pc, #384]	; (8003a7c <UART_SetConfig+0x4e4>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	011c      	lsls	r4, r3, #4
 8003902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800390c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	1891      	adds	r1, r2, r2
 800391a:	61b9      	str	r1, [r7, #24]
 800391c:	415b      	adcs	r3, r3
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	4641      	mov	r1, r8
 8003926:	1851      	adds	r1, r2, r1
 8003928:	6139      	str	r1, [r7, #16]
 800392a:	4649      	mov	r1, r9
 800392c:	414b      	adcs	r3, r1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800393c:	4659      	mov	r1, fp
 800393e:	00cb      	lsls	r3, r1, #3
 8003940:	4651      	mov	r1, sl
 8003942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003946:	4651      	mov	r1, sl
 8003948:	00ca      	lsls	r2, r1, #3
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	4603      	mov	r3, r0
 8003950:	4642      	mov	r2, r8
 8003952:	189b      	adds	r3, r3, r2
 8003954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003958:	464b      	mov	r3, r9
 800395a:	460a      	mov	r2, r1
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	67bb      	str	r3, [r7, #120]	; 0x78
 800396e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800397c:	4649      	mov	r1, r9
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003986:	4641      	mov	r1, r8
 8003988:	008a      	lsls	r2, r1, #2
 800398a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800398e:	f7fc fc21 	bl	80001d4 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4611      	mov	r1, r2
 8003998:	4b38      	ldr	r3, [pc, #224]	; (8003a7c <UART_SetConfig+0x4e4>)
 800399a:	fba3 2301 	umull	r2, r3, r3, r1
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2264      	movs	r2, #100	; 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	1acb      	subs	r3, r1, r3
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	3332      	adds	r3, #50	; 0x32
 80039ac:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <UART_SetConfig+0x4e4>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b8:	441c      	add	r4, r3
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	673b      	str	r3, [r7, #112]	; 0x70
 80039c2:	677a      	str	r2, [r7, #116]	; 0x74
 80039c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	415b      	adcs	r3, r3
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039d8:	4641      	mov	r1, r8
 80039da:	1851      	adds	r1, r2, r1
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	4649      	mov	r1, r9
 80039e0:	414b      	adcs	r3, r1
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039f0:	4659      	mov	r1, fp
 80039f2:	00cb      	lsls	r3, r1, #3
 80039f4:	4651      	mov	r1, sl
 80039f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fa:	4651      	mov	r1, sl
 80039fc:	00ca      	lsls	r2, r1, #3
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	4642      	mov	r2, r8
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	eb42 0303 	adc.w	r3, r2, r3
 8003a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1e:	667a      	str	r2, [r7, #100]	; 0x64
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	008b      	lsls	r3, r1, #2
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a36:	4641      	mov	r1, r8
 8003a38:	008a      	lsls	r2, r1, #2
 8003a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a3e:	f7fc fbc9 	bl	80001d4 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <UART_SetConfig+0x4e4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <UART_SetConfig+0x4e4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4422      	add	r2, r4
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7c:	51eb851f 	.word	0x51eb851f

08003a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a80:	b084      	sub	sp, #16
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	f107 001c 	add.w	r0, r7, #28
 8003a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d123      	bne.n	8003ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 fae8 	bl	80050ac <USB_CoreReset>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e01b      	b.n	8003b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f001 fadc 	bl	80050ac <USB_CoreReset>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b0c:	e005      	b.n	8003b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b1a:	7fbb      	ldrb	r3, [r7, #30]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10b      	bne.n	8003b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f043 0206 	orr.w	r2, r3, #6
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr

08003b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d165      	bne.n	8003c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <USB_SetTurnaroundTime+0x11c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d906      	bls.n	8003b72 <USB_SetTurnaroundTime+0x2a>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <USB_SetTurnaroundTime+0x120>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d202      	bcs.n	8003b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b6c:	230f      	movs	r3, #15
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e062      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4a3c      	ldr	r2, [pc, #240]	; (8003c68 <USB_SetTurnaroundTime+0x120>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d306      	bcc.n	8003b88 <USB_SetTurnaroundTime+0x40>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <USB_SetTurnaroundTime+0x124>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d202      	bcs.n	8003b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b82:	230e      	movs	r3, #14
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e057      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <USB_SetTurnaroundTime+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d306      	bcc.n	8003b9e <USB_SetTurnaroundTime+0x56>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <USB_SetTurnaroundTime+0x128>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d202      	bcs.n	8003b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b98:	230d      	movs	r3, #13
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e04c      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a33      	ldr	r2, [pc, #204]	; (8003c70 <USB_SetTurnaroundTime+0x128>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d306      	bcc.n	8003bb4 <USB_SetTurnaroundTime+0x6c>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <USB_SetTurnaroundTime+0x12c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d802      	bhi.n	8003bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bae:	230c      	movs	r3, #12
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e041      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	; (8003c74 <USB_SetTurnaroundTime+0x12c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d906      	bls.n	8003bca <USB_SetTurnaroundTime+0x82>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4a2e      	ldr	r2, [pc, #184]	; (8003c78 <USB_SetTurnaroundTime+0x130>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d802      	bhi.n	8003bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bc4:	230b      	movs	r3, #11
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e036      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4a2a      	ldr	r2, [pc, #168]	; (8003c78 <USB_SetTurnaroundTime+0x130>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d906      	bls.n	8003be0 <USB_SetTurnaroundTime+0x98>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <USB_SetTurnaroundTime+0x134>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d802      	bhi.n	8003be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003bda:	230a      	movs	r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e02b      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4a26      	ldr	r2, [pc, #152]	; (8003c7c <USB_SetTurnaroundTime+0x134>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d906      	bls.n	8003bf6 <USB_SetTurnaroundTime+0xae>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <USB_SetTurnaroundTime+0x138>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d202      	bcs.n	8003bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003bf0:	2309      	movs	r3, #9
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e020      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <USB_SetTurnaroundTime+0x138>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d306      	bcc.n	8003c0c <USB_SetTurnaroundTime+0xc4>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <USB_SetTurnaroundTime+0x13c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d802      	bhi.n	8003c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c06:	2308      	movs	r3, #8
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e015      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <USB_SetTurnaroundTime+0x13c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d906      	bls.n	8003c22 <USB_SetTurnaroundTime+0xda>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <USB_SetTurnaroundTime+0x140>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d202      	bcs.n	8003c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c1c:	2307      	movs	r3, #7
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e00a      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c22:	2306      	movs	r3, #6
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e007      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d102      	bne.n	8003c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c2e:	2309      	movs	r3, #9
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e001      	b.n	8003c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c34:	2309      	movs	r3, #9
 8003c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	00d8acbf 	.word	0x00d8acbf
 8003c68:	00e4e1c0 	.word	0x00e4e1c0
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	01067380 	.word	0x01067380
 8003c74:	011a499f 	.word	0x011a499f
 8003c78:	01312cff 	.word	0x01312cff
 8003c7c:	014ca43f 	.word	0x014ca43f
 8003c80:	016e3600 	.word	0x016e3600
 8003c84:	01a6ab1f 	.word	0x01a6ab1f
 8003c88:	01e84800 	.word	0x01e84800

08003c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0201 	bic.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d115      	bne.n	8003d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cfe:	200a      	movs	r0, #10
 8003d00:	f7fd f8f8 	bl	8000ef4 <HAL_Delay>
      ms += 10U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	330a      	adds	r3, #10
 8003d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f001 f93f 	bl	8004f8e <USB_GetMode>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d01e      	beq.n	8003d54 <USB_SetCurrentMode+0x84>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2bc7      	cmp	r3, #199	; 0xc7
 8003d1a:	d9f0      	bls.n	8003cfe <USB_SetCurrentMode+0x2e>
 8003d1c:	e01a      	b.n	8003d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d115      	bne.n	8003d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d30:	200a      	movs	r0, #10
 8003d32:	f7fd f8df 	bl	8000ef4 <HAL_Delay>
      ms += 10U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	330a      	adds	r3, #10
 8003d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f001 f926 	bl	8004f8e <USB_GetMode>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <USB_SetCurrentMode+0x84>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2bc7      	cmp	r3, #199	; 0xc7
 8003d4c:	d9f0      	bls.n	8003d30 <USB_SetCurrentMode+0x60>
 8003d4e:	e001      	b.n	8003d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e005      	b.n	8003d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2bc8      	cmp	r3, #200	; 0xc8
 8003d58:	d101      	bne.n	8003d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	e009      	b.n	8003d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3340      	adds	r3, #64	; 0x40
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	2200      	movs	r2, #0
 8003d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	2b0e      	cmp	r3, #14
 8003da0:	d9f2      	bls.n	8003d88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003da2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11c      	bne.n	8003de4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
 8003de2:	e00b      	b.n	8003dfc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e02:	461a      	mov	r2, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10d      	bne.n	8003e2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f968 	bl	80040f0 <USB_SetDevSpeed>
 8003e20:	e008      	b.n	8003e34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e22:	2101      	movs	r1, #1
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f963 	bl	80040f0 <USB_SetDevSpeed>
 8003e2a:	e003      	b.n	8003e34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e2c:	2103      	movs	r1, #3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f95e 	bl	80040f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e34:	2110      	movs	r1, #16
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8fa 	bl	8004030 <USB_FlushTxFifo>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f924 	bl	8004094 <USB_FlushRxFifo>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	e043      	b.n	8003f08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e96:	d118      	bne.n	8003eca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e013      	b.n	8003edc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	e008      	b.n	8003edc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	461a      	mov	r2, r3
 8003efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3301      	adds	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d3b5      	bcc.n	8003e80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	e043      	b.n	8003fa2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f30:	d118      	bne.n	8003f64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e013      	b.n	8003f76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e008      	b.n	8003f76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d3b5      	bcc.n	8003f1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f043 0210 	orr.w	r2, r3, #16
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <USB_DevInit+0x2c4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f043 0208 	orr.w	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004004:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004028:	b004      	add	sp, #16
 800402a:	4770      	bx	lr
 800402c:	803c3800 	.word	0x803c3800

08004030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3301      	adds	r3, #1
 8004042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800404a:	d901      	bls.n	8004050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e01b      	b.n	8004088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	daf2      	bge.n	800403e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	019b      	lsls	r3, r3, #6
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	3301      	adds	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004074:	d901      	bls.n	800407a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e006      	b.n	8004088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d0f0      	beq.n	8004068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80040ac:	d901      	bls.n	80040b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e018      	b.n	80040e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	daf2      	bge.n	80040a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2210      	movs	r2, #16
 80040c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3301      	adds	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80040d0:	d901      	bls.n	80040d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e006      	b.n	80040e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d0f0      	beq.n	80040c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004110:	4313      	orrs	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0306 	and.w	r3, r3, #6
 800413a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
 8004146:	e00a      	b.n	800415e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d002      	beq.n	8004154 <USB_GetDevSpeed+0x32>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d102      	bne.n	800415a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004154:	2302      	movs	r3, #2
 8004156:	75fb      	strb	r3, [r7, #23]
 8004158:	e001      	b.n	800415e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800415a:	230f      	movs	r3, #15
 800415c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d13a      	bne.n	80041fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	68f9      	ldr	r1, [r7, #12]
 80041a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d155      	bne.n	800426c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	059b      	lsls	r3, r3, #22
 80041e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041e4:	4313      	orrs	r3, r2
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e036      	b.n	800426c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800421c:	4313      	orrs	r3, r2
 800421e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11a      	bne.n	800426c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	791b      	ldrb	r3, [r3, #4]
 8004250:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004252:	430b      	orrs	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	785b      	ldrb	r3, [r3, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d161      	bne.n	800435c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ae:	d11f      	bne.n	80042f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	2101      	movs	r1, #1
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004310:	4013      	ands	r3, r2
 8004312:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004334:	4013      	ands	r3, r2
 8004336:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	0159      	lsls	r1, r3, #5
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	440b      	add	r3, r1
 800434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004352:	4619      	mov	r1, r3
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <USB_DeactivateEndpoint+0x1b0>)
 8004356:	4013      	ands	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
 800435a:	e060      	b.n	800441e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d11f      	bne.n	80043b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004392:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	43db      	mvns	r3, r3
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d4:	4013      	ands	r3, r2
 80043d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	43db      	mvns	r3, r3
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f8:	4013      	ands	r3, r2
 80043fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	0159      	lsls	r1, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	440b      	add	r3, r1
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	4619      	mov	r1, r3
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <USB_DeactivateEndpoint+0x1b4>)
 800441a:	4013      	ands	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	ec337800 	.word	0xec337800
 8004430:	eff37800 	.word	0xeff37800

08004434 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 8180 	bne.w	8004756 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d132      	bne.n	80044c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	440a      	add	r2, r1
 8004474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800447c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	440a      	add	r2, r1
 8004498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	0cdb      	lsrs	r3, r3, #19
 80044be:	04db      	lsls	r3, r3, #19
 80044c0:	6113      	str	r3, [r2, #16]
 80044c2:	e098      	b.n	80045f6 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	0cdb      	lsrs	r3, r3, #19
 80044e0:	04db      	lsls	r3, r3, #19
 80044e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004502:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004506:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11a      	bne.n	8004544 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d903      	bls.n	8004522 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	440a      	add	r2, r1
 8004538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004540:	6113      	str	r3, [r2, #16]
 8004542:	e045      	b.n	80045d0 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4413      	add	r3, r2
 800454e:	1e5a      	subs	r2, r3, #1
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	8afb      	ldrh	r3, [r7, #22]
 800456a:	04db      	lsls	r3, r3, #19
 800456c:	4619      	mov	r1, r3
 800456e:	4ba4      	ldr	r3, [pc, #656]	; (8004800 <USB_EPStartXfer+0x3cc>)
 8004570:	400b      	ands	r3, r1
 8004572:	69b9      	ldr	r1, [r7, #24]
 8004574:	0148      	lsls	r0, r1, #5
 8004576:	69f9      	ldr	r1, [r7, #28]
 8004578:	4401      	add	r1, r0
 800457a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800457e:	4313      	orrs	r3, r2
 8004580:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	791b      	ldrb	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d122      	bne.n	80045d0 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045a8:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	8afb      	ldrh	r3, [r7, #22]
 80045ba:	075b      	lsls	r3, r3, #29
 80045bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80045c0:	69b9      	ldr	r1, [r7, #24]
 80045c2:	0148      	lsls	r0, r1, #5
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	4401      	add	r1, r0
 80045c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	69b9      	ldr	r1, [r7, #24]
 80045e8:	0148      	lsls	r0, r1, #5
 80045ea:	69f9      	ldr	r1, [r7, #28]
 80045ec:	4401      	add	r1, r0
 80045ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d14b      	bne.n	8004694 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	461a      	mov	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	791b      	ldrb	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d128      	bne.n	8004672 <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d110      	bne.n	8004652 <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	440a      	add	r2, r1
 8004646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e00f      	b.n	8004672 <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004670:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e165      	b.n	8004960 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	791b      	ldrb	r3, [r3, #4]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d015      	beq.n	80046e8 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 814d 	beq.w	8004960 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046e2:	4313      	orrs	r3, r2
 80046e4:	634b      	str	r3, [r1, #52]	; 0x34
 80046e6:	e13b      	b.n	8004960 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d110      	bne.n	800471a <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e00f      	b.n	800473a <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	68d9      	ldr	r1, [r3, #12]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	b298      	uxth	r0, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	4603      	mov	r3, r0
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f9b8 	bl	8004ac4 <USB_WritePacket>
 8004754:	e104      	b.n	8004960 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004770:	0cdb      	lsrs	r3, r3, #19
 8004772:	04db      	lsls	r3, r3, #19
 8004774:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004798:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d131      	bne.n	8004804 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	0148      	lsls	r0, r1, #5
 80047d2:	69f9      	ldr	r1, [r7, #28]
 80047d4:	4401      	add	r1, r0
 80047d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047da:	4313      	orrs	r3, r2
 80047dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047fc:	6113      	str	r3, [r2, #16]
 80047fe:	e061      	b.n	80048c4 <USB_EPStartXfer+0x490>
 8004800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d123      	bne.n	8004854 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	0148      	lsls	r0, r1, #5
 8004826:	69f9      	ldr	r1, [r7, #28]
 8004828:	4401      	add	r1, r0
 800482a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004850:	6113      	str	r3, [r2, #16]
 8004852:	e037      	b.n	80048c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4413      	add	r3, r2
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	8afa      	ldrh	r2, [r7, #22]
 8004870:	fb03 f202 	mul.w	r2, r3, r2
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	8afb      	ldrh	r3, [r7, #22]
 8004888:	04d9      	lsls	r1, r3, #19
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <USB_EPStartXfer+0x538>)
 800488c:	400b      	ands	r3, r1
 800488e:	69b9      	ldr	r1, [r7, #24]
 8004890:	0148      	lsls	r0, r1, #5
 8004892:	69f9      	ldr	r1, [r7, #28]
 8004894:	4401      	add	r1, r0
 8004896:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800489a:	4313      	orrs	r3, r2
 800489c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	0148      	lsls	r0, r1, #5
 80048b8:	69f9      	ldr	r1, [r7, #28]
 80048ba:	4401      	add	r1, r0
 80048bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10d      	bne.n	80048e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	460a      	mov	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	791b      	ldrb	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d128      	bne.n	8004940 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d110      	bne.n	8004920 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e00f      	b.n	8004940 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800495e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	1ff80000 	.word	0x1ff80000

08004970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d14a      	bne.n	8004a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a6:	f040 8086 	bne.w	8004ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d902      	bls.n	8004a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
          break;
 8004a06:	e056      	b.n	8004ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a20:	d0e7      	beq.n	80049f2 <USB_EPStopXfer+0x82>
 8004a22:	e048      	b.n	8004ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3c:	d13b      	bne.n	8004ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d902      	bls.n	8004a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
          break;
 8004a9a:	e00c      	b.n	8004ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab4:	d0e7      	beq.n	8004a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b089      	sub	sp, #36	; 0x24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	71fb      	strb	r3, [r7, #7]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d123      	bne.n	8004b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004aea:	88bb      	ldrh	r3, [r7, #4]
 8004aec:	3303      	adds	r3, #3
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e018      	b.n	8004b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	031a      	lsls	r2, r3, #12
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b04:	461a      	mov	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3301      	adds	r3, #1
 8004b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	3301      	adds	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3e2      	bcc.n	8004af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3724      	adds	r7, #36	; 0x24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b08b      	sub	sp, #44	; 0x2c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	e014      	b.n	8004b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	3301      	adds	r3, #1
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	3301      	adds	r3, #1
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	6a3a      	ldr	r2, [r7, #32]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d3e6      	bcc.n	8004b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b9e:	8bfb      	ldrh	r3, [r7, #30]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01e      	beq.n	8004be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f107 0310 	add.w	r3, r7, #16
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004bd6:	8bfb      	ldrh	r3, [r7, #30]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ea      	bne.n	8004bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	372c      	adds	r7, #44	; 0x2c
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d12c      	bne.n	8004c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	db12      	blt.n	8004c44 <USB_EPSetStall+0x54>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00f      	beq.n	8004c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e02b      	b.n	8004cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	db12      	blt.n	8004c9e <USB_EPSetStall+0xae>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d128      	bne.n	8004d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	791b      	ldrb	r3, [r3, #4]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d003      	beq.n	8004d18 <USB_EPClearStall+0x4c>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	791b      	ldrb	r3, [r3, #4]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d138      	bne.n	8004d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e027      	b.n	8004d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	791b      	ldrb	r3, [r3, #4]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d003      	beq.n	8004d6a <USB_EPClearStall+0x9e>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d10f      	bne.n	8004d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e12:	f023 0302 	bic.w	r3, r3, #2
 8004e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004e40:	f023 0303 	bic.w	r3, r3, #3
 8004e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e80:	68fb      	ldr	r3, [r7, #12]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b085      	sub	sp, #20
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	b29b      	uxth	r3, r3
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f24:	68bb      	ldr	r3, [r7, #8]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b087      	sub	sp, #28
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f62:	01db      	lsls	r3, r3, #7
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f80:	68bb      	ldr	r3, [r7, #8]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004fc8:	f023 0307 	bic.w	r3, r3, #7
 8004fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	333c      	adds	r3, #60	; 0x3c
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <USB_EP0_OutStart+0xb8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d90a      	bls.n	800502a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005024:	d101      	bne.n	800502a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e037      	b.n	800509a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	f043 0318 	orr.w	r3, r3, #24
 800505c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005072:	7afb      	ldrb	r3, [r7, #11]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10f      	bne.n	8005098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005092:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	4f54300a 	.word	0x4f54300a

080050ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050c4:	d901      	bls.n	80050ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e01b      	b.n	8005102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	daf2      	bge.n	80050b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80050ee:	d901      	bls.n	80050f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e006      	b.n	8005102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d0f0      	beq.n	80050e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800511c:	2010      	movs	r0, #16
 800511e:	f002 f92d 	bl	800737c <USBD_static_malloc>
 8005122:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	32b0      	adds	r2, #176	; 0xb0
 8005134:	2100      	movs	r1, #0
 8005136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800513a:	2302      	movs	r3, #2
 800513c:	e048      	b.n	80051d0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	32b0      	adds	r2, #176	; 0xb0
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	32b0      	adds	r2, #176	; 0xb0
 8005158:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7c1b      	ldrb	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <USBD_HID_Init+0xc8>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3326      	adds	r3, #38	; 0x26
 8005180:	2207      	movs	r2, #7
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	e00c      	b.n	80051a0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <USBD_HID_Init+0xc8>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	3326      	adds	r3, #38	; 0x26
 800519c:	220a      	movs	r2, #10
 800519e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80051a0:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <USBD_HID_Init+0xc8>)
 80051a2:	7819      	ldrb	r1, [r3, #0]
 80051a4:	2304      	movs	r3, #4
 80051a6:	2203      	movs	r2, #3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 ffd6 	bl	800715a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <USBD_HID_Init+0xc8>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	2201      	movs	r2, #1
 80051c6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200000bf 	.word	0x200000bf

080051dc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80051e8:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <USBD_HID_DeInit+0x8c>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 ffd9 	bl	80071a6 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <USBD_HID_DeInit+0x8c>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f003 020f 	and.w	r2, r3, #15
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	2200      	movs	r2, #0
 800520c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800520e:	4b16      	ldr	r3, [pc, #88]	; (8005268 <USBD_HID_DeInit+0x8c>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 020f 	and.w	r2, r3, #15
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3326      	adds	r3, #38	; 0x26
 8005224:	2200      	movs	r2, #0
 8005226:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32b0      	adds	r2, #176	; 0xb0
 8005232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	32b0      	adds	r2, #176	; 0xb0
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	4618      	mov	r0, r3
 800524a:	f002 f8a5 	bl	8007398 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	32b0      	adds	r2, #176	; 0xb0
 8005258:	2100      	movs	r1, #0
 800525a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200000bf 	.word	0x200000bf

0800526c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	32b0      	adds	r2, #176	; 0xb0
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005294:	2303      	movs	r3, #3
 8005296:	e0e8      	b.n	800546a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d046      	beq.n	8005332 <USBD_HID_Setup+0xc6>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	f040 80d8 	bne.w	800545a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	3b02      	subs	r3, #2
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d836      	bhi.n	8005322 <USBD_HID_Setup+0xb6>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <USBD_HID_Setup+0x50>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	08005313 	.word	0x08005313
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	08005323 	.word	0x08005323
 80052c8:	08005323 	.word	0x08005323
 80052cc:	08005323 	.word	0x08005323
 80052d0:	08005323 	.word	0x08005323
 80052d4:	08005323 	.word	0x08005323
 80052d8:	08005323 	.word	0x08005323
 80052dc:	08005301 	.word	0x08005301
 80052e0:	080052e5 	.word	0x080052e5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	885b      	ldrh	r3, [r3, #2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	601a      	str	r2, [r3, #0]
          break;
 80052f0:	e01e      	b.n	8005330 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 fbe7 	bl	8006acc <USBD_CtlSendData>
          break;
 80052fe:	e017      	b.n	8005330 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	885b      	ldrh	r3, [r3, #2]
 8005304:	0a1b      	lsrs	r3, r3, #8
 8005306:	b29b      	uxth	r3, r3
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	605a      	str	r2, [r3, #4]
          break;
 8005310:	e00e      	b.n	8005330 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3304      	adds	r3, #4
 8005316:	2201      	movs	r2, #1
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 fbd6 	bl	8006acc <USBD_CtlSendData>
          break;
 8005320:	e006      	b.n	8005330 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fb54 	bl	80069d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800532a:	2303      	movs	r3, #3
 800532c:	75fb      	strb	r3, [r7, #23]
          break;
 800532e:	bf00      	nop
      }
      break;
 8005330:	e09a      	b.n	8005468 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b0b      	cmp	r3, #11
 8005338:	f200 8086 	bhi.w	8005448 <USBD_HID_Setup+0x1dc>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <USBD_HID_Setup+0xd8>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005375 	.word	0x08005375
 8005348:	08005457 	.word	0x08005457
 800534c:	08005449 	.word	0x08005449
 8005350:	08005449 	.word	0x08005449
 8005354:	08005449 	.word	0x08005449
 8005358:	08005449 	.word	0x08005449
 800535c:	0800539f 	.word	0x0800539f
 8005360:	08005449 	.word	0x08005449
 8005364:	08005449 	.word	0x08005449
 8005368:	08005449 	.word	0x08005449
 800536c:	080053f7 	.word	0x080053f7
 8005370:	08005421 	.word	0x08005421
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d107      	bne.n	8005390 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005380:	f107 030a 	add.w	r3, r7, #10
 8005384:	2202      	movs	r2, #2
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f001 fb9f 	bl	8006acc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800538e:	e063      	b.n	8005458 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 fb1d 	bl	80069d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	75fb      	strb	r3, [r7, #23]
          break;
 800539c:	e05c      	b.n	8005458 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	885b      	ldrh	r3, [r3, #2]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b22      	cmp	r3, #34	; 0x22
 80053a8:	d108      	bne.n	80053bc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	88db      	ldrh	r3, [r3, #6]
 80053ae:	2b3f      	cmp	r3, #63	; 0x3f
 80053b0:	bf28      	it	cs
 80053b2:	233f      	movcs	r3, #63	; 0x3f
 80053b4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <USBD_HID_Setup+0x208>)
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e015      	b.n	80053e8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	885b      	ldrh	r3, [r3, #2]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b21      	cmp	r3, #33	; 0x21
 80053c6:	d108      	bne.n	80053da <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80053c8:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <USBD_HID_Setup+0x20c>)
 80053ca:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	88db      	ldrh	r3, [r3, #6]
 80053d0:	2b09      	cmp	r3, #9
 80053d2:	bf28      	it	cs
 80053d4:	2309      	movcs	r3, #9
 80053d6:	82bb      	strh	r3, [r7, #20]
 80053d8:	e006      	b.n	80053e8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 faf8 	bl	80069d2 <USBD_CtlError>
            ret = USBD_FAIL;
 80053e2:	2303      	movs	r3, #3
 80053e4:	75fb      	strb	r3, [r7, #23]
            break;
 80053e6:	e037      	b.n	8005458 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80053e8:	8abb      	ldrh	r3, [r7, #20]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6939      	ldr	r1, [r7, #16]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fb6c 	bl	8006acc <USBD_CtlSendData>
          break;
 80053f4:	e030      	b.n	8005458 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d107      	bne.n	8005412 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3308      	adds	r3, #8
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fb5e 	bl	8006acc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005410:	e022      	b.n	8005458 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fadc 	bl	80069d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800541a:	2303      	movs	r3, #3
 800541c:	75fb      	strb	r3, [r7, #23]
          break;
 800541e:	e01b      	b.n	8005458 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b03      	cmp	r3, #3
 800542a:	d106      	bne.n	800543a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	885b      	ldrh	r3, [r3, #2]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005438:	e00e      	b.n	8005458 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fac8 	bl	80069d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005442:	2303      	movs	r3, #3
 8005444:	75fb      	strb	r3, [r7, #23]
          break;
 8005446:	e007      	b.n	8005458 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 fac1 	bl	80069d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	75fb      	strb	r3, [r7, #23]
          break;
 8005454:	e000      	b.n	8005458 <USBD_HID_Setup+0x1ec>
          break;
 8005456:	bf00      	nop
      }
      break;
 8005458:	e006      	b.n	8005468 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 fab8 	bl	80069d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005462:	2303      	movs	r3, #3
 8005464:	75fb      	strb	r3, [r7, #23]
      break;
 8005466:	bf00      	nop
  }

  return (uint8_t)ret;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000080 	.word	0x20000080
 8005478:	20000068 	.word	0x20000068

0800547c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	32b0      	adds	r2, #176	; 0xb0
 8005494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005498:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e014      	b.n	80054ce <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d10d      	bne.n	80054cc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	7b1b      	ldrb	r3, [r3, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2201      	movs	r2, #1
 80054bc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <USBD_HID_SendReport+0x5c>)
 80054c0:	7819      	ldrb	r1, [r3, #0]
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f001 ff15 	bl	80072f6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200000bf 	.word	0x200000bf

080054dc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80054e4:	2181      	movs	r1, #129	; 0x81
 80054e6:	4809      	ldr	r0, [pc, #36]	; (800550c <USBD_HID_GetFSCfgDesc+0x30>)
 80054e8:	f000 fc3b 	bl	8005d62 <USBD_GetEpDesc>
 80054ec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	220a      	movs	r2, #10
 80054f8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2222      	movs	r2, #34	; 0x22
 80054fe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000044 	.word	0x20000044

08005510 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005518:	2181      	movs	r1, #129	; 0x81
 800551a:	4809      	ldr	r0, [pc, #36]	; (8005540 <USBD_HID_GetHSCfgDesc+0x30>)
 800551c:	f000 fc21 	bl	8005d62 <USBD_GetEpDesc>
 8005520:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2207      	movs	r2, #7
 800552c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2222      	movs	r2, #34	; 0x22
 8005532:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005534:	4b02      	ldr	r3, [pc, #8]	; (8005540 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000044 	.word	0x20000044

08005544 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	4809      	ldr	r0, [pc, #36]	; (8005574 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005550:	f000 fc07 	bl	8005d62 <USBD_GetEpDesc>
 8005554:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	220a      	movs	r2, #10
 8005560:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2222      	movs	r2, #34	; 0x22
 8005566:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000044 	.word	0x20000044

08005578 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32b0      	adds	r2, #176	; 0xb0
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	2200      	movs	r2, #0
 8005594:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	220a      	movs	r2, #10
 80055b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80055b2:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000074 	.word	0x20000074

080055c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055d8:	2303      	movs	r3, #3
 80055da:	e01f      	b.n	800561c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f001 fd3b 	bl	800708c <USBD_LL_Init>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

  return ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005638:	2303      	movs	r3, #3
 800563a:	e025      	b.n	8005688 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32ae      	adds	r2, #174	; 0xae
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00f      	beq.n	8005678 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	32ae      	adds	r2, #174	; 0xae
 8005662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	f107 020e 	add.w	r2, r7, #14
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	4602      	mov	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fd43 	bl	8007124 <USBD_LL_Start>
 800569e:	4603      	mov	r3, r0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	4611      	mov	r1, r2
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	4611      	mov	r1, r2
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800571c:	2303      	movs	r3, #3
 800571e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f90e 	bl	800695e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	2b02      	cmp	r3, #2
 8005764:	d01a      	beq.n	800579c <USBD_LL_SetupStage+0x72>
 8005766:	2b02      	cmp	r3, #2
 8005768:	d822      	bhi.n	80057b0 <USBD_LL_SetupStage+0x86>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <USBD_LL_SetupStage+0x4a>
 800576e:	2b01      	cmp	r3, #1
 8005770:	d00a      	beq.n	8005788 <USBD_LL_SetupStage+0x5e>
 8005772:	e01d      	b.n	80057b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb65 	bl	8005e4c <USBD_StdDevReq>
 8005782:	4603      	mov	r3, r0
 8005784:	73fb      	strb	r3, [r7, #15]
      break;
 8005786:	e020      	b.n	80057ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fbcd 	bl	8005f30 <USBD_StdItfReq>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]
      break;
 800579a:	e016      	b.n	80057ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fc2f 	bl	8006008 <USBD_StdEPReq>
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
      break;
 80057ae:	e00c      	b.n	80057ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fd10 	bl	80071e4 <USBD_LL_StallEP>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	bf00      	nop
  }

  return ret;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	460b      	mov	r3, r1
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d16e      	bne.n	80058ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	f040 8098 	bne.w	8005930 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	429a      	cmp	r2, r3
 800580a:	d913      	bls.n	8005834 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4293      	cmp	r3, r2
 8005824:	bf28      	it	cs
 8005826:	4613      	movcs	r3, r2
 8005828:	461a      	mov	r2, r3
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f001 f979 	bl	8006b24 <USBD_CtlContinueRx>
 8005832:	e07d      	b.n	8005930 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2b02      	cmp	r3, #2
 8005840:	d014      	beq.n	800586c <USBD_LL_DataOutStage+0x98>
 8005842:	2b02      	cmp	r3, #2
 8005844:	d81d      	bhi.n	8005882 <USBD_LL_DataOutStage+0xae>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <USBD_LL_DataOutStage+0x7c>
 800584a:	2b01      	cmp	r3, #1
 800584c:	d003      	beq.n	8005856 <USBD_LL_DataOutStage+0x82>
 800584e:	e018      	b.n	8005882 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	75bb      	strb	r3, [r7, #22]
            break;
 8005854:	e018      	b.n	8005888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800585c:	b2db      	uxtb	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa64 	bl	8005d2e <USBD_CoreFindIF>
 8005866:	4603      	mov	r3, r0
 8005868:	75bb      	strb	r3, [r7, #22]
            break;
 800586a:	e00d      	b.n	8005888 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005872:	b2db      	uxtb	r3, r3
 8005874:	4619      	mov	r1, r3
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fa66 	bl	8005d48 <USBD_CoreFindEP>
 800587c:	4603      	mov	r3, r0
 800587e:	75bb      	strb	r3, [r7, #22]
            break;
 8005880:	e002      	b.n	8005888 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	75bb      	strb	r3, [r7, #22]
            break;
 8005886:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005888:	7dbb      	ldrb	r3, [r7, #22]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d119      	bne.n	80058c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d113      	bne.n	80058c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800589a:	7dba      	ldrb	r2, [r7, #22]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	32ae      	adds	r2, #174	; 0xae
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00b      	beq.n	80058c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80058aa:	7dba      	ldrb	r2, [r7, #22]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80058b2:	7dba      	ldrb	r2, [r7, #22]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	32ae      	adds	r2, #174	; 0xae
 80058b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f001 f93f 	bl	8006b46 <USBD_CtlSendStatus>
 80058c8:	e032      	b.n	8005930 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fa37 	bl	8005d48 <USBD_CoreFindEP>
 80058da:	4603      	mov	r3, r0
 80058dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058de:	7dbb      	ldrb	r3, [r7, #22]
 80058e0:	2bff      	cmp	r3, #255	; 0xff
 80058e2:	d025      	beq.n	8005930 <USBD_LL_DataOutStage+0x15c>
 80058e4:	7dbb      	ldrb	r3, [r7, #22]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d122      	bne.n	8005930 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d117      	bne.n	8005926 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058f6:	7dba      	ldrb	r2, [r7, #22]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	32ae      	adds	r2, #174	; 0xae
 80058fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005906:	7dba      	ldrb	r2, [r7, #22]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800590e:	7dba      	ldrb	r2, [r7, #22]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	32ae      	adds	r2, #174	; 0xae
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	7afa      	ldrb	r2, [r7, #11]
 800591c:	4611      	mov	r1, r2
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	4798      	blx	r3
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	e000      	b.n	8005932 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	460b      	mov	r3, r1
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d16f      	bne.n	8005a2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3314      	adds	r3, #20
 8005952:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800595a:	2b02      	cmp	r3, #2
 800595c:	d15a      	bne.n	8005a14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	429a      	cmp	r2, r3
 8005968:	d914      	bls.n	8005994 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	1ad2      	subs	r2, r2, r3
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	461a      	mov	r2, r3
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 f8be 	bl	8006b02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f001 fcd3 	bl	8007338 <USBD_LL_PrepareReceive>
 8005992:	e03f      	b.n	8005a14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	429a      	cmp	r2, r3
 800599e:	d11c      	bne.n	80059da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d316      	bcc.n	80059da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d20f      	bcs.n	80059da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f001 f89f 	bl	8006b02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059cc:	2300      	movs	r3, #0
 80059ce:	2200      	movs	r2, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f001 fcb0 	bl	8007338 <USBD_LL_PrepareReceive>
 80059d8:	e01c      	b.n	8005a14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d10f      	bne.n	8005a06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f001 fbeb 	bl	80071e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 f8ac 	bl	8006b6c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03a      	beq.n	8005a94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fe42 	bl	80056a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a2c:	e032      	b.n	8005a94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f985 	bl	8005d48 <USBD_CoreFindEP>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2bff      	cmp	r3, #255	; 0xff
 8005a46:	d025      	beq.n	8005a94 <USBD_LL_DataInStage+0x15a>
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d122      	bne.n	8005a94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d11c      	bne.n	8005a94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a5a:	7dfa      	ldrb	r2, [r7, #23]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	32ae      	adds	r2, #174	; 0xae
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a6a:	7dfa      	ldrb	r2, [r7, #23]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a72:	7dfa      	ldrb	r2, [r7, #23]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	32ae      	adds	r2, #174	; 0xae
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	7afa      	ldrb	r2, [r7, #11]
 8005a80:	4611      	mov	r1, r2
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a8a:	7dbb      	ldrb	r3, [r7, #22]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a90:	7dbb      	ldrb	r3, [r7, #22]
 8005a92:	e000      	b.n	8005a96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d014      	beq.n	8005b04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00e      	beq.n	8005b04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6852      	ldr	r2, [r2, #4]
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	4611      	mov	r1, r2
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b00:	2303      	movs	r3, #3
 8005b02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b04:	2340      	movs	r3, #64	; 0x40
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 fb25 	bl	800715a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	2200      	movs	r2, #0
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fb17 	bl	800715a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	621a      	str	r2, [r3, #32]

  return ret;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	78fa      	ldrb	r2, [r7, #3]
 8005b52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d006      	beq.n	8005b84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2204      	movs	r2, #4
 8005b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d106      	bne.n	8005bbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d110      	bne.n	8005c00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	32ae      	adds	r2, #174	; 0xae
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e01c      	b.n	8005c66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d115      	bne.n	8005c64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32ae      	adds	r2, #174	; 0xae
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	32ae      	adds	r2, #174	; 0xae
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	4611      	mov	r1, r2
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	32ae      	adds	r2, #174	; 0xae
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e01c      	b.n	8005cca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d115      	bne.n	8005cc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32ae      	adds	r2, #174	; 0xae
 8005ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32ae      	adds	r2, #174	; 0xae
 8005cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00e      	beq.n	8005d24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	4611      	mov	r1, r2
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	460b      	mov	r3, r1
 8005d38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b086      	sub	sp, #24
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	885b      	ldrh	r3, [r3, #2]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d920      	bls.n	8005dcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d92:	e013      	b.n	8005dbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d94:	f107 030a 	add.w	r3, r7, #10
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f000 f81b 	bl	8005dd6 <USBD_GetNextDesc>
 8005da0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	785b      	ldrb	r3, [r3, #1]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d108      	bne.n	8005dbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	789b      	ldrb	r3, [r3, #2]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d008      	beq.n	8005dca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	885b      	ldrh	r3, [r3, #2]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	897b      	ldrh	r3, [r7, #10]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d8e5      	bhi.n	8005d94 <USBD_GetEpDesc+0x32>
 8005dc8:	e000      	b.n	8005dcc <USBD_GetEpDesc+0x6a>
          break;
 8005dca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005dcc:	693b      	ldr	r3, [r7, #16]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3301      	adds	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e2e:	8a3b      	ldrh	r3, [r7, #16]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	b21a      	sxth	r2, r3
 8005e34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d005      	beq.n	8005e72 <USBD_StdDevReq+0x26>
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d857      	bhi.n	8005f1a <USBD_StdDevReq+0xce>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <USBD_StdDevReq+0x42>
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d153      	bne.n	8005f1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	32ae      	adds	r2, #174	; 0xae
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e04a      	b.n	8005f24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d83b      	bhi.n	8005f0e <USBD_StdDevReq+0xc2>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USBD_StdDevReq+0x50>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005f0f 	.word	0x08005f0f
 8005ea8:	08005efb 	.word	0x08005efb
 8005eac:	08005f0f 	.word	0x08005f0f
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005f0f 	.word	0x08005f0f
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ed9 	.word	0x08005ed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa3c 	bl	8006344 <USBD_GetDescriptor>
          break;
 8005ecc:	e024      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fba1 	bl	8006618 <USBD_SetAddress>
          break;
 8005ed6:	e01f      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fbe0 	bl	80066a0 <USBD_SetConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ee4:	e018      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fc83 	bl	80067f4 <USBD_GetConfig>
          break;
 8005eee:	e013      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fcb4 	bl	8006860 <USBD_GetStatus>
          break;
 8005ef8:	e00e      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005efa:	6839      	ldr	r1, [r7, #0]
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fce3 	bl	80068c8 <USBD_SetFeature>
          break;
 8005f02:	e009      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fd07 	bl	800691a <USBD_ClrFeature>
          break;
 8005f0c:	e004      	b.n	8005f18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fd5e 	bl	80069d2 <USBD_CtlError>
          break;
 8005f16:	bf00      	nop
      }
      break;
 8005f18:	e004      	b.n	8005f24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fd58 	bl	80069d2 <USBD_CtlError>
      break;
 8005f22:	bf00      	nop
  }

  return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop

08005f30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d005      	beq.n	8005f56 <USBD_StdItfReq+0x26>
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d852      	bhi.n	8005ff4 <USBD_StdItfReq+0xc4>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <USBD_StdItfReq+0x26>
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d14e      	bne.n	8005ff4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d840      	bhi.n	8005fe6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	889b      	ldrh	r3, [r3, #4]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d836      	bhi.n	8005fdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	889b      	ldrh	r3, [r3, #4]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fed9 	bl	8005d2e <USBD_CoreFindIF>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	2bff      	cmp	r3, #255	; 0xff
 8005f84:	d01d      	beq.n	8005fc2 <USBD_StdItfReq+0x92>
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d11a      	bne.n	8005fc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f8c:	7bba      	ldrb	r2, [r7, #14]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	32ae      	adds	r2, #174	; 0xae
 8005f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00f      	beq.n	8005fbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f9c:	7bba      	ldrb	r2, [r7, #14]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fa4:	7bba      	ldrb	r2, [r7, #14]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	; 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fba:	e004      	b.n	8005fc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fc0:	e001      	b.n	8005fc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	88db      	ldrh	r3, [r3, #6]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d110      	bne.n	8005ff0 <USBD_StdItfReq+0xc0>
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fdb6 	bl	8006b46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005fda:	e009      	b.n	8005ff0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fcf7 	bl	80069d2 <USBD_CtlError>
          break;
 8005fe4:	e004      	b.n	8005ff0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fcf2 	bl	80069d2 <USBD_CtlError>
          break;
 8005fee:	e000      	b.n	8005ff2 <USBD_StdItfReq+0xc2>
          break;
 8005ff0:	bf00      	nop
      }
      break;
 8005ff2:	e004      	b.n	8005ffe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fceb 	bl	80069d2 <USBD_CtlError>
      break;
 8005ffc:	bf00      	nop
  }

  return ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	889b      	ldrh	r3, [r3, #4]
 800601a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d007      	beq.n	8006038 <USBD_StdEPReq+0x30>
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	f200 817f 	bhi.w	800632c <USBD_StdEPReq+0x324>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02a      	beq.n	8006088 <USBD_StdEPReq+0x80>
 8006032:	2b20      	cmp	r3, #32
 8006034:	f040 817a 	bne.w	800632c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff fe83 	bl	8005d48 <USBD_CoreFindEP>
 8006042:	4603      	mov	r3, r0
 8006044:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006046:	7b7b      	ldrb	r3, [r7, #13]
 8006048:	2bff      	cmp	r3, #255	; 0xff
 800604a:	f000 8174 	beq.w	8006336 <USBD_StdEPReq+0x32e>
 800604e:	7b7b      	ldrb	r3, [r7, #13]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 8170 	bne.w	8006336 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006056:	7b7a      	ldrb	r2, [r7, #13]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800605e:	7b7a      	ldrb	r2, [r7, #13]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	32ae      	adds	r2, #174	; 0xae
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8163 	beq.w	8006336 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006070:	7b7a      	ldrb	r2, [r7, #13]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	32ae      	adds	r2, #174	; 0xae
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006086:	e156      	b.n	8006336 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d008      	beq.n	80060a2 <USBD_StdEPReq+0x9a>
 8006090:	2b03      	cmp	r3, #3
 8006092:	f300 8145 	bgt.w	8006320 <USBD_StdEPReq+0x318>
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 809b 	beq.w	80061d2 <USBD_StdEPReq+0x1ca>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d03c      	beq.n	800611a <USBD_StdEPReq+0x112>
 80060a0:	e13e      	b.n	8006320 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d002      	beq.n	80060b4 <USBD_StdEPReq+0xac>
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d016      	beq.n	80060e0 <USBD_StdEPReq+0xd8>
 80060b2:	e02c      	b.n	800610e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <USBD_StdEPReq+0xce>
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d00a      	beq.n	80060d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f88d 	bl	80071e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 f889 	bl	80071e4 <USBD_LL_StallEP>
 80060d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d4:	e020      	b.n	8006118 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fc7a 	bl	80069d2 <USBD_CtlError>
              break;
 80060de:	e01b      	b.n	8006118 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	885b      	ldrh	r3, [r3, #2]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10e      	bne.n	8006106 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <USBD_StdEPReq+0xfe>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d008      	beq.n	8006106 <USBD_StdEPReq+0xfe>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	88db      	ldrh	r3, [r3, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f86f 	bl	80071e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fd1d 	bl	8006b46 <USBD_CtlSendStatus>

              break;
 800610c:	e004      	b.n	8006118 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fc5e 	bl	80069d2 <USBD_CtlError>
              break;
 8006116:	bf00      	nop
          }
          break;
 8006118:	e107      	b.n	800632a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0x124>
 8006126:	2b03      	cmp	r3, #3
 8006128:	d016      	beq.n	8006158 <USBD_StdEPReq+0x150>
 800612a:	e04b      	b.n	80061c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <USBD_StdEPReq+0x146>
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d00a      	beq.n	800614e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f851 	bl	80071e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f84d 	bl	80071e4 <USBD_LL_StallEP>
 800614a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800614c:	e040      	b.n	80061d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fc3e 	bl	80069d2 <USBD_CtlError>
              break;
 8006156:	e03b      	b.n	80061d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d136      	bne.n	80061ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f857 	bl	8007222 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fce6 	bl	8006b46 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fde2 	bl	8005d48 <USBD_CoreFindEP>
 8006184:	4603      	mov	r3, r0
 8006186:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006188:	7b7b      	ldrb	r3, [r7, #13]
 800618a:	2bff      	cmp	r3, #255	; 0xff
 800618c:	d01f      	beq.n	80061ce <USBD_StdEPReq+0x1c6>
 800618e:	7b7b      	ldrb	r3, [r7, #13]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11c      	bne.n	80061ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006194:	7b7a      	ldrb	r2, [r7, #13]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800619c:	7b7a      	ldrb	r2, [r7, #13]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32ae      	adds	r2, #174	; 0xae
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d010      	beq.n	80061ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061ac:	7b7a      	ldrb	r2, [r7, #13]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32ae      	adds	r2, #174	; 0xae
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80061c2:	e004      	b.n	80061ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fc03 	bl	80069d2 <USBD_CtlError>
              break;
 80061cc:	e000      	b.n	80061d0 <USBD_StdEPReq+0x1c8>
              break;
 80061ce:	bf00      	nop
          }
          break;
 80061d0:	e0ab      	b.n	800632a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d002      	beq.n	80061e4 <USBD_StdEPReq+0x1dc>
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d032      	beq.n	8006248 <USBD_StdEPReq+0x240>
 80061e2:	e097      	b.n	8006314 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <USBD_StdEPReq+0x1f2>
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d004      	beq.n	80061fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fbed 	bl	80069d2 <USBD_CtlError>
                break;
 80061f8:	e091      	b.n	800631e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da0b      	bge.n	800621a <USBD_StdEPReq+0x212>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	3310      	adds	r3, #16
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4413      	add	r3, r2
 8006216:	3304      	adds	r3, #4
 8006218:	e00b      	b.n	8006232 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2202      	movs	r2, #2
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fc43 	bl	8006acc <USBD_CtlSendData>
              break;
 8006246:	e06a      	b.n	800631e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800624c:	2b00      	cmp	r3, #0
 800624e:	da11      	bge.n	8006274 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	3324      	adds	r3, #36	; 0x24
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d117      	bne.n	800629a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fbb0 	bl	80069d2 <USBD_CtlError>
                  break;
 8006272:	e054      	b.n	800631e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	f003 020f 	and.w	r2, r3, #15
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb9d 	bl	80069d2 <USBD_CtlError>
                  break;
 8006298:	e041      	b.n	800631e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800629a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da0b      	bge.n	80062ba <USBD_StdEPReq+0x2b2>
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	3310      	adds	r3, #16
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	3304      	adds	r3, #4
 80062b8:	e00b      	b.n	80062d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062ba:	7bbb      	ldrb	r3, [r7, #14]
 80062bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4413      	add	r3, r2
 80062d0:	3304      	adds	r3, #4
 80062d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <USBD_StdEPReq+0x2d8>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d103      	bne.n	80062e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	e00e      	b.n	8006306 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 ffb7 	bl	8007260 <USBD_LL_IsStallEP>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e002      	b.n	8006306 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2202      	movs	r2, #2
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fbdd 	bl	8006acc <USBD_CtlSendData>
              break;
 8006312:	e004      	b.n	800631e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fb5b 	bl	80069d2 <USBD_CtlError>
              break;
 800631c:	bf00      	nop
          }
          break;
 800631e:	e004      	b.n	800632a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fb55 	bl	80069d2 <USBD_CtlError>
          break;
 8006328:	bf00      	nop
      }
      break;
 800632a:	e005      	b.n	8006338 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb4f 	bl	80069d2 <USBD_CtlError>
      break;
 8006334:	e000      	b.n	8006338 <USBD_StdEPReq+0x330>
      break;
 8006336:	bf00      	nop
  }

  return ret;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	885b      	ldrh	r3, [r3, #2]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	2b06      	cmp	r3, #6
 8006366:	f200 8128 	bhi.w	80065ba <USBD_GetDescriptor+0x276>
 800636a:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <USBD_GetDescriptor+0x2c>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	0800638d 	.word	0x0800638d
 8006374:	080063a5 	.word	0x080063a5
 8006378:	080063e5 	.word	0x080063e5
 800637c:	080065bb 	.word	0x080065bb
 8006380:	080065bb 	.word	0x080065bb
 8006384:	0800655b 	.word	0x0800655b
 8006388:	08006587 	.word	0x08006587
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	7c12      	ldrb	r2, [r2, #16]
 8006398:	f107 0108 	add.w	r1, r7, #8
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
 80063a0:	60f8      	str	r0, [r7, #12]
      break;
 80063a2:	e112      	b.n	80065ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	7c1b      	ldrb	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b4:	f107 0208 	add.w	r2, r7, #8
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	2202      	movs	r2, #2
 80063c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063c6:	e100      	b.n	80065ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	f107 0208 	add.w	r2, r7, #8
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
 80063d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	2202      	movs	r2, #2
 80063e0:	701a      	strb	r2, [r3, #0]
      break;
 80063e2:	e0f2      	b.n	80065ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	885b      	ldrh	r3, [r3, #2]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b05      	cmp	r3, #5
 80063ec:	f200 80ac 	bhi.w	8006548 <USBD_GetDescriptor+0x204>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USBD_GetDescriptor+0xb4>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006411 	.word	0x08006411
 80063fc:	08006445 	.word	0x08006445
 8006400:	08006479 	.word	0x08006479
 8006404:	080064ad 	.word	0x080064ad
 8006408:	080064e1 	.word	0x080064e1
 800640c:	08006515 	.word	0x08006515
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	7c12      	ldrb	r2, [r2, #16]
 8006428:	f107 0108 	add.w	r1, r7, #8
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006432:	e091      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 facb 	bl	80069d2 <USBD_CtlError>
            err++;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	3301      	adds	r3, #1
 8006440:	72fb      	strb	r3, [r7, #11]
          break;
 8006442:	e089      	b.n	8006558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7c12      	ldrb	r2, [r2, #16]
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006466:	e077      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fab1 	bl	80069d2 <USBD_CtlError>
            err++;
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	3301      	adds	r3, #1
 8006474:	72fb      	strb	r3, [r7, #11]
          break;
 8006476:	e06f      	b.n	8006558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	7c12      	ldrb	r2, [r2, #16]
 8006490:	f107 0108 	add.w	r1, r7, #8
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800649a:	e05d      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa97 	bl	80069d2 <USBD_CtlError>
            err++;
 80064a4:	7afb      	ldrb	r3, [r7, #11]
 80064a6:	3301      	adds	r3, #1
 80064a8:	72fb      	strb	r3, [r7, #11]
          break;
 80064aa:	e055      	b.n	8006558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	7c12      	ldrb	r2, [r2, #16]
 80064c4:	f107 0108 	add.w	r1, r7, #8
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ce:	e043      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fa7d 	bl	80069d2 <USBD_CtlError>
            err++;
 80064d8:	7afb      	ldrb	r3, [r7, #11]
 80064da:	3301      	adds	r3, #1
 80064dc:	72fb      	strb	r3, [r7, #11]
          break;
 80064de:	e03b      	b.n	8006558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	7c12      	ldrb	r2, [r2, #16]
 80064f8:	f107 0108 	add.w	r1, r7, #8
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
 8006500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006502:	e029      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa63 	bl	80069d2 <USBD_CtlError>
            err++;
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	3301      	adds	r3, #1
 8006510:	72fb      	strb	r3, [r7, #11]
          break;
 8006512:	e021      	b.n	8006558 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	7c12      	ldrb	r2, [r2, #16]
 800652c:	f107 0108 	add.w	r1, r7, #8
 8006530:	4610      	mov	r0, r2
 8006532:	4798      	blx	r3
 8006534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006536:	e00f      	b.n	8006558 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa49 	bl	80069d2 <USBD_CtlError>
            err++;
 8006540:	7afb      	ldrb	r3, [r7, #11]
 8006542:	3301      	adds	r3, #1
 8006544:	72fb      	strb	r3, [r7, #11]
          break;
 8006546:	e007      	b.n	8006558 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa41 	bl	80069d2 <USBD_CtlError>
          err++;
 8006550:	7afb      	ldrb	r3, [r7, #11]
 8006552:	3301      	adds	r3, #1
 8006554:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e037      	b.n	80065ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	7c1b      	ldrb	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	f107 0208 	add.w	r2, r7, #8
 800656e:	4610      	mov	r0, r2
 8006570:	4798      	blx	r3
 8006572:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006574:	e029      	b.n	80065ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fa2a 	bl	80069d2 <USBD_CtlError>
        err++;
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	3301      	adds	r3, #1
 8006582:	72fb      	strb	r3, [r7, #11]
      break;
 8006584:	e021      	b.n	80065ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7c1b      	ldrb	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f107 0208 	add.w	r2, r7, #8
 800659a:	4610      	mov	r0, r2
 800659c:	4798      	blx	r3
 800659e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	2207      	movs	r2, #7
 80065a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065a8:	e00f      	b.n	80065ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa10 	bl	80069d2 <USBD_CtlError>
        err++;
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	3301      	adds	r3, #1
 80065b6:	72fb      	strb	r3, [r7, #11]
      break;
 80065b8:	e007      	b.n	80065ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa08 	bl	80069d2 <USBD_CtlError>
      err++;
 80065c2:	7afb      	ldrb	r3, [r7, #11]
 80065c4:	3301      	adds	r3, #1
 80065c6:	72fb      	strb	r3, [r7, #11]
      break;
 80065c8:	bf00      	nop
  }

  if (err != 0U)
 80065ca:	7afb      	ldrb	r3, [r7, #11]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d11e      	bne.n	800660e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	88db      	ldrh	r3, [r3, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d016      	beq.n	8006606 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065d8:	893b      	ldrh	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	88da      	ldrh	r2, [r3, #6]
 80065e2:	893b      	ldrh	r3, [r7, #8]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bf28      	it	cs
 80065e8:	4613      	movcs	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065ee:	893b      	ldrh	r3, [r7, #8]
 80065f0:	461a      	mov	r2, r3
 80065f2:	68f9      	ldr	r1, [r7, #12]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fa69 	bl	8006acc <USBD_CtlSendData>
 80065fa:	e009      	b.n	8006610 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9e7 	bl	80069d2 <USBD_CtlError>
 8006604:	e004      	b.n	8006610 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa9d 	bl	8006b46 <USBD_CtlSendStatus>
 800660c:	e000      	b.n	8006610 <USBD_GetDescriptor+0x2cc>
    return;
 800660e:	bf00      	nop
  }
}
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	889b      	ldrh	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d131      	bne.n	800668e <USBD_SetAddress+0x76>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	88db      	ldrh	r3, [r3, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d12d      	bne.n	800668e <USBD_SetAddress+0x76>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	2b7f      	cmp	r3, #127	; 0x7f
 8006638:	d829      	bhi.n	800668e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006644:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d104      	bne.n	800665c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9bc 	bl	80069d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665a:	e01d      	b.n	8006698 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fe25 	bl	80072b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa69 	bl	8006b46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006682:	e009      	b.n	8006698 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668c:	e004      	b.n	8006698 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f99e 	bl	80069d2 <USBD_CtlError>
  }
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	885b      	ldrh	r3, [r3, #2]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	4b4e      	ldr	r3, [pc, #312]	; (80067f0 <USBD_SetConfig+0x150>)
 80066b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066b8:	4b4d      	ldr	r3, [pc, #308]	; (80067f0 <USBD_SetConfig+0x150>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d905      	bls.n	80066cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f985 	bl	80069d2 <USBD_CtlError>
    return USBD_FAIL;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e08c      	b.n	80067e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d002      	beq.n	80066de <USBD_SetConfig+0x3e>
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d029      	beq.n	8006730 <USBD_SetConfig+0x90>
 80066dc:	e075      	b.n	80067ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066de:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <USBD_SetConfig+0x150>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d020      	beq.n	8006728 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066e6:	4b42      	ldr	r3, [pc, #264]	; (80067f0 <USBD_SetConfig+0x150>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066f0:	4b3f      	ldr	r3, [pc, #252]	; (80067f0 <USBD_SetConfig+0x150>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fe ffe1 	bl	80056be <USBD_SetClassConfig>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f962 	bl	80069d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006716:	e065      	b.n	80067e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa14 	bl	8006b46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2203      	movs	r2, #3
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006726:	e05d      	b.n	80067e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa0c 	bl	8006b46 <USBD_CtlSendStatus>
      break;
 800672e:	e059      	b.n	80067e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006730:	4b2f      	ldr	r3, [pc, #188]	; (80067f0 <USBD_SetConfig+0x150>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d112      	bne.n	800675e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006740:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <USBD_SetConfig+0x150>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800674a:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <USBD_SetConfig+0x150>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fe ffd0 	bl	80056f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9f5 	bl	8006b46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800675c:	e042      	b.n	80067e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <USBD_SetConfig+0x150>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d02a      	beq.n	80067c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fe ffbe 	bl	80056f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <USBD_SetConfig+0x150>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <USBD_SetConfig+0x150>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fe ff97 	bl	80056be <USBD_SetClassConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00f      	beq.n	80067ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f918 	bl	80069d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fe ffa3 	bl	80056f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067b8:	e014      	b.n	80067e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9c3 	bl	8006b46 <USBD_CtlSendStatus>
      break;
 80067c0:	e010      	b.n	80067e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9bf 	bl	8006b46 <USBD_CtlSendStatus>
      break;
 80067c8:	e00c      	b.n	80067e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f900 	bl	80069d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <USBD_SetConfig+0x150>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fe ff8c 	bl	80056f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	73fb      	strb	r3, [r7, #15]
      break;
 80067e2:	bf00      	nop
  }

  return ret;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000220 	.word	0x20000220

080067f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	88db      	ldrh	r3, [r3, #6]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d004      	beq.n	8006810 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f8e2 	bl	80069d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800680e:	e023      	b.n	8006858 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	dc02      	bgt.n	8006822 <USBD_GetConfig+0x2e>
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc03      	bgt.n	8006828 <USBD_GetConfig+0x34>
 8006820:	e015      	b.n	800684e <USBD_GetConfig+0x5a>
 8006822:	2b03      	cmp	r3, #3
 8006824:	d00b      	beq.n	800683e <USBD_GetConfig+0x4a>
 8006826:	e012      	b.n	800684e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3308      	adds	r3, #8
 8006832:	2201      	movs	r2, #1
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f948 	bl	8006acc <USBD_CtlSendData>
        break;
 800683c:	e00c      	b.n	8006858 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3304      	adds	r3, #4
 8006842:	2201      	movs	r2, #1
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f940 	bl	8006acc <USBD_CtlSendData>
        break;
 800684c:	e004      	b.n	8006858 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f8be 	bl	80069d2 <USBD_CtlError>
        break;
 8006856:	bf00      	nop
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2db      	uxtb	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	2b02      	cmp	r3, #2
 8006876:	d81e      	bhi.n	80068b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	88db      	ldrh	r3, [r3, #6]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d004      	beq.n	800688a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f8a5 	bl	80069d2 <USBD_CtlError>
        break;
 8006888:	e01a      	b.n	80068c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f043 0202 	orr.w	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	330c      	adds	r3, #12
 80068aa:	2202      	movs	r2, #2
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f90c 	bl	8006acc <USBD_CtlSendData>
      break;
 80068b4:	e004      	b.n	80068c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f88a 	bl	80069d2 <USBD_CtlError>
      break;
 80068be:	bf00      	nop
  }
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d107      	bne.n	80068ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f92f 	bl	8006b46 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068e8:	e013      	b.n	8006912 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d10b      	bne.n	800690a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	889b      	ldrh	r3, [r3, #4]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f91f 	bl	8006b46 <USBD_CtlSendStatus>
}
 8006908:	e003      	b.n	8006912 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f860 	bl	80069d2 <USBD_CtlError>
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692a:	b2db      	uxtb	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	2b02      	cmp	r3, #2
 8006930:	d80b      	bhi.n	800694a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d10c      	bne.n	8006954 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f8ff 	bl	8006b46 <USBD_CtlSendStatus>
      }
      break;
 8006948:	e004      	b.n	8006954 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f840 	bl	80069d2 <USBD_CtlError>
      break;
 8006952:	e000      	b.n	8006956 <USBD_ClrFeature+0x3c>
      break;
 8006954:	bf00      	nop
  }
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	781a      	ldrb	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fa41 	bl	8005e10 <SWAPBYTE>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff fa34 	bl	8005e10 <SWAPBYTE>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fa27 	bl	8005e10 <SWAPBYTE>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	80da      	strh	r2, [r3, #6]
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069dc:	2180      	movs	r1, #128	; 0x80
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fc00 	bl	80071e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fbfc 	bl	80071e4 <USBD_LL_StallEP>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d042      	beq.n	8006a90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006a0e:	6938      	ldr	r0, [r7, #16]
 8006a10:	f000 f842 	bl	8006a98 <USBD_GetLen>
 8006a14:	4603      	mov	r3, r0
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1e:	d808      	bhi.n	8006a32 <USBD_GetString+0x3e>
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f000 f839 	bl	8006a98 <USBD_GetLen>
 8006a26:	4603      	mov	r3, r0
 8006a28:	3301      	adds	r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	e001      	b.n	8006a36 <USBD_GetString+0x42>
 8006a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	4413      	add	r3, r2
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4413      	add	r3, r2
 8006a52:	2203      	movs	r2, #3
 8006a54:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a5c:	e013      	b.n	8006a86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4413      	add	r3, r2
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	7812      	ldrb	r2, [r2, #0]
 8006a68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]
    idx++;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	3301      	adds	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	3301      	adds	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e7      	bne.n	8006a5e <USBD_GetString+0x6a>
 8006a8e:	e000      	b.n	8006a92 <USBD_GetString+0x9e>
    return;
 8006a90:	bf00      	nop
  }
}
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006aa8:	e005      	b.n	8006ab6 <USBD_GetLen+0x1e>
  {
    len++;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	3301      	adds	r3, #1
 8006aae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f5      	bne.n	8006aaa <USBD_GetLen+0x12>
  }

  return len;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	2100      	movs	r1, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fbff 	bl	80072f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	2100      	movs	r1, #0
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fbee 	bl	80072f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fbfe 	bl	8007338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2204      	movs	r2, #4
 8006b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b56:	2300      	movs	r3, #0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbca 	bl	80072f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2205      	movs	r2, #5
 8006b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2100      	movs	r1, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fbd8 	bl	8007338 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	490e      	ldr	r1, [pc, #56]	; (8006bd4 <MX_USB_DEVICE_Init+0x40>)
 8006b9c:	480e      	ldr	r0, [pc, #56]	; (8006bd8 <MX_USB_DEVICE_Init+0x44>)
 8006b9e:	f7fe fd11 	bl	80055c4 <USBD_Init>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ba8:	f7fa f822 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006bac:	490b      	ldr	r1, [pc, #44]	; (8006bdc <MX_USB_DEVICE_Init+0x48>)
 8006bae:	480a      	ldr	r0, [pc, #40]	; (8006bd8 <MX_USB_DEVICE_Init+0x44>)
 8006bb0:	f7fe fd38 	bl	8005624 <USBD_RegisterClass>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bba:	f7fa f819 	bl	8000bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bbe:	4806      	ldr	r0, [pc, #24]	; (8006bd8 <MX_USB_DEVICE_Init+0x44>)
 8006bc0:	f7fe fd66 	bl	8005690 <USBD_Start>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006bca:	f7fa f811 	bl	8000bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bce:	bf00      	nop
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200000c0 	.word	0x200000c0
 8006bd8:	20000224 	.word	0x20000224
 8006bdc:	2000000c 	.word	0x2000000c

08006be0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2212      	movs	r2, #18
 8006bf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	200000dc 	.word	0x200000dc

08006c04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2204      	movs	r2, #4
 8006c14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	200000f0 	.word	0x200000f0

08006c28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d105      	bne.n	8006c46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	4907      	ldr	r1, [pc, #28]	; (8006c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c3e:	4808      	ldr	r0, [pc, #32]	; (8006c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c40:	f7ff fed8 	bl	80069f4 <USBD_GetString>
 8006c44:	e004      	b.n	8006c50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	4904      	ldr	r1, [pc, #16]	; (8006c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c4a:	4805      	ldr	r0, [pc, #20]	; (8006c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c4c:	f7ff fed2 	bl	80069f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c50:	4b02      	ldr	r3, [pc, #8]	; (8006c5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000500 	.word	0x20000500
 8006c60:	080074b8 	.word	0x080074b8

08006c64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	4904      	ldr	r1, [pc, #16]	; (8006c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c74:	4804      	ldr	r0, [pc, #16]	; (8006c88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c76:	f7ff febd 	bl	80069f4 <USBD_GetString>
  return USBD_StrDesc;
 8006c7a:	4b02      	ldr	r3, [pc, #8]	; (8006c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000500 	.word	0x20000500
 8006c88:	080074d0 	.word	0x080074d0

08006c8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	221a      	movs	r2, #26
 8006c9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c9e:	f000 f843 	bl	8006d28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ca2:	4b02      	ldr	r3, [pc, #8]	; (8006cac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	200000f4 	.word	0x200000f4

08006cb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d105      	bne.n	8006cce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	4907      	ldr	r1, [pc, #28]	; (8006ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cc6:	4808      	ldr	r0, [pc, #32]	; (8006ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cc8:	f7ff fe94 	bl	80069f4 <USBD_GetString>
 8006ccc:	e004      	b.n	8006cd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	4904      	ldr	r1, [pc, #16]	; (8006ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cd2:	4805      	ldr	r0, [pc, #20]	; (8006ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006cd4:	f7ff fe8e 	bl	80069f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006cd8:	4b02      	ldr	r3, [pc, #8]	; (8006ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000500 	.word	0x20000500
 8006ce8:	080074e4 	.word	0x080074e4

08006cec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	6039      	str	r1, [r7, #0]
 8006cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006cf8:	79fb      	ldrb	r3, [r7, #7]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d105      	bne.n	8006d0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	4907      	ldr	r1, [pc, #28]	; (8006d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d02:	4808      	ldr	r0, [pc, #32]	; (8006d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d04:	f7ff fe76 	bl	80069f4 <USBD_GetString>
 8006d08:	e004      	b.n	8006d14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d0e:	4805      	ldr	r0, [pc, #20]	; (8006d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d10:	f7ff fe70 	bl	80069f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000500 	.word	0x20000500
 8006d24:	080074f0 	.word	0x080074f0

08006d28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d2e:	4b0f      	ldr	r3, [pc, #60]	; (8006d6c <Get_SerialNum+0x44>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d34:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <Get_SerialNum+0x48>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <Get_SerialNum+0x4c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d4e:	2208      	movs	r2, #8
 8006d50:	4909      	ldr	r1, [pc, #36]	; (8006d78 <Get_SerialNum+0x50>)
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f814 	bl	8006d80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d58:	2204      	movs	r2, #4
 8006d5a:	4908      	ldr	r1, [pc, #32]	; (8006d7c <Get_SerialNum+0x54>)
 8006d5c:	68b8      	ldr	r0, [r7, #8]
 8006d5e:	f000 f80f 	bl	8006d80 <IntToUnicode>
  }
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	1fff7a10 	.word	0x1fff7a10
 8006d70:	1fff7a14 	.word	0x1fff7a14
 8006d74:	1fff7a18 	.word	0x1fff7a18
 8006d78:	200000f6 	.word	0x200000f6
 8006d7c:	20000106 	.word	0x20000106

08006d80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
 8006d96:	e027      	b.n	8006de8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	0f1b      	lsrs	r3, r3, #28
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d80b      	bhi.n	8006db8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	0f1b      	lsrs	r3, r3, #28
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	4619      	mov	r1, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	440b      	add	r3, r1
 8006db0:	3230      	adds	r2, #48	; 0x30
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e00a      	b.n	8006dce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	0f1b      	lsrs	r3, r3, #28
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3237      	adds	r2, #55	; 0x37
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	3301      	adds	r3, #1
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	3301      	adds	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
 8006de8:	7dfa      	ldrb	r2, [r7, #23]
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3d3      	bcc.n	8006d98 <IntToUnicode+0x18>
  }
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	605a      	str	r2, [r3, #4]
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e20:	d13a      	bne.n	8006e98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	6313      	str	r3, [r2, #48]	; 0x30
 8006e32:	4b1b      	ldr	r3, [pc, #108]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e44:	2302      	movs	r3, #2
 8006e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e50:	230a      	movs	r3, #10
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4812      	ldr	r0, [pc, #72]	; (8006ea4 <HAL_PCD_MspInit+0xa4>)
 8006e5c:	f7fa f980 	bl	8001160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	4a0e      	ldr	r2, [pc, #56]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6a:	6353      	str	r3, [r2, #52]	; 0x34
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e74:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e7c:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <HAL_PCD_MspInit+0xa0>)
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	2043      	movs	r0, #67	; 0x43
 8006e8e:	f7fa f930 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e92:	2043      	movs	r0, #67	; 0x43
 8006e94:	f7fa f949 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e98:	bf00      	nop
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40020000 	.word	0x40020000

08006ea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fe fc33 	bl	800572a <USBD_LL_SetupStage>
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	78fb      	ldrb	r3, [r7, #3]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f7fe fc6d 	bl	80057d4 <USBD_LL_DataOutStage>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3320      	adds	r3, #32
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f7fe fd06 	bl	800593a <USBD_LL_DataInStage>
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fe40 	bl	8005bca <USBD_LL_SOF>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	79db      	ldrb	r3, [r3, #7]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	e008      	b.n	8006f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	79db      	ldrb	r3, [r3, #7]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d102      	bne.n	8006f7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
 8006f78:	e001      	b.n	8006f7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f7a:	f7f9 fe39 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006f84:	7bfa      	ldrb	r2, [r7, #15]
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fdda 	bl	8005b42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fd82 	bl	8005a9e <USBD_LL_Reset>
}
 8006f9a:	bf00      	nop
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fdd5 	bl	8005b62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7adb      	ldrb	r3, [r3, #11]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <HAL_PCD_SuspendCallback+0x48>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	4a03      	ldr	r2, [pc, #12]	; (8006fec <HAL_PCD_SuspendCallback+0x48>)
 8006fde:	f043 0306 	orr.w	r3, r3, #6
 8006fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	e000ed00 	.word	0xe000ed00

08006ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fdcb 	bl	8005b9a <USBD_LL_Resume>
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fe23 	bl	8005c6e <USBD_LL_IsoOUTIncomplete>
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007042:	78fa      	ldrb	r2, [r7, #3]
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fddf 	bl	8005c0a <USBD_LL_IsoINIncomplete>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fe35 	bl	8005cd2 <USBD_LL_DevConnected>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fe32 	bl	8005ce8 <USBD_LL_DevDisconnected>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d13c      	bne.n	8007116 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800709c:	4a20      	ldr	r2, [pc, #128]	; (8007120 <USBD_LL_Init+0x94>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <USBD_LL_Init+0x94>)
 80070a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070ac:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <USBD_LL_Init+0x94>)
 80070ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <USBD_LL_Init+0x94>)
 80070b6:	2204      	movs	r2, #4
 80070b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80070ba:	4b19      	ldr	r3, [pc, #100]	; (8007120 <USBD_LL_Init+0x94>)
 80070bc:	2202      	movs	r2, #2
 80070be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80070c0:	4b17      	ldr	r3, [pc, #92]	; (8007120 <USBD_LL_Init+0x94>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <USBD_LL_Init+0x94>)
 80070c8:	2202      	movs	r2, #2
 80070ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80070cc:	4b14      	ldr	r3, [pc, #80]	; (8007120 <USBD_LL_Init+0x94>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80070d2:	4b13      	ldr	r3, [pc, #76]	; (8007120 <USBD_LL_Init+0x94>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <USBD_LL_Init+0x94>)
 80070da:	2200      	movs	r2, #0
 80070dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80070de:	4b10      	ldr	r3, [pc, #64]	; (8007120 <USBD_LL_Init+0x94>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <USBD_LL_Init+0x94>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80070ea:	480d      	ldr	r0, [pc, #52]	; (8007120 <USBD_LL_Init+0x94>)
 80070ec:	f7fa fb32 	bl	8001754 <HAL_PCD_Init>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80070f6:	f7f9 fd7b 	bl	8000bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	4808      	ldr	r0, [pc, #32]	; (8007120 <USBD_LL_Init+0x94>)
 80070fe:	f7fb fd46 	bl	8002b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	2100      	movs	r1, #0
 8007106:	4806      	ldr	r0, [pc, #24]	; (8007120 <USBD_LL_Init+0x94>)
 8007108:	f7fb fcfa 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800710c:	2280      	movs	r2, #128	; 0x80
 800710e:	2101      	movs	r1, #1
 8007110:	4803      	ldr	r0, [pc, #12]	; (8007120 <USBD_LL_Init+0x94>)
 8007112:	f7fb fcf5 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000700 	.word	0x20000700

08007124 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800713a:	4618      	mov	r0, r3
 800713c:	f7fa fc19 	bl	8001972 <HAL_PCD_Start>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f930 	bl	80073ac <USBD_Get_USB_Status>
 800714c:	4603      	mov	r3, r0
 800714e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007150:	7bbb      	ldrb	r3, [r7, #14]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	461a      	mov	r2, r3
 8007168:	4603      	mov	r3, r0
 800716a:	70fb      	strb	r3, [r7, #3]
 800716c:	460b      	mov	r3, r1
 800716e:	70bb      	strb	r3, [r7, #2]
 8007170:	4613      	mov	r3, r2
 8007172:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007182:	78bb      	ldrb	r3, [r7, #2]
 8007184:	883a      	ldrh	r2, [r7, #0]
 8007186:	78f9      	ldrb	r1, [r7, #3]
 8007188:	f7fb f8ed 	bl	8002366 <HAL_PCD_EP_Open>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f90a 	bl	80073ac <USBD_Get_USB_Status>
 8007198:	4603      	mov	r3, r0
 800719a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800719c:	7bbb      	ldrb	r3, [r7, #14]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	4611      	mov	r1, r2
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fb f938 	bl	800243a <HAL_PCD_EP_Close>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 f8eb 	bl	80073ac <USBD_Get_USB_Status>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071da:	7bbb      	ldrb	r3, [r7, #14]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7fb f9d8 	bl	80025b8 <HAL_PCD_EP_SetStall>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f8cc 	bl	80073ac <USBD_Get_USB_Status>
 8007214:	4603      	mov	r3, r0
 8007216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007218:	7bbb      	ldrb	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f7fb fa1c 	bl	800267e <HAL_PCD_EP_ClrStall>
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f8ad 	bl	80073ac <USBD_Get_USB_Status>
 8007252:	4603      	mov	r3, r0
 8007254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007256:	7bbb      	ldrb	r3, [r7, #14]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007272:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da0b      	bge.n	8007294 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	3316      	adds	r3, #22
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	e00b      	b.n	80072ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	f203 2356 	addw	r3, r3, #598	; 0x256
 80072aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fb f821 	bl	800231e <HAL_PCD_SetAddress>
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f862 	bl	80073ac <USBD_Get_USB_Status>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	460b      	mov	r3, r1
 8007304:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007314:	7af9      	ldrb	r1, [r7, #11]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	f7fb f913 	bl	8002544 <HAL_PCD_EP_Transmit>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	4618      	mov	r0, r3
 8007326:	f000 f841 	bl	80073ac <USBD_Get_USB_Status>
 800732a:	4603      	mov	r3, r0
 800732c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800732e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	460b      	mov	r3, r1
 8007346:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007356:	7af9      	ldrb	r1, [r7, #11]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	f7fb f8b7 	bl	80024ce <HAL_PCD_EP_Receive>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f820 	bl	80073ac <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007370:	7dbb      	ldrb	r3, [r7, #22]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007384:	4b03      	ldr	r3, [pc, #12]	; (8007394 <USBD_static_malloc+0x18>)
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000be4 	.word	0x20000be4

08007398 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]

}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d817      	bhi.n	80073f0 <USBD_Get_USB_Status+0x44>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <USBD_Get_USB_Status+0x1c>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073d9 	.word	0x080073d9
 80073cc:	080073df 	.word	0x080073df
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073eb 	.word	0x080073eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
    break;
 80073dc:	e00b      	b.n	80073f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073de:	2303      	movs	r3, #3
 80073e0:	73fb      	strb	r3, [r7, #15]
    break;
 80073e2:	e008      	b.n	80073f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
    break;
 80073e8:	e005      	b.n	80073f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073ea:	2303      	movs	r3, #3
 80073ec:	73fb      	strb	r3, [r7, #15]
    break;
 80073ee:	e002      	b.n	80073f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	73fb      	strb	r3, [r7, #15]
    break;
 80073f4:	bf00      	nop
  }
  return usb_status;
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <memcmp>:
 8007404:	b510      	push	{r4, lr}
 8007406:	3901      	subs	r1, #1
 8007408:	4402      	add	r2, r0
 800740a:	4290      	cmp	r0, r2
 800740c:	d101      	bne.n	8007412 <memcmp+0xe>
 800740e:	2000      	movs	r0, #0
 8007410:	e005      	b.n	800741e <memcmp+0x1a>
 8007412:	7803      	ldrb	r3, [r0, #0]
 8007414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007418:	42a3      	cmp	r3, r4
 800741a:	d001      	beq.n	8007420 <memcmp+0x1c>
 800741c:	1b18      	subs	r0, r3, r4
 800741e:	bd10      	pop	{r4, pc}
 8007420:	3001      	adds	r0, #1
 8007422:	e7f2      	b.n	800740a <memcmp+0x6>

08007424 <memset>:
 8007424:	4402      	add	r2, r0
 8007426:	4603      	mov	r3, r0
 8007428:	4293      	cmp	r3, r2
 800742a:	d100      	bne.n	800742e <memset+0xa>
 800742c:	4770      	bx	lr
 800742e:	f803 1b01 	strb.w	r1, [r3], #1
 8007432:	e7f9      	b.n	8007428 <memset+0x4>

08007434 <__libc_init_array>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4d0d      	ldr	r5, [pc, #52]	; (800746c <__libc_init_array+0x38>)
 8007438:	4c0d      	ldr	r4, [pc, #52]	; (8007470 <__libc_init_array+0x3c>)
 800743a:	1b64      	subs	r4, r4, r5
 800743c:	10a4      	asrs	r4, r4, #2
 800743e:	2600      	movs	r6, #0
 8007440:	42a6      	cmp	r6, r4
 8007442:	d109      	bne.n	8007458 <__libc_init_array+0x24>
 8007444:	4d0b      	ldr	r5, [pc, #44]	; (8007474 <__libc_init_array+0x40>)
 8007446:	4c0c      	ldr	r4, [pc, #48]	; (8007478 <__libc_init_array+0x44>)
 8007448:	f000 f818 	bl	800747c <_init>
 800744c:	1b64      	subs	r4, r4, r5
 800744e:	10a4      	asrs	r4, r4, #2
 8007450:	2600      	movs	r6, #0
 8007452:	42a6      	cmp	r6, r4
 8007454:	d105      	bne.n	8007462 <__libc_init_array+0x2e>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	f855 3b04 	ldr.w	r3, [r5], #4
 800745c:	4798      	blx	r3
 800745e:	3601      	adds	r6, #1
 8007460:	e7ee      	b.n	8007440 <__libc_init_array+0xc>
 8007462:	f855 3b04 	ldr.w	r3, [r5], #4
 8007466:	4798      	blx	r3
 8007468:	3601      	adds	r6, #1
 800746a:	e7f2      	b.n	8007452 <__libc_init_array+0x1e>
 800746c:	08007520 	.word	0x08007520
 8007470:	08007520 	.word	0x08007520
 8007474:	08007520 	.word	0x08007520
 8007478:	08007524 	.word	0x08007524

0800747c <_init>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr

08007488 <_fini>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr
