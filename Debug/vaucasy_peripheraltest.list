
vaucasy_peripheraltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800710c  0800710c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800710c  0800710c  0001710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007114  08007114  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800711c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000110  0800722c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000bf8  0800722c  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012eae  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bb  00000000  00000000  00033031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  000361f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4d  00000000  00000000  00037200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000188f7  00000000  00000000  00037e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016783  00000000  00000000  00050744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b11b  00000000  00000000  00066ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004224  00000000  00000000  000f1fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f6208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007094 	.word	0x08007094

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08007094 	.word	0x08007094

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <MX_GPIO_Init+0x84>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a1d      	ldr	r2, [pc, #116]	; (8000554 <MX_GPIO_Init+0x84>)
 80004e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_GPIO_Init+0x84>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_GPIO_Init+0x84>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <MX_GPIO_Init+0x84>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_GPIO_Init+0x84>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_GPIO_Init+0x84>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MX_GPIO_Init+0x84>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_GPIO_Init+0x84>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_GPIO_Init+0x84>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <MX_GPIO_Init+0x84>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_GPIO_Init+0x84>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_I2C1_Init+0x50>)
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <MX_I2C1_Init+0x54>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x58>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_I2C1_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800057a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_I2C1_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_I2C1_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_I2C1_Init+0x50>)
 8000596:	f000 fdb5 	bl	8001104 <HAL_I2C_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 f974 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000012c 	.word	0x2000012c
 80005ac:	40005400 	.word	0x40005400
 80005b0:	000186a0 	.word	0x000186a0

080005b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C3_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <MX_I2C3_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C3_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_I2C3_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C3_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C3_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_I2C3_Init+0x50>)
 80005d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C3_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_I2C3_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_I2C3_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_I2C3_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_I2C3_Init+0x50>)
 80005f2:	f000 fd87 	bl	8001104 <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f946 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000180 	.word	0x20000180
 8000608:	40005c00 	.word	0x40005c00
 800060c:	000186a0 	.word	0x000186a0

08000610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a42      	ldr	r2, [pc, #264]	; (8000738 <HAL_I2C_MspInit+0x128>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d12c      	bne.n	800068c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a40      	ldr	r2, [pc, #256]	; (800073c <HAL_I2C_MspInit+0x12c>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b3e      	ldr	r3, [pc, #248]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800064e:	23c0      	movs	r3, #192	; 0xc0
 8000650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000652:	2312      	movs	r3, #18
 8000654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065a:	2303      	movs	r3, #3
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800065e:	2304      	movs	r3, #4
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4835      	ldr	r0, [pc, #212]	; (8000740 <HAL_I2C_MspInit+0x130>)
 800066a:	f000 fbc7 	bl	8000dfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a31      	ldr	r2, [pc, #196]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800068a:	e050      	b.n	800072e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <HAL_I2C_MspInit+0x134>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d14b      	bne.n	800072e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <HAL_I2C_MspInit+0x12c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a27      	ldr	r2, [pc, #156]	; (800073c <HAL_I2C_MspInit+0x12c>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <HAL_I2C_MspInit+0x12c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <HAL_I2C_MspInit+0x12c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <HAL_I2C_MspInit+0x12c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <HAL_I2C_MspInit+0x12c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d4:	2312      	movs	r3, #18
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80006e0:	2304      	movs	r3, #4
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4817      	ldr	r0, [pc, #92]	; (8000748 <HAL_I2C_MspInit+0x138>)
 80006ec:	f000 fb86 	bl	8000dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fe:	2303      	movs	r3, #3
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000702:	2304      	movs	r3, #4
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	480f      	ldr	r0, [pc, #60]	; (800074c <HAL_I2C_MspInit+0x13c>)
 800070e:	f000 fb75 	bl	8000dfc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_I2C_MspInit+0x12c>)
 800071c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_I2C_MspInit+0x12c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40005400 	.word	0x40005400
 800073c:	40023800 	.word	0x40023800
 8000740:	40020400 	.word	0x40020400
 8000744:	40005c00 	.word	0x40005c00
 8000748:	40020800 	.word	0x40020800
 800074c:	40020000 	.word	0x40020000

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000756:	f000 f9a9 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075a:	f000 f82d 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075e:	f7ff feb7 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000762:	f7ff fef9 	bl	8000558 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000766:	f7ff ff25 	bl	80005b4 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800076a:	f000 f903 	bl	8000974 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800076e:	f006 f82d 	bl	80067cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  extern USBD_HandleTypeDef hUsbDeviceFS;
  uint8_t HID_buffer[8] = {0};
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	  HID_buffer[0] = 2; //left shift down
 800077a:	2302      	movs	r3, #2
 800077c:	703b      	strb	r3, [r7, #0]
	  HID_buffer[3] = 7; // d down
 800077e:	2307      	movs	r3, #7
 8000780:	70fb      	strb	r3, [r7, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 8000782:	463b      	mov	r3, r7
 8000784:	2208      	movs	r2, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <main+0x64>)
 800078a:	f004 fc93 	bl	80050b4 <USBD_HID_SendReport>

	  HAL_Delay(20);
 800078e:	2014      	movs	r0, #20
 8000790:	f000 f9fe 	bl	8000b90 <HAL_Delay>

	  HID_buffer[0] = 0; //left shift up
 8000794:	2300      	movs	r3, #0
 8000796:	703b      	strb	r3, [r7, #0]
	  HID_buffer[3] = 0; // d up
 8000798:	2300      	movs	r3, #0
 800079a:	70fb      	strb	r3, [r7, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
 800079c:	463b      	mov	r3, r7
 800079e:	2208      	movs	r2, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <main+0x64>)
 80007a4:	f004 fc86 	bl	80050b4 <USBD_HID_SendReport>

	  HAL_Delay(2000);
 80007a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ac:	f000 f9f0 	bl	8000b90 <HAL_Delay>
	  HID_buffer[0] = 2; //left shift down
 80007b0:	e7e3      	b.n	800077a <main+0x2a>
 80007b2:	bf00      	nop
 80007b4:	20000224 	.word	0x20000224

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 fc38 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <SystemClock_Config+0xcc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <SystemClock_Config+0xcc>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a20      	ldr	r2, [pc, #128]	; (8000888 <SystemClock_Config+0xd0>)
 8000806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <SystemClock_Config+0xd0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000830:	23a8      	movs	r3, #168	; 0xa8
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000834:	2304      	movs	r3, #4
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f001 ffdd 	bl	8002800 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800084c:	f000 f81e 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2102      	movs	r1, #2
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fa3f 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000878:	f000 f808 	bl	800088c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3750      	adds	r7, #80	; 0x50
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f90c 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <OTG_FS_IRQHandler+0x10>)
 8000942:	f000 fe67 	bl	8001614 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000700 	.word	0x20000700

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f002 fbc0 	bl	8003130 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f7ff ff69 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001d4 	.word	0x200001d4
 80009c4:	40004400 	.word	0x40004400

080009c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12b      	bne.n	8000a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0x8c>)
 8000a3e:	f000 f9dd 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a5c:	f7ff ff78 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a62:	490d      	ldr	r1, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a78:	4c0a      	ldr	r4, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f006 fae1 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fe61 	bl	8000750 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000a9c:	0800711c 	.word	0x0800711c
  ldr r2, =_sbss
 8000aa0:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000aa4:	20000bf8 	.word	0x20000bf8

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 f94f 	bl	8000d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff feda 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f967 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 f92f 	bl	8000d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	2000021c 	.word	0x2000021c

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000021c 	.word	0x2000021c

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	; (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d44:	d301      	bcc.n	8000d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00f      	b.n	8000d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <SysTick_Config+0x40>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d52:	210f      	movs	r1, #15
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f7ff ff8e 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x40>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x40>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff29 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff3e 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff8e 	bl	8000ccc <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff31 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa2 	bl	8000d34 <SysTick_Config>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e159      	b.n	80010cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8148 	bne.w	80010c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a2 	beq.w	80010c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b54      	ldr	r3, [pc, #336]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x202>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2f4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x1fe>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x1fa>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a45      	ldr	r2, [pc, #276]	; (80010fc <HAL_GPIO_Init+0x300>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x1f2>
 8000fea:	2304      	movs	r3, #4
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000fee:	2307      	movs	r3, #7
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e004      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e002      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x204>
 8000ffe:	2300      	movs	r3, #0
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	f002 0203 	and.w	r2, r2, #3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	4093      	lsls	r3, r2
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001010:	4935      	ldr	r1, [pc, #212]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800101e:	4b38      	ldr	r3, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001042:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_GPIO_Init+0x304>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <HAL_GPIO_Init+0x304>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x304>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_GPIO_Init+0x304>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_GPIO_Init+0x304>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	f67f aea2 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	40020800 	.word	0x40020800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40013c00 	.word	0x40013c00

08001104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e12b      	b.n	800136e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fa70 	bl	8000610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2224      	movs	r2, #36	; 0x24
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001168:	f001 ffba 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a81      	ldr	r2, [pc, #516]	; (8001378 <HAL_I2C_Init+0x274>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d807      	bhi.n	8001188 <HAL_I2C_Init+0x84>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a80      	ldr	r2, [pc, #512]	; (800137c <HAL_I2C_Init+0x278>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e006      	b.n	8001196 <HAL_I2C_Init+0x92>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a7d      	ldr	r2, [pc, #500]	; (8001380 <HAL_I2C_Init+0x27c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0e7      	b.n	800136e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a78      	ldr	r2, [pc, #480]	; (8001384 <HAL_I2C_Init+0x280>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	; (8001378 <HAL_I2C_Init+0x274>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d802      	bhi.n	80011d8 <HAL_I2C_Init+0xd4>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	e009      	b.n	80011ec <HAL_I2C_Init+0xe8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_I2C_Init+0x284>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	495c      	ldr	r1, [pc, #368]	; (8001378 <HAL_I2C_Init+0x274>)
 8001208:	428b      	cmp	r3, r1
 800120a:	d819      	bhi.n	8001240 <HAL_I2C_Init+0x13c>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e59      	subs	r1, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fbb1 f3f3 	udiv	r3, r1, r3
 800121a:	1c59      	adds	r1, r3, #1
 800121c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001220:	400b      	ands	r3, r1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_I2C_Init+0x138>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e59      	subs	r1, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fbb1 f3f3 	udiv	r3, r1, r3
 8001234:	3301      	adds	r3, #1
 8001236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123a:	e051      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800123c:	2304      	movs	r3, #4
 800123e:	e04f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_I2C_Init+0x168>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e012      	b.n	8001292 <HAL_I2C_Init+0x18e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Init+0x196>
 8001296:	2301      	movs	r3, #1
 8001298:	e022      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10e      	bne.n	80012c0 <HAL_I2C_Init+0x1bc>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e58      	subs	r0, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012be:	e00f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	0099      	lsls	r1, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800130e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6911      	ldr	r1, [r2, #16]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68d2      	ldr	r2, [r2, #12]
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	000186a0 	.word	0x000186a0
 800137c:	001e847f 	.word	0x001e847f
 8001380:	003d08ff 	.word	0x003d08ff
 8001384:	431bde83 	.word	0x431bde83
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e101      	b.n	80015a2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f005 fb3d 	bl	8006a38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2203      	movs	r2, #3
 80013c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013cc:	d102      	bne.n	80013d4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f002 fa84 	bl	80038e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7c1a      	ldrb	r2, [r3, #16]
 80013e6:	f88d 2000 	strb.w	r2, [sp]
 80013ea:	3304      	adds	r3, #4
 80013ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ee:	f002 f963 	bl	80036b8 <USB_CoreInit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0ce      	b.n	80015a2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fa7c 	bl	8003908 <USB_SetCurrentMode>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0bf      	b.n	80015a2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e04a      	b.n	80014be <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3315      	adds	r3, #21
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3314      	adds	r3, #20
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	b298      	uxth	r0, r3
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	332e      	adds	r3, #46	; 0x2e
 8001464:	4602      	mov	r2, r0
 8001466:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3318      	adds	r3, #24
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	331c      	adds	r3, #28
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3320      	adds	r3, #32
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3324      	adds	r3, #36	; 0x24
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d3af      	bcc.n	8001428 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e044      	b.n	8001558 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	f203 2355 	addw	r3, r3, #597	; 0x255
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	3301      	adds	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	791b      	ldrb	r3, [r3, #4]
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3b5      	bcc.n	80014ce <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7c1a      	ldrb	r2, [r3, #16]
 800156a:	f88d 2000 	strb.w	r2, [sp]
 800156e:	3304      	adds	r3, #4
 8001570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001572:	f002 fa15 	bl	80039a0 <USB_DevInit>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e00c      	b.n	80015a2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fa5f 	bl	8004a5e <USB_DevDisconnect>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_PCD_Start+0x1c>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e022      	b.n	800160c <HAL_PCD_Start+0x62>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d105      	bne.n	80015ee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f966 	bl	80038c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fa0d 	bl	8004a1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b08d      	sub	sp, #52	; 0x34
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 facb 	bl	8004bc6 <USB_GetMode>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 848c 	bne.w	8001f50 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fa2f 	bl	8004aa0 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 8482 	beq.w	8001f4e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fa1c 	bl	8004aa0 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b02      	cmp	r3, #2
 8001670:	d107      	bne.n	8001682 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f002 0202 	and.w	r2, r2, #2
 8001680:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fa0a 	bl	8004aa0 <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b10      	cmp	r3, #16
 8001694:	d161      	bne.n	800175a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0210 	bic.w	r2, r2, #16
 80016a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f003 020f 	and.w	r2, r3, #15
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	0c5b      	lsrs	r3, r3, #17
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d124      	bne.n	800171c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d035      	beq.n	800174a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	6a38      	ldr	r0, [r7, #32]
 80016f2:	f003 f841 	bl	8004778 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001702:	441a      	add	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	e016      	b.n	800174a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	0c5b      	lsrs	r3, r3, #17
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	2b06      	cmp	r3, #6
 8001726:	d110      	bne.n	800174a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800172e:	2208      	movs	r2, #8
 8001730:	4619      	mov	r1, r3
 8001732:	6a38      	ldr	r0, [r7, #32]
 8001734:	f003 f820 	bl	8004778 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001744:	441a      	add	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0210 	orr.w	r2, r2, #16
 8001758:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f99e 	bl	8004aa0 <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800176e:	f040 80a7 	bne.w	80018c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 f9a3 	bl	8004ac6 <USB_ReadDevAllOutEpInterrupt>
 8001780:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001782:	e099      	b.n	80018b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 808e 	beq.w	80018ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f9c7 	bl	8004b2e <USB_ReadDevOutEPInterrupt>
 80017a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00c      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b8:	461a      	mov	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fe8b 	bl	80024dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017dc:	461a      	mov	r2, r3
 80017de:	2308      	movs	r3, #8
 80017e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 ff61 	bl	80026ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	015a      	lsls	r2, r3, #5
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001800:	461a      	mov	r2, r3
 8001802:	2310      	movs	r3, #16
 8001804:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d030      	beq.n	8001872 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001818:	2b80      	cmp	r3, #128	; 0x80
 800181a:	d109      	bne.n	8001830 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001832:	4613      	mov	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4413      	add	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d108      	bne.n	8001860 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2200      	movs	r2, #0
 8001852:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f005 f9f2 	bl	8006c44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	4413      	add	r3, r2
 8001868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186c:	461a      	mov	r2, r3
 800186e:	2302      	movs	r3, #2
 8001870:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	4413      	add	r3, r2
 8001884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001888:	461a      	mov	r2, r3
 800188a:	2320      	movs	r3, #32
 800188c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a4:	461a      	mov	r2, r3
 80018a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3301      	adds	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f af62 	bne.w	8001784 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 f8eb 	bl	8004aa0 <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018d4:	f040 80db 	bne.w	8001a8e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 f90c 	bl	8004afa <USB_ReadDevAllInEpInterrupt>
 80018e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018e8:	e0cd      	b.n	8001a86 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80c2 	beq.w	8001a7a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f003 f932 	bl	8004b6a <USB_ReadDevInEPInterrupt>
 8001906:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d057      	beq.n	80019c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	2201      	movs	r2, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001932:	4013      	ands	r3, r2
 8001934:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	015a      	lsls	r2, r3, #5
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001942:	461a      	mov	r2, r3
 8001944:	2301      	movs	r3, #1
 8001946:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	799b      	ldrb	r3, [r3, #6]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d132      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3320      	adds	r3, #32
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4403      	add	r3, r0
 8001970:	331c      	adds	r3, #28
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4419      	add	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4403      	add	r3, r0
 8001984:	3320      	adds	r3, #32
 8001986:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	2b00      	cmp	r3, #0
 800198c:	d113      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x3a2>
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3324      	adds	r3, #36	; 0x24
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d108      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80019ae:	461a      	mov	r2, r3
 80019b0:	2101      	movs	r1, #1
 80019b2:	f003 f939 	bl	8004c28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f005 f8bc 	bl	8006b3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d8:	461a      	mov	r2, r3
 80019da:	2308      	movs	r3, #8
 80019dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f4:	461a      	mov	r2, r3
 80019f6:	2310      	movs	r3, #16
 80019f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a10:	461a      	mov	r2, r3
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a22:	6a38      	ldr	r0, [r7, #32]
 8001a24:	f002 f920 	bl	8003c68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	3310      	adds	r3, #16
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	78db      	ldrb	r3, [r3, #3]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f005 f909 	bl	8006c68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a62:	461a      	mov	r2, r3
 8001a64:	2302      	movs	r3, #2
 8001a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fca5 	bl	80023c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f af2e 	bne.w	80018ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f804 	bl	8004aa0 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aa2:	d122      	bne.n	8001aea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d108      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fe8b 	bl	80027e8 <HAL_PCDEx_LPM_Callback>
 8001ad2:	e002      	b.n	8001ada <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f005 f8a7 	bl	8006c28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 ffd6 	bl	8004aa0 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001afe:	d112      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f005 f863 	bl	8006bdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b24:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 ffb8 	bl	8004aa0 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3a:	f040 80b7 	bne.w	8001cac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2110      	movs	r1, #16
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 f885 	bl	8003c68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b62:	e046      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b70:	461a      	mov	r2, r3
 8001b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b76:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b88:	0151      	lsls	r1, r2, #5
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	440a      	add	r2, r1
 8001b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001baa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bdc:	0151      	lsls	r1, r2, #5
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	440a      	add	r2, r1
 8001be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	3301      	adds	r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d3b2      	bcc.n	8001b64 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7bdb      	ldrb	r3, [r3, #15]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c2a:	f043 030b 	orr.w	r3, r3, #11
 8001c2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c40:	f043 030b 	orr.w	r3, r3, #11
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	e015      	b.n	8001c74 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6e:	f043 030b 	orr.w	r3, r3, #11
 8001c72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c96:	461a      	mov	r2, r3
 8001c98:	f002 ffc6 	bl	8004c28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fef5 	bl	8004aa0 <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc0:	d123      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 ff8b 	bl	8004be2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 f842 	bl	8003d5a <USB_GetDevSpeed>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681c      	ldr	r4, [r3, #0]
 8001ce2:	f001 f9f1 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8001ce6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cec:	461a      	mov	r2, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f001 fd46 	bl	8003780 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f004 ff48 	bl	8006b8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fec6 	bl	8004aa0 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d10a      	bne.n	8001d34 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f004 ff25 	bl	8006b6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f002 0208 	and.w	r2, r2, #8
 8001d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 feb1 	bl	8004aa0 <USB_ReadInterrupts>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d123      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d54:	2301      	movs	r3, #1
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
 8001d58:	e014      	b.n	8001d84 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 faf2 	bl	8002362 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	791b      	ldrb	r3, [r3, #4]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d3e4      	bcc.n	8001d5a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 fe83 	bl	8004aa0 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da4:	d13c      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001da6:	2301      	movs	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e02b      	b.n	8001e04 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3318      	adds	r3, #24
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da12      	bge.n	8001dfe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3317      	adds	r3, #23
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fab2 	bl	8002362 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d3cd      	bcc.n	8001dac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fe3b 	bl	8004aa0 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e34:	d156      	bne.n	8001ee4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e36:	2301      	movs	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	e045      	b.n	8001ec8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d12e      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da2b      	bge.n	8001ec2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001e76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d121      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10a      	bne.n	8001ec2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebe:	6053      	str	r3, [r2, #4]
            break;
 8001ec0:	e008      	b.n	8001ed4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	791b      	ldrb	r3, [r3, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d3b3      	bcc.n	8001e3c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fdd9 	bl	8004aa0 <USB_ReadInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d10a      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f004 fec6 	bl	8006c8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f002 fdc3 	bl	8004aa0 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d115      	bne.n	8001f50 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f004 feb6 	bl	8006ca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	e000      	b.n	8001f50 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001f4e:	bf00      	nop
    }
  }
}
 8001f50:	3734      	adds	r7, #52	; 0x34
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}

08001f56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_PCD_SetAddress+0x1a>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e012      	b.n	8001f96 <HAL_PCD_SetAddress+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fd22 	bl	80049d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	4608      	mov	r0, r1
 8001fa8:	4611      	mov	r1, r2
 8001faa:	461a      	mov	r2, r3
 8001fac:	4603      	mov	r3, r0
 8001fae:	70fb      	strb	r3, [r7, #3]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	803b      	strh	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da0f      	bge.n	8001fe4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
 8001fe2:	e00f      	b.n	8002004 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002010:	883b      	ldrh	r3, [r7, #0]
 8002012:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	78ba      	ldrb	r2, [r7, #2]
 800201e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002032:	78bb      	ldrb	r3, [r7, #2]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d102      	bne.n	800203e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_PCD_EP_Open+0xae>
 8002048:	2302      	movs	r3, #2
 800204a:	e00e      	b.n	800206a <HAL_PCD_EP_Open+0xcc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fea2 	bl	8003da4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002068:	7afb      	ldrb	r3, [r7, #11]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800207e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da0f      	bge.n	80020a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3310      	adds	r3, #16
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	705a      	strb	r2, [r3, #1]
 80020a4:	e00f      	b.n	80020c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_PCD_EP_Close+0x6e>
 80020dc:	2302      	movs	r3, #2
 80020de:	e00e      	b.n	80020fe <HAL_PCD_EP_Close+0x8c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68f9      	ldr	r1, [r7, #12]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fee0 	bl	8003eb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	3304      	adds	r3, #4
 800212e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	b2da      	uxtb	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	799b      	ldrb	r3, [r3, #6]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d102      	bne.n	8002162 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	799b      	ldrb	r3, [r3, #6]
 800216a:	461a      	mov	r2, r3
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	f001 ff7d 	bl	800406c <USB_EPStartXfer>

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	7afb      	ldrb	r3, [r7, #11]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	3310      	adds	r3, #16
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2201      	movs	r2, #1
 80021ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	799b      	ldrb	r3, [r3, #6]
 80021de:	461a      	mov	r2, r3
 80021e0:	6979      	ldr	r1, [r7, #20]
 80021e2:	f001 ff43 	bl	800406c <USB_EPStartXfer>

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	7912      	ldrb	r2, [r2, #4]
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e04f      	b.n	80022ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0f      	bge.n	8002236 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3310      	adds	r3, #16
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	3304      	adds	r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	e00d      	b.n	8002252 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	3304      	adds	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_PCD_EP_SetStall+0x82>
 800226e:	2302      	movs	r3, #2
 8002270:	e01d      	b.n	80022ae <HAL_PCD_EP_SetStall+0xbe>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fad1 	bl	8004828 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7999      	ldrb	r1, [r3, #6]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800229e:	461a      	mov	r2, r3
 80022a0:	f002 fcc2 	bl	8004c28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	7912      	ldrb	r2, [r2, #4]
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e042      	b.n	800235a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da0f      	bge.n	80022fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	3310      	adds	r3, #16
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	705a      	strb	r2, [r3, #1]
 80022fa:	e00f      	b.n	800231c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_PCD_EP_ClrStall+0x86>
 8002338:	2302      	movs	r3, #2
 800233a:	e00e      	b.n	800235a <HAL_PCD_EP_ClrStall+0xa4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fada 	bl	8004904 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800236e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da0c      	bge.n	8002390 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	3310      	adds	r3, #16
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e00c      	b.n	80023aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 f8f9 	bl	80045a8 <USB_EPStopXfer>
 80023b6:	4603      	mov	r3, r0
 80023b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023ba:	7afb      	ldrb	r3, [r7, #11]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	3310      	adds	r3, #16
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e06b      	b.n	80024d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	429a      	cmp	r2, r3
 8002410:	d902      	bls.n	8002418 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3303      	adds	r3, #3
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002420:	e02a      	b.n	8002478 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	d902      	bls.n	800243e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3303      	adds	r3, #3
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f002 f94e 	bl	80046fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	441a      	add	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	429a      	cmp	r2, r3
 800248c:	d809      	bhi.n	80024a2 <PCD_WriteEmptyTxFifo+0xde>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002496:	429a      	cmp	r2, r3
 8002498:	d203      	bcs.n	80024a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1bf      	bne.n	8002422 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d811      	bhi.n	80024d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	6939      	ldr	r1, [r7, #16]
 80024ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ce:	4013      	ands	r3, r2
 80024d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d17b      	bne.n	800260a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	4a61      	ldr	r2, [pc, #388]	; (80026a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	f240 80b9 	bls.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b3 	beq.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002544:	6093      	str	r3, [r2, #8]
 8002546:	e0a7      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	461a      	mov	r2, r3
 8002560:	2320      	movs	r3, #32
 8002562:	6093      	str	r3, [r2, #8]
 8002564:	e098      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 8093 	bne.w	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	4a4b      	ldr	r2, [pc, #300]	; (80026a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d90f      	bls.n	800259a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	6093      	str	r3, [r2, #8]
 8002598:	e07e      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	0159      	lsls	r1, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	1ad2      	subs	r2, r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80025e4:	461a      	mov	r2, r3
 80025e6:	2101      	movs	r1, #1
 80025e8:	f002 fb1e 	bl	8004c28 <USB_EP0_OutStart>
 80025ec:	e006      	b.n	80025fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	441a      	add	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f004 fa7e 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
 8002608:	e046      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d124      	bne.n	800265c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	e032      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002648:	461a      	mov	r2, r3
 800264a:	2320      	movs	r3, #32
 800264c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	4619      	mov	r1, r3
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f004 fa55 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
 800265a:	e01d      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d114      	bne.n	800268c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002684:	461a      	mov	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f002 face 	bl	8004c28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f004 fa36 	bl	8006b04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	4f54300a 	.word	0x4f54300a
 80026a8:	4f54310a 	.word	0x4f54310a

080026ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	333c      	adds	r3, #60	; 0x3c
 80026c4:	3304      	adds	r3, #4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <PCD_EP_OutSetupPacket_int+0x88>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90e      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f004 f9ed 	bl	8006ae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <PCD_EP_OutSetupPacket_int+0x88>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d90c      	bls.n	8002728 <PCD_EP_OutSetupPacket_int+0x7c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	799b      	ldrb	r3, [r3, #6]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d108      	bne.n	8002728 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002720:	461a      	mov	r2, r3
 8002722:	2101      	movs	r1, #1
 8002724:	f002 fa80 	bl	8004c28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	4f54300a 	.word	0x4f54300a

08002738 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
 8002744:	4613      	mov	r3, r2
 8002746:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002756:	883b      	ldrh	r3, [r7, #0]
 8002758:	0419      	lsls	r1, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	430a      	orrs	r2, r1
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
 8002764:	e028      	b.n	80027b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4413      	add	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e00d      	b.n	8002796 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3340      	adds	r3, #64	; 0x40
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4413      	add	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	3b01      	subs	r3, #1
 800279c:	429a      	cmp	r2, r3
 800279e:	d3ec      	bcc.n	800277a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027a0:	883b      	ldrh	r3, [r7, #0]
 80027a2:	0418      	lsls	r0, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4302      	orrs	r2, r0
 80027b0:	3340      	adds	r3, #64	; 0x40
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e267      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4b85      	ldr	r3, [pc, #532]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b7e      	ldr	r3, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e242      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b66      	ldr	r3, [pc, #408]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe f95e 	bl	8000b78 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe f95a 	bl	8000b78 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e207      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe f94a 	bl	8000b78 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe f946 	bl	8000b78 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f3      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b51      	ldr	r3, [pc, #324]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c7      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4937      	ldr	r1, [pc, #220]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe f8ff 	bl	8000b78 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe f8fb 	bl	8000b78 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a8      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4925      	ldr	r1, [pc, #148]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_OscConfig+0x244>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe f8de 	bl	8000b78 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c0:	f7fe f8da 	bl	8000b78 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e187      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d036      	beq.n	8002a58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe f8be 	bl	8000b78 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a00:	f7fe f8ba 	bl	8000b78 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e167      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_OscConfig+0x240>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e01b      	b.n	8002a58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x248>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7fe f8a7 	bl	8000b78 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00e      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe f8a3 	bl	8000b78 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d907      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e150      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	42470000 	.word	0x42470000
 8002a48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ea      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8097 	beq.w	8002b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a7c      	ldr	r2, [pc, #496]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b7a      	ldr	r3, [pc, #488]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b74      	ldr	r3, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a73      	ldr	r2, [pc, #460]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe f863 	bl	8000b78 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe f85f 	bl	8000b78 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e10c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x474>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x2ea>
 8002adc:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x30c>
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a5e      	ldr	r2, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	4a5b      	ldr	r2, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0x324>
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b55      	ldr	r3, [pc, #340]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f023 0304 	bic.w	r3, r3, #4
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f824 	bl	8000b78 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fe f820 	bl	8000b78 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ee      	beq.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe f80e 	bl	8000b78 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe f80a 	bl	8000b78 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0b5      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1ee      	bne.n	8002b60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b88:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a38      	ldr	r2, [pc, #224]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80a1 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d05c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d141      	bne.n	8002c36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fd ffde 	bl	8000b78 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fd ffda 	bl	8000b78 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e087      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fd ffb3 	bl	8000b78 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fd ffaf 	bl	8000b78 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e05c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x416>
 8002c34:	e054      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x478>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fd ff9c 	bl	8000b78 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fd ff98 	bl	8000b78 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e045      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x470>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
 8002c62:	e03d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e038      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d028      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d121      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11a      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d111      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7fd feca 	bl	8000b78 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7fd fec6 	bl	8000b78 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fe2a 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	080070f4 	.word	0x080070f4
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec0:	b094      	sub	sp, #80	; 0x50
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b79      	ldr	r3, [pc, #484]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80e1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e0db      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b73      	ldr	r3, [pc, #460]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ef4:	e0db      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efa:	e0d8      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	2200      	movs	r2, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	0159      	lsls	r1, r3, #5
 8002f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f40:	0150      	lsls	r0, r2, #5
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4621      	mov	r1, r4
 8002f48:	1a51      	subs	r1, r2, r1
 8002f4a:	6139      	str	r1, [r7, #16]
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f60:	4659      	mov	r1, fp
 8002f62:	018b      	lsls	r3, r1, #6
 8002f64:	4651      	mov	r1, sl
 8002f66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	018a      	lsls	r2, r1, #6
 8002f6e:	4651      	mov	r1, sl
 8002f70:	ebb2 0801 	subs.w	r8, r2, r1
 8002f74:	4659      	mov	r1, fp
 8002f76:	eb63 0901 	sbc.w	r9, r3, r1
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	eb18 0303 	adds.w	r3, r8, r3
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	eb49 0303 	adc.w	r3, r9, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fae:	4629      	mov	r1, r5
 8002fb0:	024b      	lsls	r3, r1, #9
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb8:	4621      	mov	r1, r4
 8002fba:	024a      	lsls	r2, r1, #9
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fcc:	f7fd f902 	bl	80001d4 <__aeabi_uldivmod>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd8:	e058      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	f04f 0000 	mov.w	r0, #0
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	0159      	lsls	r1, r3, #5
 8003002:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003006:	0150      	lsls	r0, r2, #5
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4641      	mov	r1, r8
 800300e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003012:	4649      	mov	r1, r9
 8003014:	eb63 0b01 	sbc.w	fp, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003024:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003028:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800302c:	ebb2 040a 	subs.w	r4, r2, sl
 8003030:	eb63 050b 	sbc.w	r5, r3, fp
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	00eb      	lsls	r3, r5, #3
 800303e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003042:	00e2      	lsls	r2, r4, #3
 8003044:	4614      	mov	r4, r2
 8003046:	461d      	mov	r5, r3
 8003048:	4643      	mov	r3, r8
 800304a:	18e3      	adds	r3, r4, r3
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	464b      	mov	r3, r9
 8003050:	eb45 0303 	adc.w	r3, r5, r3
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003062:	4629      	mov	r1, r5
 8003064:	028b      	lsls	r3, r1, #10
 8003066:	4621      	mov	r1, r4
 8003068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800306c:	4621      	mov	r1, r4
 800306e:	028a      	lsls	r2, r1, #10
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	2200      	movs	r2, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	61fa      	str	r2, [r7, #28]
 800307c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003080:	f7fd f8a8 	bl	80001d4 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	3301      	adds	r3, #1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800309c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800309e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030a6:	e002      	b.n	80030ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3750      	adds	r7, #80	; 0x50
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08007104 	.word	0x08007104

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800310c:	f7ff ffdc 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0b5b      	lsrs	r3, r3, #13
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	08007104 	.word	0x08007104

08003130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fc36 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f82b 	bl	80031d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b0c0      	sub	sp, #256	; 0x100
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	68d9      	ldr	r1, [r3, #12]
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	ea40 0301 	orr.w	r3, r0, r1
 80031f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	431a      	orrs	r2, r3
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800321c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003228:	f021 010c 	bic.w	r1, r1, #12
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003236:	430b      	orrs	r3, r1
 8003238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	6999      	ldr	r1, [r3, #24]
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	ea40 0301 	orr.w	r3, r0, r1
 8003256:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b8f      	ldr	r3, [pc, #572]	; (800349c <UART_SetConfig+0x2cc>)
 8003260:	429a      	cmp	r2, r3
 8003262:	d005      	beq.n	8003270 <UART_SetConfig+0xa0>
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4b8d      	ldr	r3, [pc, #564]	; (80034a0 <UART_SetConfig+0x2d0>)
 800326c:	429a      	cmp	r2, r3
 800326e:	d104      	bne.n	800327a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7ff ff4a 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 8003274:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003278:	e003      	b.n	8003282 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7ff ff31 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 800327e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	f040 810c 	bne.w	80034a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800329a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800329e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032a2:	4622      	mov	r2, r4
 80032a4:	462b      	mov	r3, r5
 80032a6:	1891      	adds	r1, r2, r2
 80032a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032aa:	415b      	adcs	r3, r3
 80032ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b2:	4621      	mov	r1, r4
 80032b4:	eb12 0801 	adds.w	r8, r2, r1
 80032b8:	4629      	mov	r1, r5
 80032ba:	eb43 0901 	adc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb18 0303 	adds.w	r3, r8, r3
 80032dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032e0:	462b      	mov	r3, r5
 80032e2:	eb49 0303 	adc.w	r3, r9, r3
 80032e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032fe:	460b      	mov	r3, r1
 8003300:	18db      	adds	r3, r3, r3
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
 8003304:	4613      	mov	r3, r2
 8003306:	eb42 0303 	adc.w	r3, r2, r3
 800330a:	657b      	str	r3, [r7, #84]	; 0x54
 800330c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003310:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003314:	f7fc ff5e 	bl	80001d4 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <UART_SetConfig+0x2d4>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011c      	lsls	r4, r3, #4
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003330:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003334:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003340:	415b      	adcs	r3, r3
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003344:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003348:	4641      	mov	r1, r8
 800334a:	eb12 0a01 	adds.w	sl, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb43 0b01 	adc.w	fp, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003360:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003368:	4692      	mov	sl, r2
 800336a:	469b      	mov	fp, r3
 800336c:	4643      	mov	r3, r8
 800336e:	eb1a 0303 	adds.w	r3, sl, r3
 8003372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003376:	464b      	mov	r3, r9
 8003378:	eb4b 0303 	adc.w	r3, fp, r3
 800337c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800338c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003390:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003394:	460b      	mov	r3, r1
 8003396:	18db      	adds	r3, r3, r3
 8003398:	643b      	str	r3, [r7, #64]	; 0x40
 800339a:	4613      	mov	r3, r2
 800339c:	eb42 0303 	adc.w	r3, r2, r3
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
 80033a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033aa:	f7fc ff13 	bl	80001d4 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <UART_SetConfig+0x2d4>)
 80033b6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2264      	movs	r2, #100	; 0x64
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	1acb      	subs	r3, r1, r3
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <UART_SetConfig+0x2d4>)
 80033cc:	fba3 2302 	umull	r2, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033d8:	441c      	add	r4, r3
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033de:	2200      	movs	r2, #0
 80033e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80033f4:	415b      	adcs	r3, r3
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6339      	str	r1, [r7, #48]	; 0x30
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003430:	464b      	mov	r3, r9
 8003432:	460a      	mov	r2, r1
 8003434:	eb42 0303 	adc.w	r3, r2, r3
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003448:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800344c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003450:	460b      	mov	r3, r1
 8003452:	18db      	adds	r3, r3, r3
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
 8003456:	4613      	mov	r3, r2
 8003458:	eb42 0303 	adc.w	r3, r2, r3
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003462:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003466:	f7fc feb5 	bl	80001d4 <__aeabi_uldivmod>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <UART_SetConfig+0x2d4>)
 8003470:	fba3 1302 	umull	r1, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <UART_SetConfig+0x2d4>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 0207 	and.w	r2, r3, #7
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4422      	add	r2, r4
 8003496:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003498:	e106      	b.n	80036a8 <UART_SetConfig+0x4d8>
 800349a:	bf00      	nop
 800349c:	40011000 	.word	0x40011000
 80034a0:	40011400 	.word	0x40011400
 80034a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ba:	4642      	mov	r2, r8
 80034bc:	464b      	mov	r3, r9
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	6239      	str	r1, [r7, #32]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ca:	4641      	mov	r1, r8
 80034cc:	1854      	adds	r4, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb43 0501 	adc.w	r5, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	00eb      	lsls	r3, r5, #3
 80034de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	4643      	mov	r3, r8
 80034ea:	18e3      	adds	r3, r4, r3
 80034ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f0:	464b      	mov	r3, r9
 80034f2:	eb45 0303 	adc.w	r3, r5, r3
 80034f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003506:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003516:	4629      	mov	r1, r5
 8003518:	008b      	lsls	r3, r1, #2
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003520:	4621      	mov	r1, r4
 8003522:	008a      	lsls	r2, r1, #2
 8003524:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003528:	f7fc fe54 	bl	80001d4 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <UART_SetConfig+0x4e4>)
 8003532:	fba3 2302 	umull	r2, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	011c      	lsls	r4, r3, #4
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003548:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	1891      	adds	r1, r2, r2
 8003552:	61b9      	str	r1, [r7, #24]
 8003554:	415b      	adcs	r3, r3
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355c:	4641      	mov	r1, r8
 800355e:	1851      	adds	r1, r2, r1
 8003560:	6139      	str	r1, [r7, #16]
 8003562:	4649      	mov	r1, r9
 8003564:	414b      	adcs	r3, r1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003574:	4659      	mov	r1, fp
 8003576:	00cb      	lsls	r3, r1, #3
 8003578:	4651      	mov	r1, sl
 800357a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357e:	4651      	mov	r1, sl
 8003580:	00ca      	lsls	r2, r1, #3
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	4603      	mov	r3, r0
 8003588:	4642      	mov	r2, r8
 800358a:	189b      	adds	r3, r3, r2
 800358c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003590:	464b      	mov	r3, r9
 8003592:	460a      	mov	r2, r1
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035b4:	4649      	mov	r1, r9
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	4641      	mov	r1, r8
 80035ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035be:	4641      	mov	r1, r8
 80035c0:	008a      	lsls	r2, r1, #2
 80035c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035c6:	f7fc fe05 	bl	80001d4 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <UART_SetConfig+0x4e4>)
 80035d2:	fba3 2301 	umull	r2, r3, r3, r1
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	2264      	movs	r2, #100	; 0x64
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	1acb      	subs	r3, r1, r3
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	3332      	adds	r3, #50	; 0x32
 80035e4:	4a33      	ldr	r2, [pc, #204]	; (80036b4 <UART_SetConfig+0x4e4>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f0:	441c      	add	r4, r3
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	673b      	str	r3, [r7, #112]	; 0x70
 80035fa:	677a      	str	r2, [r7, #116]	; 0x74
 80035fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003600:	4642      	mov	r2, r8
 8003602:	464b      	mov	r3, r9
 8003604:	1891      	adds	r1, r2, r2
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	415b      	adcs	r3, r3
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003610:	4641      	mov	r1, r8
 8003612:	1851      	adds	r1, r2, r1
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	4649      	mov	r1, r9
 8003618:	414b      	adcs	r3, r1
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003628:	4659      	mov	r1, fp
 800362a:	00cb      	lsls	r3, r1, #3
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003632:	4651      	mov	r1, sl
 8003634:	00ca      	lsls	r2, r1, #3
 8003636:	4610      	mov	r0, r2
 8003638:	4619      	mov	r1, r3
 800363a:	4603      	mov	r3, r0
 800363c:	4642      	mov	r2, r8
 800363e:	189b      	adds	r3, r3, r2
 8003640:	66bb      	str	r3, [r7, #104]	; 0x68
 8003642:	464b      	mov	r3, r9
 8003644:	460a      	mov	r2, r1
 8003646:	eb42 0303 	adc.w	r3, r2, r3
 800364a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	663b      	str	r3, [r7, #96]	; 0x60
 8003656:	667a      	str	r2, [r7, #100]	; 0x64
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003664:	4649      	mov	r1, r9
 8003666:	008b      	lsls	r3, r1, #2
 8003668:	4641      	mov	r1, r8
 800366a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800366e:	4641      	mov	r1, r8
 8003670:	008a      	lsls	r2, r1, #2
 8003672:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003676:	f7fc fdad 	bl	80001d4 <__aeabi_uldivmod>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <UART_SetConfig+0x4e4>)
 8003680:	fba3 1302 	umull	r1, r3, r3, r2
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	2164      	movs	r1, #100	; 0x64
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	3332      	adds	r3, #50	; 0x32
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <UART_SetConfig+0x4e4>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4422      	add	r2, r4
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036ae:	46bd      	mov	sp, r7
 80036b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b4:	51eb851f 	.word	0x51eb851f

080036b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036b8:	b084      	sub	sp, #16
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	f107 001c 	add.w	r0, r7, #28
 80036c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d123      	bne.n	800371a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f001 fae8 	bl	8004ce4 <USB_CoreReset>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e01b      	b.n	8003752 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 fadc 	bl	8004ce4 <USB_CoreReset>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003730:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
 8003744:	e005      	b.n	8003752 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003752:	7fbb      	ldrb	r3, [r7, #30]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d10b      	bne.n	8003770 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f043 0206 	orr.w	r2, r3, #6
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377c:	b004      	add	sp, #16
 800377e:	4770      	bx	lr

08003780 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d165      	bne.n	8003860 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a41      	ldr	r2, [pc, #260]	; (800389c <USB_SetTurnaroundTime+0x11c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d906      	bls.n	80037aa <USB_SetTurnaroundTime+0x2a>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <USB_SetTurnaroundTime+0x120>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d202      	bcs.n	80037aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037a4:	230f      	movs	r3, #15
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e062      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4a3c      	ldr	r2, [pc, #240]	; (80038a0 <USB_SetTurnaroundTime+0x120>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d306      	bcc.n	80037c0 <USB_SetTurnaroundTime+0x40>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <USB_SetTurnaroundTime+0x124>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d202      	bcs.n	80037c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037ba:	230e      	movs	r3, #14
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e057      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a38      	ldr	r2, [pc, #224]	; (80038a4 <USB_SetTurnaroundTime+0x124>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d306      	bcc.n	80037d6 <USB_SetTurnaroundTime+0x56>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4a37      	ldr	r2, [pc, #220]	; (80038a8 <USB_SetTurnaroundTime+0x128>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d202      	bcs.n	80037d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037d0:	230d      	movs	r3, #13
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e04c      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a33      	ldr	r2, [pc, #204]	; (80038a8 <USB_SetTurnaroundTime+0x128>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d306      	bcc.n	80037ec <USB_SetTurnaroundTime+0x6c>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4a32      	ldr	r2, [pc, #200]	; (80038ac <USB_SetTurnaroundTime+0x12c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d802      	bhi.n	80037ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037e6:	230c      	movs	r3, #12
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e041      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <USB_SetTurnaroundTime+0x12c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d906      	bls.n	8003802 <USB_SetTurnaroundTime+0x82>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a2e      	ldr	r2, [pc, #184]	; (80038b0 <USB_SetTurnaroundTime+0x130>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d802      	bhi.n	8003802 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037fc:	230b      	movs	r3, #11
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	e036      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <USB_SetTurnaroundTime+0x130>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d906      	bls.n	8003818 <USB_SetTurnaroundTime+0x98>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <USB_SetTurnaroundTime+0x134>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d802      	bhi.n	8003818 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003812:	230a      	movs	r3, #10
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e02b      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <USB_SetTurnaroundTime+0x134>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d906      	bls.n	800382e <USB_SetTurnaroundTime+0xae>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <USB_SetTurnaroundTime+0x138>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d202      	bcs.n	800382e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003828:	2309      	movs	r3, #9
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e020      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <USB_SetTurnaroundTime+0x138>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d306      	bcc.n	8003844 <USB_SetTurnaroundTime+0xc4>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a20      	ldr	r2, [pc, #128]	; (80038bc <USB_SetTurnaroundTime+0x13c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d802      	bhi.n	8003844 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800383e:	2308      	movs	r3, #8
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e015      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <USB_SetTurnaroundTime+0x13c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d906      	bls.n	800385a <USB_SetTurnaroundTime+0xda>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <USB_SetTurnaroundTime+0x140>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d202      	bcs.n	800385a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003854:	2307      	movs	r3, #7
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e00a      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800385a:	2306      	movs	r3, #6
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e007      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003866:	2309      	movs	r3, #9
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e001      	b.n	8003870 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800386c:	2309      	movs	r3, #9
 800386e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	00d8acbf 	.word	0x00d8acbf
 80038a0:	00e4e1c0 	.word	0x00e4e1c0
 80038a4:	00f42400 	.word	0x00f42400
 80038a8:	01067380 	.word	0x01067380
 80038ac:	011a499f 	.word	0x011a499f
 80038b0:	01312cff 	.word	0x01312cff
 80038b4:	014ca43f 	.word	0x014ca43f
 80038b8:	016e3600 	.word	0x016e3600
 80038bc:	01a6ab1f 	.word	0x01a6ab1f
 80038c0:	01e84800 	.word	0x01e84800

080038c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 0201 	bic.w	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d115      	bne.n	8003956 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003936:	200a      	movs	r0, #10
 8003938:	f7fd f92a 	bl	8000b90 <HAL_Delay>
      ms += 10U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	330a      	adds	r3, #10
 8003940:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 f93f 	bl	8004bc6 <USB_GetMode>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d01e      	beq.n	800398c <USB_SetCurrentMode+0x84>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2bc7      	cmp	r3, #199	; 0xc7
 8003952:	d9f0      	bls.n	8003936 <USB_SetCurrentMode+0x2e>
 8003954:	e01a      	b.n	800398c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d115      	bne.n	8003988 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003968:	200a      	movs	r0, #10
 800396a:	f7fd f911 	bl	8000b90 <HAL_Delay>
      ms += 10U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	330a      	adds	r3, #10
 8003972:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f001 f926 	bl	8004bc6 <USB_GetMode>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <USB_SetCurrentMode+0x84>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2bc7      	cmp	r3, #199	; 0xc7
 8003984:	d9f0      	bls.n	8003968 <USB_SetCurrentMode+0x60>
 8003986:	e001      	b.n	800398c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e005      	b.n	8003998 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2bc8      	cmp	r3, #200	; 0xc8
 8003990:	d101      	bne.n	8003996 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039a0:	b084      	sub	sp, #16
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e009      	b.n	80039d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3340      	adds	r3, #64	; 0x40
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3301      	adds	r3, #1
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b0e      	cmp	r3, #14
 80039d8:	d9f2      	bls.n	80039c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11c      	bne.n	8003a1c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f0:	f043 0302 	orr.w	r3, r3, #2
 80039f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
 8003a1a:	e00b      	b.n	8003a34 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d10d      	bne.n	8003a64 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f968 	bl	8003d28 <USB_SetDevSpeed>
 8003a58:	e008      	b.n	8003a6c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f963 	bl	8003d28 <USB_SetDevSpeed>
 8003a62:	e003      	b.n	8003a6c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a64:	2103      	movs	r1, #3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f95e 	bl	8003d28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a6c:	2110      	movs	r1, #16
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8fa 	bl	8003c68 <USB_FlushTxFifo>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f924 	bl	8003ccc <USB_FlushRxFifo>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a94:	461a      	mov	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e043      	b.n	8003b40 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ace:	d118      	bne.n	8003b02 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e013      	b.n	8003b14 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e008      	b.n	8003b14 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	461a      	mov	r2, r3
 8003b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b44:	461a      	mov	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d3b5      	bcc.n	8003ab8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e043      	b.n	8003bda <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b68:	d118      	bne.n	8003b9c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e013      	b.n	8003bae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e008      	b.n	8003bae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bde:	461a      	mov	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d3b5      	bcc.n	8003b52 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <USB_DevInit+0x2c4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f043 0208 	orr.w	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c60:	b004      	add	sp, #16
 8003c62:	4770      	bx	lr
 8003c64:	803c3800 	.word	0x803c3800

08003c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c82:	d901      	bls.n	8003c88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e01b      	b.n	8003cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	daf2      	bge.n	8003c76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	019b      	lsls	r3, r3, #6
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003cac:	d901      	bls.n	8003cb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e006      	b.n	8003cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d0f0      	beq.n	8003ca0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ce4:	d901      	bls.n	8003cea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e018      	b.n	8003d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	daf2      	bge.n	8003cd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d08:	d901      	bls.n	8003d0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e006      	b.n	8003d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d0f0      	beq.n	8003cfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0306 	and.w	r3, r3, #6
 8003d72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
 8003d7e:	e00a      	b.n	8003d96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d002      	beq.n	8003d8c <USB_GetDevSpeed+0x32>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d102      	bne.n	8003d92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	75fb      	strb	r3, [r7, #23]
 8003d90:	e001      	b.n	8003d96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d92:	230f      	movs	r3, #15
 8003d94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d13a      	bne.n	8003e36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d155      	bne.n	8003ea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	791b      	ldrb	r3, [r3, #4]
 8003e12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	059b      	lsls	r3, r3, #22
 8003e1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	e036      	b.n	8003ea4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d11a      	bne.n	8003ea4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d161      	bne.n	8003f94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee6:	d11f      	bne.n	8003f28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	2101      	movs	r1, #1
 8003f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f48:	4013      	ands	r3, r2
 8003f4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0159      	lsls	r1, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <USB_DeactivateEndpoint+0x1b0>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
 8003f92:	e060      	b.n	8004056 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003faa:	d11f      	bne.n	8003fec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	43db      	mvns	r3, r3
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800400c:	4013      	ands	r3, r2
 800400e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	43db      	mvns	r3, r3
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004030:	4013      	ands	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0159      	lsls	r1, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	440b      	add	r3, r1
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	4619      	mov	r1, r3
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <USB_DeactivateEndpoint+0x1b4>)
 8004052:	4013      	ands	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	ec337800 	.word	0xec337800
 8004068:	eff37800 	.word	0xeff37800

0800406c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	f040 8180 	bne.w	800438e <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d132      	bne.n	80040fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f4:	0cdb      	lsrs	r3, r3, #19
 80040f6:	04db      	lsls	r3, r3, #19
 80040f8:	6113      	str	r3, [r2, #16]
 80040fa:	e098      	b.n	800422e <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	0151      	lsls	r1, r2, #5
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	440a      	add	r2, r1
 8004112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004116:	0cdb      	lsrs	r3, r3, #19
 8004118:	04db      	lsls	r3, r3, #19
 800411a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004136:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800413a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800413e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11a      	bne.n	800417c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d903      	bls.n	800415a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004178:	6113      	str	r3, [r2, #16]
 800417a:	e045      	b.n	8004208 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4413      	add	r3, r2
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	8afb      	ldrh	r3, [r7, #22]
 80041a2:	04db      	lsls	r3, r3, #19
 80041a4:	4619      	mov	r1, r3
 80041a6:	4ba4      	ldr	r3, [pc, #656]	; (8004438 <USB_EPStartXfer+0x3cc>)
 80041a8:	400b      	ands	r3, r1
 80041aa:	69b9      	ldr	r1, [r7, #24]
 80041ac:	0148      	lsls	r0, r1, #5
 80041ae:	69f9      	ldr	r1, [r7, #28]
 80041b0:	4401      	add	r1, r0
 80041b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041b6:	4313      	orrs	r3, r2
 80041b8:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	791b      	ldrb	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d122      	bne.n	8004208 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041e0:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	8afb      	ldrh	r3, [r7, #22]
 80041f2:	075b      	lsls	r3, r3, #29
 80041f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	0148      	lsls	r0, r1, #5
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	4401      	add	r1, r0
 8004200:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004204:	4313      	orrs	r3, r2
 8004206:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	0148      	lsls	r0, r1, #5
 8004222:	69f9      	ldr	r1, [r7, #28]
 8004224:	4401      	add	r1, r0
 8004226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800422a:	4313      	orrs	r3, r2
 800422c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d14b      	bne.n	80042cc <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d009      	beq.n	8004250 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004248:	461a      	mov	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	791b      	ldrb	r3, [r3, #4]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d128      	bne.n	80042aa <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d110      	bne.n	800428a <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e00f      	b.n	80042aa <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e165      	b.n	8004598 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	791b      	ldrb	r3, [r3, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d015      	beq.n	8004320 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 814d 	beq.w	8004598 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800431a:	4313      	orrs	r3, r2
 800431c:	634b      	str	r3, [r1, #52]	; 0x34
 800431e:	e13b      	b.n	8004598 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d110      	bne.n	8004352 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e00f      	b.n	8004372 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	68d9      	ldr	r1, [r3, #12]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	b298      	uxth	r0, r3
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f9b8 	bl	80046fc <USB_WritePacket>
 800438c:	e104      	b.n	8004598 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a8:	0cdb      	lsrs	r3, r3, #19
 80043aa:	04db      	lsls	r3, r3, #19
 80043ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043d0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d131      	bne.n	800443c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	0148      	lsls	r0, r1, #5
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	4401      	add	r1, r0
 800440e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	e061      	b.n	80044fc <USB_EPStartXfer+0x490>
 8004438:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d123      	bne.n	800448c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	69b9      	ldr	r1, [r7, #24]
 800445c:	0148      	lsls	r0, r1, #5
 800445e:	69f9      	ldr	r1, [r7, #28]
 8004460:	4401      	add	r1, r0
 8004462:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004466:	4313      	orrs	r3, r2
 8004468:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004488:	6113      	str	r3, [r2, #16]
 800448a:	e037      	b.n	80044fc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4413      	add	r3, r2
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	8afa      	ldrh	r2, [r7, #22]
 80044a8:	fb03 f202 	mul.w	r2, r3, r2
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	8afb      	ldrh	r3, [r7, #22]
 80044c0:	04d9      	lsls	r1, r3, #19
 80044c2:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <USB_EPStartXfer+0x538>)
 80044c4:	400b      	ands	r3, r1
 80044c6:	69b9      	ldr	r1, [r7, #24]
 80044c8:	0148      	lsls	r0, r1, #5
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	4401      	add	r1, r0
 80044ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044d2:	4313      	orrs	r3, r2
 80044d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ec:	69b9      	ldr	r1, [r7, #24]
 80044ee:	0148      	lsls	r0, r1, #5
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	4401      	add	r1, r0
 80044f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044f8:	4313      	orrs	r3, r2
 80044fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10d      	bne.n	800451e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	68d9      	ldr	r1, [r3, #12]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	460a      	mov	r2, r1
 800451c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	791b      	ldrb	r3, [r3, #4]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d128      	bne.n	8004578 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d110      	bne.n	8004558 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00f      	b.n	8004578 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	0151      	lsls	r1, r2, #5
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	440a      	add	r2, r1
 800456e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	1ff80000 	.word	0x1ff80000

080045a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d14a      	bne.n	800465c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045de:	f040 8086 	bne.w	80046ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	0151      	lsls	r1, r2, #5
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	440a      	add	r2, r1
 80045fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004600:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004604:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	0151      	lsls	r1, r2, #5
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	440a      	add	r2, r1
 8004620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004628:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f242 7210 	movw	r2, #10000	; 0x2710
 8004636:	4293      	cmp	r3, r2
 8004638:	d902      	bls.n	8004640 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
          break;
 800463e:	e056      	b.n	80046ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004658:	d0e7      	beq.n	800462a <USB_EPStopXfer+0x82>
 800465a:	e048      	b.n	80046ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004674:	d13b      	bne.n	80046ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	7812      	ldrb	r2, [r2, #0]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004698:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d902      	bls.n	80046d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
          break;
 80046d2:	e00c      	b.n	80046ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d0e7      	beq.n	80046be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	460b      	mov	r3, r1
 800470c:	71fb      	strb	r3, [r7, #7]
 800470e:	4613      	mov	r3, r2
 8004710:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800471a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d123      	bne.n	800476a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004722:	88bb      	ldrh	r3, [r7, #4]
 8004724:	3303      	adds	r3, #3
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e018      	b.n	8004762 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	031a      	lsls	r2, r3, #12
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4413      	add	r3, r2
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	461a      	mov	r2, r3
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3301      	adds	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3301      	adds	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	3301      	adds	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3e2      	bcc.n	8004730 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3724      	adds	r7, #36	; 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004778:	b480      	push	{r7}
 800477a:	b08b      	sub	sp, #44	; 0x2c
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	4613      	mov	r3, r2
 8004784:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	b29b      	uxth	r3, r3
 8004794:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	e014      	b.n	80047ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	3301      	adds	r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	3301      	adds	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	3301      	adds	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	3301      	adds	r3, #1
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3e6      	bcc.n	80047a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047d6:	8bfb      	ldrh	r3, [r7, #30]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01e      	beq.n	800481a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e6:	461a      	mov	r2, r3
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	701a      	strb	r2, [r3, #0]
      i++;
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	3301      	adds	r3, #1
 8004806:	623b      	str	r3, [r7, #32]
      pDest++;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	3301      	adds	r3, #1
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	3b01      	subs	r3, #1
 8004812:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004814:	8bfb      	ldrh	r3, [r7, #30]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ea      	bne.n	80047f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800481c:	4618      	mov	r0, r3
 800481e:	372c      	adds	r7, #44	; 0x2c
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d12c      	bne.n	800489e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	db12      	blt.n	800487c <USB_EPSetStall+0x54>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00f      	beq.n	800487c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800487a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e02b      	b.n	80048f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	db12      	blt.n	80048d6 <USB_EPSetStall+0xae>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d128      	bne.n	8004972 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800493e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d003      	beq.n	8004950 <USB_EPClearStall+0x4c>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	791b      	ldrb	r3, [r3, #4]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d138      	bne.n	80049c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	0151      	lsls	r1, r2, #5
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	440a      	add	r2, r1
 8004966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e027      	b.n	80049c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004990:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	791b      	ldrb	r3, [r3, #4]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d003      	beq.n	80049a2 <USB_EPClearStall+0x9e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	791b      	ldrb	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d10f      	bne.n	80049c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4a:	f023 0302 	bic.w	r3, r3, #2
 8004a4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a78:	f023 0303 	bic.w	r3, r3, #3
 8004a7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	0c1b      	lsrs	r3, r3, #16
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	b29b      	uxth	r3, r3
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b087      	sub	sp, #28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 030f 	and.w	r3, r3, #15
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	01db      	lsls	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c00:	f023 0307 	bic.w	r3, r3, #7
 8004c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	460b      	mov	r3, r1
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	333c      	adds	r3, #60	; 0x3c
 8004c3e:	3304      	adds	r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <USB_EP0_OutStart+0xb8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d90a      	bls.n	8004c62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c5c:	d101      	bne.n	8004c62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e037      	b.n	8004cd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f043 0318 	orr.w	r3, r3, #24
 8004c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ca8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004caa:	7afb      	ldrb	r3, [r7, #11]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10f      	bne.n	8004cd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	4f54300a 	.word	0x4f54300a

08004ce4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004cfc:	d901      	bls.n	8004d02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e01b      	b.n	8004d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	daf2      	bge.n	8004cf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d26:	d901      	bls.n	8004d2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e006      	b.n	8004d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d0f0      	beq.n	8004d1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d54:	2010      	movs	r0, #16
 8004d56:	f002 f92d 	bl	8006fb4 <USBD_static_malloc>
 8004d5a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	32b0      	adds	r2, #176	; 0xb0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d72:	2302      	movs	r3, #2
 8004d74:	e048      	b.n	8004e08 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	32b0      	adds	r2, #176	; 0xb0
 8004d80:	68f9      	ldr	r1, [r7, #12]
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	32b0      	adds	r2, #176	; 0xb0
 8004d90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7c1b      	ldrb	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <USBD_HID_Init+0xc8>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	3326      	adds	r3, #38	; 0x26
 8004db8:	2207      	movs	r2, #7
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	e00c      	b.n	8004dd8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004dbe:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <USBD_HID_Init+0xc8>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3326      	adds	r3, #38	; 0x26
 8004dd4:	220a      	movs	r2, #10
 8004dd6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004dd8:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <USBD_HID_Init+0xc8>)
 8004dda:	7819      	ldrb	r1, [r3, #0]
 8004ddc:	2304      	movs	r3, #4
 8004dde:	2203      	movs	r2, #3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 ffd6 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <USBD_HID_Init+0xc8>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f003 020f 	and.w	r2, r3, #15
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3324      	adds	r3, #36	; 0x24
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200000bf 	.word	0x200000bf

08004e14 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004e20:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <USBD_HID_DeInit+0x8c>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 ffd9 	bl	8006dde <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004e2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <USBD_HID_DeInit+0x8c>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3324      	adds	r3, #36	; 0x24
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <USBD_HID_DeInit+0x8c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3326      	adds	r3, #38	; 0x26
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	32b0      	adds	r2, #176	; 0xb0
 8004e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	32b0      	adds	r2, #176	; 0xb0
 8004e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f002 f8a5 	bl	8006fd0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	32b0      	adds	r2, #176	; 0xb0
 8004e90:	2100      	movs	r1, #0
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200000bf 	.word	0x200000bf

08004ea4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	32b0      	adds	r2, #176	; 0xb0
 8004eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0e8      	b.n	80050a2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d046      	beq.n	8004f6a <USBD_HID_Setup+0xc6>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f040 80d8 	bne.w	8005092 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	3b02      	subs	r3, #2
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	d836      	bhi.n	8004f5a <USBD_HID_Setup+0xb6>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <USBD_HID_Setup+0x50>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f4b 	.word	0x08004f4b
 8004ef8:	08004f2b 	.word	0x08004f2b
 8004efc:	08004f5b 	.word	0x08004f5b
 8004f00:	08004f5b 	.word	0x08004f5b
 8004f04:	08004f5b 	.word	0x08004f5b
 8004f08:	08004f5b 	.word	0x08004f5b
 8004f0c:	08004f5b 	.word	0x08004f5b
 8004f10:	08004f5b 	.word	0x08004f5b
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f1d 	.word	0x08004f1d
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	885b      	ldrh	r3, [r3, #2]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]
          break;
 8004f28:	e01e      	b.n	8004f68 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f001 fbe7 	bl	8006704 <USBD_CtlSendData>
          break;
 8004f36:	e017      	b.n	8004f68 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	885b      	ldrh	r3, [r3, #2]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]
          break;
 8004f48:	e00e      	b.n	8004f68 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fbd6 	bl	8006704 <USBD_CtlSendData>
          break;
 8004f58:	e006      	b.n	8004f68 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 fb54 	bl	800660a <USBD_CtlError>
          ret = USBD_FAIL;
 8004f62:	2303      	movs	r3, #3
 8004f64:	75fb      	strb	r3, [r7, #23]
          break;
 8004f66:	bf00      	nop
      }
      break;
 8004f68:	e09a      	b.n	80050a0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b0b      	cmp	r3, #11
 8004f70:	f200 8086 	bhi.w	8005080 <USBD_HID_Setup+0x1dc>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <USBD_HID_Setup+0xd8>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	0800508f 	.word	0x0800508f
 8004f84:	08005081 	.word	0x08005081
 8004f88:	08005081 	.word	0x08005081
 8004f8c:	08005081 	.word	0x08005081
 8004f90:	08005081 	.word	0x08005081
 8004f94:	08004fd7 	.word	0x08004fd7
 8004f98:	08005081 	.word	0x08005081
 8004f9c:	08005081 	.word	0x08005081
 8004fa0:	08005081 	.word	0x08005081
 8004fa4:	0800502f 	.word	0x0800502f
 8004fa8:	08005059 	.word	0x08005059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d107      	bne.n	8004fc8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fb8:	f107 030a 	add.w	r3, r7, #10
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fb9f 	bl	8006704 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc6:	e063      	b.n	8005090 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fb1d 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd4:	e05c      	b.n	8005090 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	885b      	ldrh	r3, [r3, #2]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b22      	cmp	r3, #34	; 0x22
 8004fe0:	d108      	bne.n	8004ff4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	88db      	ldrh	r3, [r3, #6]
 8004fe6:	2b3f      	cmp	r3, #63	; 0x3f
 8004fe8:	bf28      	it	cs
 8004fea:	233f      	movcs	r3, #63	; 0x3f
 8004fec:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <USBD_HID_Setup+0x208>)
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e015      	b.n	8005020 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	885b      	ldrh	r3, [r3, #2]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b21      	cmp	r3, #33	; 0x21
 8004ffe:	d108      	bne.n	8005012 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005000:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <USBD_HID_Setup+0x20c>)
 8005002:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	88db      	ldrh	r3, [r3, #6]
 8005008:	2b09      	cmp	r3, #9
 800500a:	bf28      	it	cs
 800500c:	2309      	movcs	r3, #9
 800500e:	82bb      	strh	r3, [r7, #20]
 8005010:	e006      	b.n	8005020 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 faf8 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 800501a:	2303      	movs	r3, #3
 800501c:	75fb      	strb	r3, [r7, #23]
            break;
 800501e:	e037      	b.n	8005090 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005020:	8abb      	ldrh	r3, [r7, #20]
 8005022:	461a      	mov	r2, r3
 8005024:	6939      	ldr	r1, [r7, #16]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fb6c 	bl	8006704 <USBD_CtlSendData>
          break;
 800502c:	e030      	b.n	8005090 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b03      	cmp	r3, #3
 8005038:	d107      	bne.n	800504a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3308      	adds	r3, #8
 800503e:	2201      	movs	r2, #1
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fb5e 	bl	8006704 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005048:	e022      	b.n	8005090 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fadc 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 8005052:	2303      	movs	r3, #3
 8005054:	75fb      	strb	r3, [r7, #23]
          break;
 8005056:	e01b      	b.n	8005090 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b03      	cmp	r3, #3
 8005062:	d106      	bne.n	8005072 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	885b      	ldrh	r3, [r3, #2]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	461a      	mov	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005070:	e00e      	b.n	8005090 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fac8 	bl	800660a <USBD_CtlError>
            ret = USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e007      	b.n	8005090 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fac1 	bl	800660a <USBD_CtlError>
          ret = USBD_FAIL;
 8005088:	2303      	movs	r3, #3
 800508a:	75fb      	strb	r3, [r7, #23]
          break;
 800508c:	e000      	b.n	8005090 <USBD_HID_Setup+0x1ec>
          break;
 800508e:	bf00      	nop
      }
      break;
 8005090:	e006      	b.n	80050a0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 fab8 	bl	800660a <USBD_CtlError>
      ret = USBD_FAIL;
 800509a:	2303      	movs	r3, #3
 800509c:	75fb      	strb	r3, [r7, #23]
      break;
 800509e:	bf00      	nop
  }

  return (uint8_t)ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000080 	.word	0x20000080
 80050b0:	20000068 	.word	0x20000068

080050b4 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	32b0      	adds	r2, #176	; 0xb0
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	e014      	b.n	8005106 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d10d      	bne.n	8005104 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	7b1b      	ldrb	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2201      	movs	r2, #1
 80050f4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <USBD_HID_SendReport+0x5c>)
 80050f8:	7819      	ldrb	r1, [r3, #0]
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f001 ff15 	bl	8006f2e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	200000bf 	.word	0x200000bf

08005114 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800511c:	2181      	movs	r1, #129	; 0x81
 800511e:	4809      	ldr	r0, [pc, #36]	; (8005144 <USBD_HID_GetFSCfgDesc+0x30>)
 8005120:	f000 fc3b 	bl	800599a <USBD_GetEpDesc>
 8005124:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	220a      	movs	r2, #10
 8005130:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2222      	movs	r2, #34	; 0x22
 8005136:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000044 	.word	0x20000044

08005148 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005150:	2181      	movs	r1, #129	; 0x81
 8005152:	4809      	ldr	r0, [pc, #36]	; (8005178 <USBD_HID_GetHSCfgDesc+0x30>)
 8005154:	f000 fc21 	bl	800599a <USBD_GetEpDesc>
 8005158:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2207      	movs	r2, #7
 8005164:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2222      	movs	r2, #34	; 0x22
 800516a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800516c:	4b02      	ldr	r3, [pc, #8]	; (8005178 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000044 	.word	0x20000044

0800517c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005184:	2181      	movs	r1, #129	; 0x81
 8005186:	4809      	ldr	r0, [pc, #36]	; (80051ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005188:	f000 fc07 	bl	800599a <USBD_GetEpDesc>
 800518c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	220a      	movs	r2, #10
 8005198:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2222      	movs	r2, #34	; 0x22
 800519e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80051a0:	4b02      	ldr	r3, [pc, #8]	; (80051ac <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000044 	.word	0x20000044

080051b0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	32b0      	adds	r2, #176	; 0xb0
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	2200      	movs	r2, #0
 80051cc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	220a      	movs	r2, #10
 80051e8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80051ea:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000074 	.word	0x20000074

080051fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4613      	mov	r3, r2
 8005208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	e01f      	b.n	8005254 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	79fa      	ldrb	r2, [r7, #7]
 8005246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f001 fd3b 	bl	8006cc4 <USBD_LL_Init>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005252:	7dfb      	ldrb	r3, [r7, #23]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005270:	2303      	movs	r3, #3
 8005272:	e025      	b.n	80052c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	32ae      	adds	r2, #174	; 0xae
 8005286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00f      	beq.n	80052b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	32ae      	adds	r2, #174	; 0xae
 800529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f107 020e 	add.w	r2, r7, #14
 80052a4:	4610      	mov	r0, r2
 80052a6:	4798      	blx	r3
 80052a8:	4602      	mov	r2, r0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 fd43 	bl	8006d5c <USBD_LL_Start>
 80052d6:	4603      	mov	r3, r0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	4611      	mov	r1, r2
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	4798      	blx	r3
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	4611      	mov	r1, r2
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	4798      	blx	r3
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005354:	2303      	movs	r3, #3
 8005356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f90e 	bl	8006596 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2b02      	cmp	r3, #2
 800539c:	d01a      	beq.n	80053d4 <USBD_LL_SetupStage+0x72>
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d822      	bhi.n	80053e8 <USBD_LL_SetupStage+0x86>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <USBD_LL_SetupStage+0x4a>
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d00a      	beq.n	80053c0 <USBD_LL_SetupStage+0x5e>
 80053aa:	e01d      	b.n	80053e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fb65 	bl	8005a84 <USBD_StdDevReq>
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
      break;
 80053be:	e020      	b.n	8005402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fbcd 	bl	8005b68 <USBD_StdItfReq>
 80053ce:	4603      	mov	r3, r0
 80053d0:	73fb      	strb	r3, [r7, #15]
      break;
 80053d2:	e016      	b.n	8005402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fc2f 	bl	8005c40 <USBD_StdEPReq>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]
      break;
 80053e6:	e00c      	b.n	8005402 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 fd10 	bl	8006e1c <USBD_LL_StallEP>
 80053fc:	4603      	mov	r3, r0
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	bf00      	nop
  }

  return ret;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	460b      	mov	r3, r1
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d16e      	bne.n	8005502 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800542a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005432:	2b03      	cmp	r3, #3
 8005434:	f040 8098 	bne.w	8005568 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	429a      	cmp	r2, r3
 8005442:	d913      	bls.n	800546c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	1ad2      	subs	r2, r2, r3
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	4293      	cmp	r3, r2
 800545c:	bf28      	it	cs
 800545e:	4613      	movcs	r3, r2
 8005460:	461a      	mov	r2, r3
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f001 f979 	bl	800675c <USBD_CtlContinueRx>
 800546a:	e07d      	b.n	8005568 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2b02      	cmp	r3, #2
 8005478:	d014      	beq.n	80054a4 <USBD_LL_DataOutStage+0x98>
 800547a:	2b02      	cmp	r3, #2
 800547c:	d81d      	bhi.n	80054ba <USBD_LL_DataOutStage+0xae>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <USBD_LL_DataOutStage+0x7c>
 8005482:	2b01      	cmp	r3, #1
 8005484:	d003      	beq.n	800548e <USBD_LL_DataOutStage+0x82>
 8005486:	e018      	b.n	80054ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	75bb      	strb	r3, [r7, #22]
            break;
 800548c:	e018      	b.n	80054c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fa64 	bl	8005966 <USBD_CoreFindIF>
 800549e:	4603      	mov	r3, r0
 80054a0:	75bb      	strb	r3, [r7, #22]
            break;
 80054a2:	e00d      	b.n	80054c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa66 	bl	8005980 <USBD_CoreFindEP>
 80054b4:	4603      	mov	r3, r0
 80054b6:	75bb      	strb	r3, [r7, #22]
            break;
 80054b8:	e002      	b.n	80054c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75bb      	strb	r3, [r7, #22]
            break;
 80054be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80054c0:	7dbb      	ldrb	r3, [r7, #22]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d119      	bne.n	80054fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d113      	bne.n	80054fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80054d2:	7dba      	ldrb	r2, [r7, #22]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	32ae      	adds	r2, #174	; 0xae
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80054e2:	7dba      	ldrb	r2, [r7, #22]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80054ea:	7dba      	ldrb	r2, [r7, #22]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	32ae      	adds	r2, #174	; 0xae
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 f93f 	bl	800677e <USBD_CtlSendStatus>
 8005500:	e032      	b.n	8005568 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2db      	uxtb	r3, r3
 800550a:	4619      	mov	r1, r3
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fa37 	bl	8005980 <USBD_CoreFindEP>
 8005512:	4603      	mov	r3, r0
 8005514:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005516:	7dbb      	ldrb	r3, [r7, #22]
 8005518:	2bff      	cmp	r3, #255	; 0xff
 800551a:	d025      	beq.n	8005568 <USBD_LL_DataOutStage+0x15c>
 800551c:	7dbb      	ldrb	r3, [r7, #22]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d122      	bne.n	8005568 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d117      	bne.n	800555e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800552e:	7dba      	ldrb	r2, [r7, #22]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	32ae      	adds	r2, #174	; 0xae
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800553e:	7dba      	ldrb	r2, [r7, #22]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005546:	7dba      	ldrb	r2, [r7, #22]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	32ae      	adds	r2, #174	; 0xae
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	7afa      	ldrb	r2, [r7, #11]
 8005554:	4611      	mov	r1, r2
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	4798      	blx	r3
 800555a:	4603      	mov	r3, r0
 800555c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	e000      	b.n	800556a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	460b      	mov	r3, r1
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d16f      	bne.n	8005666 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3314      	adds	r3, #20
 800558a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005592:	2b02      	cmp	r3, #2
 8005594:	d15a      	bne.n	800564c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d914      	bls.n	80055cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f001 f8be 	bl	800673a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055be:	2300      	movs	r3, #0
 80055c0:	2200      	movs	r2, #0
 80055c2:	2100      	movs	r1, #0
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f001 fcd3 	bl	8006f70 <USBD_LL_PrepareReceive>
 80055ca:	e03f      	b.n	800564c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d11c      	bne.n	8005612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d316      	bcc.n	8005612 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d20f      	bcs.n	8005612 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055f2:	2200      	movs	r2, #0
 80055f4:	2100      	movs	r1, #0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 f89f 	bl	800673a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005604:	2300      	movs	r3, #0
 8005606:	2200      	movs	r2, #0
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f001 fcb0 	bl	8006f70 <USBD_LL_PrepareReceive>
 8005610:	e01c      	b.n	800564c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b03      	cmp	r3, #3
 800561c:	d10f      	bne.n	800563e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800563e:	2180      	movs	r1, #128	; 0x80
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f001 fbeb 	bl	8006e1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f001 f8ac 	bl	80067a4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d03a      	beq.n	80056cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fe42 	bl	80052e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005664:	e032      	b.n	80056cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005666:	7afb      	ldrb	r3, [r7, #11]
 8005668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f985 	bl	8005980 <USBD_CoreFindEP>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	2bff      	cmp	r3, #255	; 0xff
 800567e:	d025      	beq.n	80056cc <USBD_LL_DataInStage+0x15a>
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d122      	bne.n	80056cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	d11c      	bne.n	80056cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005692:	7dfa      	ldrb	r2, [r7, #23]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	32ae      	adds	r2, #174	; 0xae
 8005698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80056a2:	7dfa      	ldrb	r2, [r7, #23]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80056aa:	7dfa      	ldrb	r2, [r7, #23]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	32ae      	adds	r2, #174	; 0xae
 80056b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	7afa      	ldrb	r2, [r7, #11]
 80056b8:	4611      	mov	r1, r2
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	4798      	blx	r3
 80056be:	4603      	mov	r3, r0
 80056c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80056c2:	7dbb      	ldrb	r3, [r7, #22]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80056c8:	7dbb      	ldrb	r3, [r7, #22]
 80056ca:	e000      	b.n	80056ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00e      	beq.n	800573c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	6852      	ldr	r2, [r2, #4]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	4611      	mov	r1, r2
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fb25 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	2200      	movs	r2, #0
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fb17 	bl	8006d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	621a      	str	r2, [r3, #32]

  return ret;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d006      	beq.n	80057bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d106      	bne.n	80057f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b03      	cmp	r3, #3
 8005814:	d110      	bne.n	8005838 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	32ae      	adds	r2, #174	; 0xae
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e01c      	b.n	800589e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d115      	bne.n	800589c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	32ae      	adds	r2, #174	; 0xae
 800587a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	4611      	mov	r1, r2
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	32ae      	adds	r2, #174	; 0xae
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e01c      	b.n	8005902 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d115      	bne.n	8005900 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	32ae      	adds	r2, #174	; 0xae
 80058de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	32ae      	adds	r2, #174	; 0xae
 80058f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	4611      	mov	r1, r2
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6852      	ldr	r2, [r2, #4]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005958:	2303      	movs	r3, #3
 800595a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005972:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800598c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	885b      	ldrh	r3, [r3, #2]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	429a      	cmp	r2, r3
 80059c0:	d920      	bls.n	8005a04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80059ca:	e013      	b.n	80059f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80059cc:	f107 030a 	add.w	r3, r7, #10
 80059d0:	4619      	mov	r1, r3
 80059d2:	6978      	ldr	r0, [r7, #20]
 80059d4:	f000 f81b 	bl	8005a0e <USBD_GetNextDesc>
 80059d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d108      	bne.n	80059f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	789b      	ldrb	r3, [r3, #2]
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d008      	beq.n	8005a02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	885b      	ldrh	r3, [r3, #2]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d8e5      	bhi.n	80059cc <USBD_GetEpDesc+0x32>
 8005a00:	e000      	b.n	8005a04 <USBD_GetEpDesc+0x6a>
          break;
 8005a02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005a04:	693b      	ldr	r3, [r7, #16]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4413      	add	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a66:	8a3b      	ldrh	r3, [r7, #16]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	b21a      	sxth	r2, r3
 8005a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	b21b      	sxth	r3, r3
 8005a74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a76:	89fb      	ldrh	r3, [r7, #14]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d005      	beq.n	8005aaa <USBD_StdDevReq+0x26>
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d857      	bhi.n	8005b52 <USBD_StdDevReq+0xce>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00f      	beq.n	8005ac6 <USBD_StdDevReq+0x42>
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d153      	bne.n	8005b52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	32ae      	adds	r2, #174	; 0xae
 8005ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	e04a      	b.n	8005b5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b09      	cmp	r3, #9
 8005acc:	d83b      	bhi.n	8005b46 <USBD_StdDevReq+0xc2>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <USBD_StdDevReq+0x50>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005b3d 	.word	0x08005b3d
 8005adc:	08005b47 	.word	0x08005b47
 8005ae0:	08005b33 	.word	0x08005b33
 8005ae4:	08005b47 	.word	0x08005b47
 8005ae8:	08005b07 	.word	0x08005b07
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b47 	.word	0x08005b47
 8005af4:	08005b1f 	.word	0x08005b1f
 8005af8:	08005b11 	.word	0x08005b11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa3c 	bl	8005f7c <USBD_GetDescriptor>
          break;
 8005b04:	e024      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fba1 	bl	8006250 <USBD_SetAddress>
          break;
 8005b0e:	e01f      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fbe0 	bl	80062d8 <USBD_SetConfig>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8005b1c:	e018      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fc83 	bl	800642c <USBD_GetConfig>
          break;
 8005b26:	e013      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fcb4 	bl	8006498 <USBD_GetStatus>
          break;
 8005b30:	e00e      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fce3 	bl	8006500 <USBD_SetFeature>
          break;
 8005b3a:	e009      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd07 	bl	8006552 <USBD_ClrFeature>
          break;
 8005b44:	e004      	b.n	8005b50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fd5e 	bl	800660a <USBD_CtlError>
          break;
 8005b4e:	bf00      	nop
      }
      break;
 8005b50:	e004      	b.n	8005b5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fd58 	bl	800660a <USBD_CtlError>
      break;
 8005b5a:	bf00      	nop
  }

  return ret;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop

08005b68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d005      	beq.n	8005b8e <USBD_StdItfReq+0x26>
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d852      	bhi.n	8005c2c <USBD_StdItfReq+0xc4>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <USBD_StdItfReq+0x26>
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d14e      	bne.n	8005c2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d840      	bhi.n	8005c1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	889b      	ldrh	r3, [r3, #4]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d836      	bhi.n	8005c14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	889b      	ldrh	r3, [r3, #4]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fed9 	bl	8005966 <USBD_CoreFindIF>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2bff      	cmp	r3, #255	; 0xff
 8005bbc:	d01d      	beq.n	8005bfa <USBD_StdItfReq+0x92>
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11a      	bne.n	8005bfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005bc4:	7bba      	ldrb	r2, [r7, #14]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32ae      	adds	r2, #174	; 0xae
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00f      	beq.n	8005bf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005bd4:	7bba      	ldrb	r2, [r7, #14]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005bdc:	7bba      	ldrb	r2, [r7, #14]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	32ae      	adds	r2, #174	; 0xae
 8005be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005bf2:	e004      	b.n	8005bfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005bf8:	e001      	b.n	8005bfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	88db      	ldrh	r3, [r3, #6]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d110      	bne.n	8005c28 <USBD_StdItfReq+0xc0>
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10d      	bne.n	8005c28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fdb6 	bl	800677e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c12:	e009      	b.n	8005c28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fcf7 	bl	800660a <USBD_CtlError>
          break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fcf2 	bl	800660a <USBD_CtlError>
          break;
 8005c26:	e000      	b.n	8005c2a <USBD_StdItfReq+0xc2>
          break;
 8005c28:	bf00      	nop
      }
      break;
 8005c2a:	e004      	b.n	8005c36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fceb 	bl	800660a <USBD_CtlError>
      break;
 8005c34:	bf00      	nop
  }

  return ret;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	889b      	ldrh	r3, [r3, #4]
 8005c52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d007      	beq.n	8005c70 <USBD_StdEPReq+0x30>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	f200 817f 	bhi.w	8005f64 <USBD_StdEPReq+0x324>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d02a      	beq.n	8005cc0 <USBD_StdEPReq+0x80>
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	f040 817a 	bne.w	8005f64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff fe83 	bl	8005980 <USBD_CoreFindEP>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c7e:	7b7b      	ldrb	r3, [r7, #13]
 8005c80:	2bff      	cmp	r3, #255	; 0xff
 8005c82:	f000 8174 	beq.w	8005f6e <USBD_StdEPReq+0x32e>
 8005c86:	7b7b      	ldrb	r3, [r7, #13]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f040 8170 	bne.w	8005f6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005c8e:	7b7a      	ldrb	r2, [r7, #13]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005c96:	7b7a      	ldrb	r2, [r7, #13]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	32ae      	adds	r2, #174	; 0xae
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8163 	beq.w	8005f6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005ca8:	7b7a      	ldrb	r2, [r7, #13]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32ae      	adds	r2, #174	; 0xae
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	4798      	blx	r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cbe:	e156      	b.n	8005f6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d008      	beq.n	8005cda <USBD_StdEPReq+0x9a>
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	f300 8145 	bgt.w	8005f58 <USBD_StdEPReq+0x318>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 809b 	beq.w	8005e0a <USBD_StdEPReq+0x1ca>
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d03c      	beq.n	8005d52 <USBD_StdEPReq+0x112>
 8005cd8:	e13e      	b.n	8005f58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d002      	beq.n	8005cec <USBD_StdEPReq+0xac>
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d016      	beq.n	8005d18 <USBD_StdEPReq+0xd8>
 8005cea:	e02c      	b.n	8005d46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <USBD_StdEPReq+0xce>
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d00a      	beq.n	8005d0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cf8:	7bbb      	ldrb	r3, [r7, #14]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 f88d 	bl	8006e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d02:	2180      	movs	r1, #128	; 0x80
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 f889 	bl	8006e1c <USBD_LL_StallEP>
 8005d0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d0c:	e020      	b.n	8005d50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fc7a 	bl	800660a <USBD_CtlError>
              break;
 8005d16:	e01b      	b.n	8005d50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	885b      	ldrh	r3, [r3, #2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10e      	bne.n	8005d3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <USBD_StdEPReq+0xfe>
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d008      	beq.n	8005d3e <USBD_StdEPReq+0xfe>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	88db      	ldrh	r3, [r3, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d34:	7bbb      	ldrb	r3, [r7, #14]
 8005d36:	4619      	mov	r1, r3
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 f86f 	bl	8006e1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fd1d 	bl	800677e <USBD_CtlSendStatus>

              break;
 8005d44:	e004      	b.n	8005d50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fc5e 	bl	800660a <USBD_CtlError>
              break;
 8005d4e:	bf00      	nop
          }
          break;
 8005d50:	e107      	b.n	8005f62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d002      	beq.n	8005d64 <USBD_StdEPReq+0x124>
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d016      	beq.n	8005d90 <USBD_StdEPReq+0x150>
 8005d62:	e04b      	b.n	8005dfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <USBD_StdEPReq+0x146>
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d00a      	beq.n	8005d86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 f851 	bl	8006e1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f001 f84d 	bl	8006e1c <USBD_LL_StallEP>
 8005d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d84:	e040      	b.n	8005e08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fc3e 	bl	800660a <USBD_CtlError>
              break;
 8005d8e:	e03b      	b.n	8005e08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	885b      	ldrh	r3, [r3, #2]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d136      	bne.n	8005e06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 f857 	bl	8006e5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fce6 	bl	800677e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fde2 	bl	8005980 <USBD_CoreFindEP>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dc0:	7b7b      	ldrb	r3, [r7, #13]
 8005dc2:	2bff      	cmp	r3, #255	; 0xff
 8005dc4:	d01f      	beq.n	8005e06 <USBD_StdEPReq+0x1c6>
 8005dc6:	7b7b      	ldrb	r3, [r7, #13]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11c      	bne.n	8005e06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005dcc:	7b7a      	ldrb	r2, [r7, #13]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005dd4:	7b7a      	ldrb	r2, [r7, #13]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	32ae      	adds	r2, #174	; 0xae
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005de4:	7b7a      	ldrb	r2, [r7, #13]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32ae      	adds	r2, #174	; 0xae
 8005dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005dfa:	e004      	b.n	8005e06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fc03 	bl	800660a <USBD_CtlError>
              break;
 8005e04:	e000      	b.n	8005e08 <USBD_StdEPReq+0x1c8>
              break;
 8005e06:	bf00      	nop
          }
          break;
 8005e08:	e0ab      	b.n	8005f62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d002      	beq.n	8005e1c <USBD_StdEPReq+0x1dc>
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d032      	beq.n	8005e80 <USBD_StdEPReq+0x240>
 8005e1a:	e097      	b.n	8005f4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e1c:	7bbb      	ldrb	r3, [r7, #14]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <USBD_StdEPReq+0x1f2>
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b80      	cmp	r3, #128	; 0x80
 8005e26:	d004      	beq.n	8005e32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fbed 	bl	800660a <USBD_CtlError>
                break;
 8005e30:	e091      	b.n	8005f56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da0b      	bge.n	8005e52 <USBD_StdEPReq+0x212>
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	3310      	adds	r3, #16
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3304      	adds	r3, #4
 8005e50:	e00b      	b.n	8005e6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e52:	7bbb      	ldrb	r3, [r7, #14]
 8005e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	3304      	adds	r3, #4
 8005e6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2202      	movs	r2, #2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fc43 	bl	8006704 <USBD_CtlSendData>
              break;
 8005e7e:	e06a      	b.n	8005f56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da11      	bge.n	8005eac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	f003 020f 	and.w	r2, r3, #15
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3324      	adds	r3, #36	; 0x24
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d117      	bne.n	8005ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fbb0 	bl	800660a <USBD_CtlError>
                  break;
 8005eaa:	e054      	b.n	8005f56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	f003 020f 	and.w	r2, r3, #15
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fb9d 	bl	800660a <USBD_CtlError>
                  break;
 8005ed0:	e041      	b.n	8005f56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da0b      	bge.n	8005ef2 <USBD_StdEPReq+0x2b2>
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	3310      	adds	r3, #16
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	3304      	adds	r3, #4
 8005ef0:	e00b      	b.n	8005f0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	3304      	adds	r3, #4
 8005f0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <USBD_StdEPReq+0x2d8>
 8005f12:	7bbb      	ldrb	r3, [r7, #14]
 8005f14:	2b80      	cmp	r3, #128	; 0x80
 8005f16:	d103      	bne.n	8005f20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e00e      	b.n	8005f3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 ffb7 	bl	8006e98 <USBD_LL_IsStallEP>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2202      	movs	r2, #2
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fbdd 	bl	8006704 <USBD_CtlSendData>
              break;
 8005f4a:	e004      	b.n	8005f56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fb5b 	bl	800660a <USBD_CtlError>
              break;
 8005f54:	bf00      	nop
          }
          break;
 8005f56:	e004      	b.n	8005f62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb55 	bl	800660a <USBD_CtlError>
          break;
 8005f60:	bf00      	nop
      }
      break;
 8005f62:	e005      	b.n	8005f70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb4f 	bl	800660a <USBD_CtlError>
      break;
 8005f6c:	e000      	b.n	8005f70 <USBD_StdEPReq+0x330>
      break;
 8005f6e:	bf00      	nop
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	2b06      	cmp	r3, #6
 8005f9e:	f200 8128 	bhi.w	80061f2 <USBD_GetDescriptor+0x276>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <USBD_GetDescriptor+0x2c>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc5 	.word	0x08005fc5
 8005fac:	08005fdd 	.word	0x08005fdd
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	080061f3 	.word	0x080061f3
 8005fb8:	080061f3 	.word	0x080061f3
 8005fbc:	08006193 	.word	0x08006193
 8005fc0:	080061bf 	.word	0x080061bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7c12      	ldrb	r2, [r2, #16]
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	60f8      	str	r0, [r7, #12]
      break;
 8005fda:	e112      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f107 0208 	add.w	r2, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ffe:	e100      	b.n	8006202 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f107 0208 	add.w	r2, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3301      	adds	r3, #1
 8006016:	2202      	movs	r2, #2
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e0f2      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	885b      	ldrh	r3, [r3, #2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b05      	cmp	r3, #5
 8006024:	f200 80ac 	bhi.w	8006180 <USBD_GetDescriptor+0x204>
 8006028:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <USBD_GetDescriptor+0xb4>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006049 	.word	0x08006049
 8006034:	0800607d 	.word	0x0800607d
 8006038:	080060b1 	.word	0x080060b1
 800603c:	080060e5 	.word	0x080060e5
 8006040:	08006119 	.word	0x08006119
 8006044:	0800614d 	.word	0x0800614d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800606a:	e091      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 facb 	bl	800660a <USBD_CtlError>
            err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
          break;
 800607a:	e089      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	7c12      	ldrb	r2, [r2, #16]
 8006094:	f107 0108 	add.w	r1, r7, #8
 8006098:	4610      	mov	r0, r2
 800609a:	4798      	blx	r3
 800609c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609e:	e077      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fab1 	bl	800660a <USBD_CtlError>
            err++;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3301      	adds	r3, #1
 80060ac:	72fb      	strb	r3, [r7, #11]
          break;
 80060ae:	e06f      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e05d      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa97 	bl	800660a <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e055      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e043      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa7d 	bl	800660a <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e03b      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e029      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa63 	bl	800660a <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e021      	b.n	8006190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e00f      	b.n	8006190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa49 	bl	800660a <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e007      	b.n	8006190 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fa41 	bl	800660a <USBD_CtlError>
          err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800618e:	bf00      	nop
      }
      break;
 8006190:	e037      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	4610      	mov	r0, r2
 80061a8:	4798      	blx	r3
 80061aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061ac:	e029      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fa2a 	bl	800660a <USBD_CtlError>
        err++;
 80061b6:	7afb      	ldrb	r3, [r7, #11]
 80061b8:	3301      	adds	r3, #1
 80061ba:	72fb      	strb	r3, [r7, #11]
      break;
 80061bc:	e021      	b.n	8006202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10d      	bne.n	80061e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
 80061d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	2207      	movs	r2, #7
 80061de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061e0:	e00f      	b.n	8006202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa10 	bl	800660a <USBD_CtlError>
        err++;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	3301      	adds	r3, #1
 80061ee:	72fb      	strb	r3, [r7, #11]
      break;
 80061f0:	e007      	b.n	8006202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa08 	bl	800660a <USBD_CtlError>
      err++;
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	3301      	adds	r3, #1
 80061fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006200:	bf00      	nop
  }

  if (err != 0U)
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11e      	bne.n	8006246 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d016      	beq.n	800623e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	88da      	ldrh	r2, [r3, #6]
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	4293      	cmp	r3, r2
 800621e:	bf28      	it	cs
 8006220:	4613      	movcs	r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	461a      	mov	r2, r3
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa69 	bl	8006704 <USBD_CtlSendData>
 8006232:	e009      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9e7 	bl	800660a <USBD_CtlError>
 800623c:	e004      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fa9d 	bl	800677e <USBD_CtlSendStatus>
 8006244:	e000      	b.n	8006248 <USBD_GetDescriptor+0x2cc>
    return;
 8006246:	bf00      	nop
  }
}
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	889b      	ldrh	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d131      	bne.n	80062c6 <USBD_SetAddress+0x76>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	88db      	ldrh	r3, [r3, #6]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d12d      	bne.n	80062c6 <USBD_SetAddress+0x76>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	885b      	ldrh	r3, [r3, #2]
 800626e:	2b7f      	cmp	r3, #127	; 0x7f
 8006270:	d829      	bhi.n	80062c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	885b      	ldrh	r3, [r3, #2]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d104      	bne.n	8006294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9bc 	bl	800660a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	e01d      	b.n	80062d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7bfa      	ldrb	r2, [r7, #15]
 8006298:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fe25 	bl	8006ef0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa69 	bl	800677e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ba:	e009      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	e004      	b.n	80062d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f99e 	bl	800660a <USBD_CtlError>
  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	885b      	ldrh	r3, [r3, #2]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	4b4e      	ldr	r3, [pc, #312]	; (8006428 <USBD_SetConfig+0x150>)
 80062ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062f0:	4b4d      	ldr	r3, [pc, #308]	; (8006428 <USBD_SetConfig+0x150>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d905      	bls.n	8006304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f985 	bl	800660a <USBD_CtlError>
    return USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e08c      	b.n	800641e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d002      	beq.n	8006316 <USBD_SetConfig+0x3e>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d029      	beq.n	8006368 <USBD_SetConfig+0x90>
 8006314:	e075      	b.n	8006402 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <USBD_SetConfig+0x150>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800631e:	4b42      	ldr	r3, [pc, #264]	; (8006428 <USBD_SetConfig+0x150>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006328:	4b3f      	ldr	r3, [pc, #252]	; (8006428 <USBD_SetConfig+0x150>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fe ffe1 	bl	80052f6 <USBD_SetClassConfig>
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f962 	bl	800660a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800634e:	e065      	b.n	800641c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa14 	bl	800677e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2203      	movs	r2, #3
 800635a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800635e:	e05d      	b.n	800641c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa0c 	bl	800677e <USBD_CtlSendStatus>
      break;
 8006366:	e059      	b.n	800641c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006368:	4b2f      	ldr	r3, [pc, #188]	; (8006428 <USBD_SetConfig+0x150>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d112      	bne.n	8006396 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006378:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <USBD_SetConfig+0x150>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <USBD_SetConfig+0x150>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fe ffd0 	bl	800532e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9f5 	bl	800677e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006394:	e042      	b.n	800641c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006396:	4b24      	ldr	r3, [pc, #144]	; (8006428 <USBD_SetConfig+0x150>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d02a      	beq.n	80063fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fe ffbe 	bl	800532e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063b2:	4b1d      	ldr	r3, [pc, #116]	; (8006428 <USBD_SetConfig+0x150>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <USBD_SetConfig+0x150>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fe ff97 	bl	80052f6 <USBD_SetClassConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00f      	beq.n	80063f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f918 	bl	800660a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fe ffa3 	bl	800532e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80063f0:	e014      	b.n	800641c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9c3 	bl	800677e <USBD_CtlSendStatus>
      break;
 80063f8:	e010      	b.n	800641c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9bf 	bl	800677e <USBD_CtlSendStatus>
      break;
 8006400:	e00c      	b.n	800641c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f900 	bl	800660a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <USBD_SetConfig+0x150>)
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fe ff8c 	bl	800532e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006416:	2303      	movs	r3, #3
 8006418:	73fb      	strb	r3, [r7, #15]
      break;
 800641a:	bf00      	nop
  }

  return ret;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000220 	.word	0x20000220

0800642c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d004      	beq.n	8006448 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8e2 	bl	800660a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006446:	e023      	b.n	8006490 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	dc02      	bgt.n	800645a <USBD_GetConfig+0x2e>
 8006454:	2b00      	cmp	r3, #0
 8006456:	dc03      	bgt.n	8006460 <USBD_GetConfig+0x34>
 8006458:	e015      	b.n	8006486 <USBD_GetConfig+0x5a>
 800645a:	2b03      	cmp	r3, #3
 800645c:	d00b      	beq.n	8006476 <USBD_GetConfig+0x4a>
 800645e:	e012      	b.n	8006486 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3308      	adds	r3, #8
 800646a:	2201      	movs	r2, #1
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f948 	bl	8006704 <USBD_CtlSendData>
        break;
 8006474:	e00c      	b.n	8006490 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	2201      	movs	r2, #1
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f940 	bl	8006704 <USBD_CtlSendData>
        break;
 8006484:	e004      	b.n	8006490 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8be 	bl	800660a <USBD_CtlError>
        break;
 800648e:	bf00      	nop
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d81e      	bhi.n	80064ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d004      	beq.n	80064c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f8a5 	bl	800660a <USBD_CtlError>
        break;
 80064c0:	e01a      	b.n	80064f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f043 0202 	orr.w	r2, r3, #2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	330c      	adds	r3, #12
 80064e2:	2202      	movs	r2, #2
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f90c 	bl	8006704 <USBD_CtlSendData>
      break;
 80064ec:	e004      	b.n	80064f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f88a 	bl	800660a <USBD_CtlError>
      break;
 80064f6:	bf00      	nop
  }
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	885b      	ldrh	r3, [r3, #2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f92f 	bl	800677e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006520:	e013      	b.n	800654a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d10b      	bne.n	8006542 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	889b      	ldrh	r3, [r3, #4]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	b29b      	uxth	r3, r3
 8006532:	b2da      	uxtb	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f91f 	bl	800677e <USBD_CtlSendStatus>
}
 8006540:	e003      	b.n	800654a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f860 	bl	800660a <USBD_CtlError>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b082      	sub	sp, #8
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	2b02      	cmp	r3, #2
 8006568:	d80b      	bhi.n	8006582 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10c      	bne.n	800658c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8ff 	bl	800677e <USBD_CtlSendStatus>
      }
      break;
 8006580:	e004      	b.n	800658c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f840 	bl	800660a <USBD_CtlError>
      break;
 800658a:	e000      	b.n	800658e <USBD_ClrFeature+0x3c>
      break;
 800658c:	bf00      	nop
  }
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff fa41 	bl	8005a48 <SWAPBYTE>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f7ff fa34 	bl	8005a48 <SWAPBYTE>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fa27 	bl	8005a48 <SWAPBYTE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	461a      	mov	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	80da      	strh	r2, [r3, #6]
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006614:	2180      	movs	r1, #128	; 0x80
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc00 	bl	8006e1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fbfc 	bl	8006e1c <USBD_LL_StallEP>
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d042      	beq.n	80066c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006646:	6938      	ldr	r0, [r7, #16]
 8006648:	f000 f842 	bl	80066d0 <USBD_GetLen>
 800664c:	4603      	mov	r3, r0
 800664e:	3301      	adds	r3, #1
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d808      	bhi.n	800666a <USBD_GetString+0x3e>
 8006658:	6938      	ldr	r0, [r7, #16]
 800665a:	f000 f839 	bl	80066d0 <USBD_GetLen>
 800665e:	4603      	mov	r3, r0
 8006660:	3301      	adds	r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	e001      	b.n	800666e <USBD_GetString+0x42>
 800666a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006672:	7dfb      	ldrb	r3, [r7, #23]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	4413      	add	r3, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
  idx++;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	3301      	adds	r3, #1
 8006682:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4413      	add	r3, r2
 800668a:	2203      	movs	r2, #3
 800668c:	701a      	strb	r2, [r3, #0]
  idx++;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	3301      	adds	r3, #1
 8006692:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006694:	e013      	b.n	80066be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	7812      	ldrb	r2, [r2, #0]
 80066a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	3301      	adds	r3, #1
 80066a6:	613b      	str	r3, [r7, #16]
    idx++;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
 80066aa:	3301      	adds	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	3301      	adds	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e7      	bne.n	8006696 <USBD_GetString+0x6a>
 80066c6:	e000      	b.n	80066ca <USBD_GetString+0x9e>
    return;
 80066c8:	bf00      	nop
  }
}
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066e0:	e005      	b.n	80066ee <USBD_GetLen+0x1e>
  {
    len++;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	3301      	adds	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f5      	bne.n	80066e2 <USBD_GetLen+0x12>
  }

  return len;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2202      	movs	r2, #2
 8006714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	2100      	movs	r1, #0
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fbff 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	2100      	movs	r1, #0
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 fbee 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	2100      	movs	r1, #0
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fbfe 	bl	8006f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2204      	movs	r2, #4
 800678a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800678e:	2300      	movs	r3, #0
 8006790:	2200      	movs	r2, #0
 8006792:	2100      	movs	r1, #0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fbca 	bl	8006f2e <USBD_LL_Transmit>

  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2205      	movs	r2, #5
 80067b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b4:	2300      	movs	r3, #0
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbd8 	bl	8006f70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80067d0:	2200      	movs	r2, #0
 80067d2:	490e      	ldr	r1, [pc, #56]	; (800680c <MX_USB_DEVICE_Init+0x40>)
 80067d4:	480e      	ldr	r0, [pc, #56]	; (8006810 <MX_USB_DEVICE_Init+0x44>)
 80067d6:	f7fe fd11 	bl	80051fc <USBD_Init>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80067e0:	f7fa f854 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80067e4:	490b      	ldr	r1, [pc, #44]	; (8006814 <MX_USB_DEVICE_Init+0x48>)
 80067e6:	480a      	ldr	r0, [pc, #40]	; (8006810 <MX_USB_DEVICE_Init+0x44>)
 80067e8:	f7fe fd38 	bl	800525c <USBD_RegisterClass>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067f2:	f7fa f84b 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067f6:	4806      	ldr	r0, [pc, #24]	; (8006810 <MX_USB_DEVICE_Init+0x44>)
 80067f8:	f7fe fd66 	bl	80052c8 <USBD_Start>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006802:	f7fa f843 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006806:	bf00      	nop
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200000c0 	.word	0x200000c0
 8006810:	20000224 	.word	0x20000224
 8006814:	2000000c 	.word	0x2000000c

08006818 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2212      	movs	r2, #18
 8006828:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800682a:	4b03      	ldr	r3, [pc, #12]	; (8006838 <USBD_FS_DeviceDescriptor+0x20>)
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	200000dc 	.word	0x200000dc

0800683c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800684e:	4b03      	ldr	r3, [pc, #12]	; (800685c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	200000f0 	.word	0x200000f0

08006860 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	6039      	str	r1, [r7, #0]
 800686a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d105      	bne.n	800687e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4907      	ldr	r1, [pc, #28]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
 8006876:	4808      	ldr	r0, [pc, #32]	; (8006898 <USBD_FS_ProductStrDescriptor+0x38>)
 8006878:	f7ff fed8 	bl	800662c <USBD_GetString>
 800687c:	e004      	b.n	8006888 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4904      	ldr	r1, [pc, #16]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
 8006882:	4805      	ldr	r0, [pc, #20]	; (8006898 <USBD_FS_ProductStrDescriptor+0x38>)
 8006884:	f7ff fed2 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000500 	.word	0x20000500
 8006898:	080070ac 	.word	0x080070ac

0800689c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	6039      	str	r1, [r7, #0]
 80068a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	4904      	ldr	r1, [pc, #16]	; (80068bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068ac:	4804      	ldr	r0, [pc, #16]	; (80068c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068ae:	f7ff febd 	bl	800662c <USBD_GetString>
  return USBD_StrDesc;
 80068b2:	4b02      	ldr	r3, [pc, #8]	; (80068bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000500 	.word	0x20000500
 80068c0:	080070c4 	.word	0x080070c4

080068c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	6039      	str	r1, [r7, #0]
 80068ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	221a      	movs	r2, #26
 80068d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068d6:	f000 f843 	bl	8006960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068da:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	200000f4 	.word	0x200000f4

080068e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	4907      	ldr	r1, [pc, #28]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
 80068fe:	4808      	ldr	r0, [pc, #32]	; (8006920 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006900:	f7ff fe94 	bl	800662c <USBD_GetString>
 8006904:	e004      	b.n	8006910 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4904      	ldr	r1, [pc, #16]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
 800690a:	4805      	ldr	r0, [pc, #20]	; (8006920 <USBD_FS_ConfigStrDescriptor+0x38>)
 800690c:	f7ff fe8e 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000500 	.word	0x20000500
 8006920:	080070d8 	.word	0x080070d8

08006924 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	6039      	str	r1, [r7, #0]
 800692e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	4907      	ldr	r1, [pc, #28]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800693a:	4808      	ldr	r0, [pc, #32]	; (800695c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800693c:	f7ff fe76 	bl	800662c <USBD_GetString>
 8006940:	e004      	b.n	800694c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4904      	ldr	r1, [pc, #16]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006946:	4805      	ldr	r0, [pc, #20]	; (800695c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006948:	f7ff fe70 	bl	800662c <USBD_GetString>
  }
  return USBD_StrDesc;
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000500 	.word	0x20000500
 800695c:	080070e4 	.word	0x080070e4

08006960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <Get_SerialNum+0x44>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <Get_SerialNum+0x48>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <Get_SerialNum+0x4c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006986:	2208      	movs	r2, #8
 8006988:	4909      	ldr	r1, [pc, #36]	; (80069b0 <Get_SerialNum+0x50>)
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f814 	bl	80069b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006990:	2204      	movs	r2, #4
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <Get_SerialNum+0x54>)
 8006994:	68b8      	ldr	r0, [r7, #8]
 8006996:	f000 f80f 	bl	80069b8 <IntToUnicode>
  }
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	1fff7a10 	.word	0x1fff7a10
 80069a8:	1fff7a14 	.word	0x1fff7a14
 80069ac:	1fff7a18 	.word	0x1fff7a18
 80069b0:	200000f6 	.word	0x200000f6
 80069b4:	20000106 	.word	0x20000106

080069b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069ca:	2300      	movs	r3, #0
 80069cc:	75fb      	strb	r3, [r7, #23]
 80069ce:	e027      	b.n	8006a20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	2b09      	cmp	r3, #9
 80069d6:	d80b      	bhi.n	80069f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0f1b      	lsrs	r3, r3, #28
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	4619      	mov	r1, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	440b      	add	r3, r1
 80069e8:	3230      	adds	r2, #48	; 0x30
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e00a      	b.n	8006a06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	0f1b      	lsrs	r3, r3, #28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4619      	mov	r1, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	440b      	add	r3, r1
 8006a00:	3237      	adds	r2, #55	; 0x37
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	3301      	adds	r3, #1
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
 8006a20:	7dfa      	ldrb	r2, [r7, #23]
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3d3      	bcc.n	80069d0 <IntToUnicode+0x18>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	609a      	str	r2, [r3, #8]
 8006a4c:	60da      	str	r2, [r3, #12]
 8006a4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a58:	d13a      	bne.n	8006ad0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a84:	2303      	movs	r3, #3
 8006a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a88:	230a      	movs	r3, #10
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	4619      	mov	r1, r3
 8006a92:	4812      	ldr	r0, [pc, #72]	; (8006adc <HAL_PCD_MspInit+0xa4>)
 8006a94:	f7fa f9b2 	bl	8000dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	6353      	str	r3, [r2, #52]	; 0x34
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_PCD_MspInit+0xa0>)
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	2043      	movs	r0, #67	; 0x43
 8006ac6:	f7fa f962 	bl	8000d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006aca:	2043      	movs	r0, #67	; 0x43
 8006acc:	f7fa f97b 	bl	8000dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40020000 	.word	0x40020000

08006ae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fc33 	bl	8005362 <USBD_LL_SetupStage>
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f7fe fc6d 	bl	800540c <USBD_LL_DataOutStage>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	3320      	adds	r3, #32
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fe fd06 	bl	8005572 <USBD_LL_DataInStage>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fe40 	bl	8005802 <USBD_LL_SOF>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	79db      	ldrb	r3, [r3, #7]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	e008      	b.n	8006bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	79db      	ldrb	r3, [r3, #7]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d102      	bne.n	8006bb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
 8006bb0:	e001      	b.n	8006bb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006bb2:	f7f9 fe6b 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe fdda 	bl	800577a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fd82 	bl	80056d6 <USBD_LL_Reset>
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fdd5 	bl	800579a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c02:	f043 0301 	orr.w	r3, r3, #1
 8006c06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7adb      	ldrb	r3, [r3, #11]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <HAL_PCD_SuspendCallback+0x48>)
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	4a03      	ldr	r2, [pc, #12]	; (8006c24 <HAL_PCD_SuspendCallback+0x48>)
 8006c16:	f043 0306 	orr.w	r3, r3, #6
 8006c1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	e000ed00 	.word	0xe000ed00

08006c28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fdcb 	bl	80057d2 <USBD_LL_Resume>
}
 8006c3c:	bf00      	nop
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fe23 	bl	80058a6 <USBD_LL_IsoOUTIncomplete>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fddf 	bl	8005842 <USBD_LL_IsoINIncomplete>
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fe35 	bl	800590a <USBD_LL_DevConnected>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe fe32 	bl	8005920 <USBD_LL_DevDisconnected>
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d13c      	bne.n	8006d4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cd4:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <USBD_LL_Init+0x94>)
 8006ce0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <USBD_LL_Init+0x94>)
 8006ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cee:	2204      	movs	r2, #4
 8006cf0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cf2:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <USBD_LL_Init+0x94>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cfe:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d00:	2202      	movs	r2, #2
 8006d02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d04:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d0a:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d10:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d22:	480d      	ldr	r0, [pc, #52]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d24:	f7fa fb32 	bl	800138c <HAL_PCD_Init>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d2e:	f7f9 fdad 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	4808      	ldr	r0, [pc, #32]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d36:	f7fb fd46 	bl	80027c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d3a:	2240      	movs	r2, #64	; 0x40
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4806      	ldr	r0, [pc, #24]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d40:	f7fb fcfa 	bl	8002738 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	2101      	movs	r1, #1
 8006d48:	4803      	ldr	r0, [pc, #12]	; (8006d58 <USBD_LL_Init+0x94>)
 8006d4a:	f7fb fcf5 	bl	8002738 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000700 	.word	0x20000700

08006d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa fc19 	bl	80015aa <HAL_PCD_Start>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f930 	bl	8006fe4 <USBD_Get_USB_Status>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	70fb      	strb	r3, [r7, #3]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70bb      	strb	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dba:	78bb      	ldrb	r3, [r7, #2]
 8006dbc:	883a      	ldrh	r2, [r7, #0]
 8006dbe:	78f9      	ldrb	r1, [r7, #3]
 8006dc0:	f7fb f8ed 	bl	8001f9e <HAL_PCD_EP_Open>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f90a 	bl	8006fe4 <USBD_Get_USB_Status>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fb f938 	bl	8002072 <HAL_PCD_EP_Close>
 8006e02:	4603      	mov	r3, r0
 8006e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8eb 	bl	8006fe4 <USBD_Get_USB_Status>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb f9d8 	bl	80021f0 <HAL_PCD_EP_SetStall>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f8cc 	bl	8006fe4 <USBD_Get_USB_Status>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fb fa1c 	bl	80022b6 <HAL_PCD_EP_ClrStall>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f8ad 	bl	8006fe4 <USBD_Get_USB_Status>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	da0b      	bge.n	8006ecc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3316      	adds	r3, #22
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	e00b      	b.n	8006ee4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fb f821 	bl	8001f56 <HAL_PCD_SetAddress>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f862 	bl	8006fe4 <USBD_Get_USB_Status>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f4c:	7af9      	ldrb	r1, [r7, #11]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	f7fb f913 	bl	800217c <HAL_PCD_EP_Transmit>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 f841 	bl	8006fe4 <USBD_Get_USB_Status>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f66:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f8e:	7af9      	ldrb	r1, [r7, #11]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	f7fb f8b7 	bl	8002106 <HAL_PCD_EP_Receive>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f820 	bl	8006fe4 <USBD_Get_USB_Status>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <USBD_static_malloc+0x18>)
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000be4 	.word	0x20000be4

08006fd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d817      	bhi.n	8007028 <USBD_Get_USB_Status+0x44>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <USBD_Get_USB_Status+0x1c>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007011 	.word	0x08007011
 8007004:	08007017 	.word	0x08007017
 8007008:	0800701d 	.word	0x0800701d
 800700c:	08007023 	.word	0x08007023
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
    break;
 8007014:	e00b      	b.n	800702e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	73fb      	strb	r3, [r7, #15]
    break;
 800701a:	e008      	b.n	800702e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
    break;
 8007020:	e005      	b.n	800702e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	73fb      	strb	r3, [r7, #15]
    break;
 8007026:	e002      	b.n	800702e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	73fb      	strb	r3, [r7, #15]
    break;
 800702c:	bf00      	nop
  }
  return usb_status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	; (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	; (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	; (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	; (8007090 <__libc_init_array+0x44>)
 8007060:	f000 f818 	bl	8007094 <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	08007114 	.word	0x08007114
 8007088:	08007114 	.word	0x08007114
 800708c:	08007114 	.word	0x08007114
 8007090:	08007118 	.word	0x08007118

08007094 <_init>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

080070a0 <_fini>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr
