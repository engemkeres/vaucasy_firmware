
vaucasy_peripheraltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cec  08007cec  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf4  08007cf4  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b68  20000170  08007e6c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000cd8  08007e6c  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001561c  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e5  00000000  00000000  000357ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdd  00000000  00000000  00039fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fae  00000000  00000000  0003ac8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186f7  00000000  00000000  00054c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc5d  00000000  00000000  0006d332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044cc  00000000  00000000  000f9f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fe45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000170 	.word	0x20000170
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007bcc 	.word	0x08007bcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000174 	.word	0x20000174
 80001d0:	08007bcc 	.word	0x08007bcc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b60      	ldr	r3, [pc, #384]	; (800066c <MX_GPIO_Init+0x19c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a5f      	ldr	r2, [pc, #380]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b5d      	ldr	r3, [pc, #372]	; (800066c <MX_GPIO_Init+0x19c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b59      	ldr	r3, [pc, #356]	; (800066c <MX_GPIO_Init+0x19c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a58      	ldr	r2, [pc, #352]	; (800066c <MX_GPIO_Init+0x19c>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b56      	ldr	r3, [pc, #344]	; (800066c <MX_GPIO_Init+0x19c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b52      	ldr	r3, [pc, #328]	; (800066c <MX_GPIO_Init+0x19c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a51      	ldr	r2, [pc, #324]	; (800066c <MX_GPIO_Init+0x19c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b4f      	ldr	r3, [pc, #316]	; (800066c <MX_GPIO_Init+0x19c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b4b      	ldr	r3, [pc, #300]	; (800066c <MX_GPIO_Init+0x19c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a4a      	ldr	r2, [pc, #296]	; (800066c <MX_GPIO_Init+0x19c>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b48      	ldr	r3, [pc, #288]	; (800066c <MX_GPIO_Init+0x19c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	4b44      	ldr	r3, [pc, #272]	; (800066c <MX_GPIO_Init+0x19c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a43      	ldr	r2, [pc, #268]	; (800066c <MX_GPIO_Init+0x19c>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <MX_GPIO_Init+0x19c>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0308 	and.w	r3, r3, #8
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL6_Pin|COL5_Pin|COL4_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	21e0      	movs	r1, #224	; 0xe0
 8000576:	483e      	ldr	r0, [pc, #248]	; (8000670 <MX_GPIO_Init+0x1a0>)
 8000578:	f000 fffe 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	211c      	movs	r1, #28
 8000580:	483c      	ldr	r0, [pc, #240]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000582:	f000 fff9 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	483a      	ldr	r0, [pc, #232]	; (8000678 <MX_GPIO_Init+0x1a8>)
 800058e:	f000 fff3 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW4_Pin;
 8000592:	2304      	movs	r3, #4
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059a:	2302      	movs	r3, #2
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW4_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4834      	ldr	r0, [pc, #208]	; (8000678 <MX_GPIO_Init+0x1a8>)
 80005a6:	f000 fe4b 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW3_Pin;
 80005aa:	2310      	movs	r3, #16
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW3_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	482c      	ldr	r0, [pc, #176]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005be:	f000 fe3f 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = COL6_Pin|COL5_Pin|COL4_Pin;
 80005c2:	23e0      	movs	r3, #224	; 0xe0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4825      	ldr	r0, [pc, #148]	; (8000670 <MX_GPIO_Init+0x1a0>)
 80005da:	f000 fe31 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL2_Pin|COL3_Pin;
 80005de:	231c      	movs	r3, #28
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x1a4>)
 80005f6:	f000 fe23 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW2_Pin;
 80005fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	4819      	ldr	r0, [pc, #100]	; (8000674 <MX_GPIO_Init+0x1a4>)
 8000610:	f000 fe16 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000614:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0x1a4>)
 800062a:	f000 fe09 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL1_Pin;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COL1_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x1a8>)
 8000648:	f000 fdfa 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW1_Pin;
 800064c:	2304      	movs	r3, #4
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROW1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <MX_GPIO_Init+0x1ac>)
 8000660:	f000 fdee 	bl	8001240 <HAL_GPIO_Init>

}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00

08000680 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f000 ff75 	bl	80015ac <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fb02 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000018c 	.word	0x2000018c
 80006d4:	40005400 	.word	0x40005400
 80006d8:	000186a0 	.word	0x000186a0

080006dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C3_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C3_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C3_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C3_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C3_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C3_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C3_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C3_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C3_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C3_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C3_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C3_Init+0x50>)
 800071a:	f000 ff47 	bl	80015ac <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fad4 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001e0 	.word	0x200001e0
 8000730:	40005c00 	.word	0x40005c00
 8000734:	000186a0 	.word	0x000186a0

08000738 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a42      	ldr	r2, [pc, #264]	; (8000860 <HAL_I2C_MspInit+0x128>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12c      	bne.n	80007b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000776:	23c0      	movs	r3, #192	; 0xc0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077a:	2312      	movs	r3, #18
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000786:	2304      	movs	r3, #4
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4835      	ldr	r0, [pc, #212]	; (8000868 <HAL_I2C_MspInit+0x130>)
 8000792:	f000 fd55 	bl	8001240 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007b2:	e050      	b.n	8000856 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2c      	ldr	r2, [pc, #176]	; (800086c <HAL_I2C_MspInit+0x134>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d14b      	bne.n	8000856 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fc:	2312      	movs	r3, #18
 80007fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000808:	2304      	movs	r3, #4
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <HAL_I2C_MspInit+0x138>)
 8000814:	f000 fd14 	bl	8001240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081e:	2312      	movs	r3, #18
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800082a:	2304      	movs	r3, #4
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_I2C_MspInit+0x13c>)
 8000836:	f000 fd03 	bl	8001240 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 8000844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_I2C_MspInit+0x12c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400
 800086c:	40005c00 	.word	0x40005c00
 8000870:	40020800 	.word	0x40020800
 8000874:	40020000 	.word	0x40020000

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b0dc      	sub	sp, #368	; 0x170
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	colrow COL[COLS] = {
 800087e:	4bda      	ldr	r3, [pc, #872]	; (8000be8 <main+0x370>)
 8000880:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8000884:	461d      	mov	r5, r3
 8000886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000896:	e884 0003 	stmia.w	r4, {r0, r1}
			{COL4_GPIO_Port, COL4_Pin},
			{COL5_GPIO_Port, COL5_Pin},
			{COL6_GPIO_Port, COL6_Pin}
	};

	colrow ROW[ROWS] = {
 800089a:	4bd4      	ldr	r3, [pc, #848]	; (8000bec <main+0x374>)
 800089c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80008a0:	461d      	mov	r5, r3
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008ae:	e884 0003 	stmia.w	r4, {r0, r1}
	//	uint8_t keyMap[2][2] = {
	//			{KEY_A, KEY_S},
	//			{KEY_D, KEY_W}
	//	};

	uint8_t keyMap[ROWS][COLS] = {
 80008b2:	4bcf      	ldr	r3, [pc, #828]	; (8000bf0 <main+0x378>)
 80008b4:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80008b8:	461d      	mov	r5, r3
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	682b      	ldr	r3, [r5, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	8022      	strh	r2, [r4, #0]
 80008c8:	3402      	adds	r4, #2
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	7023      	strb	r3, [r4, #0]
			{KC_NONE, HU_IACU, HU_Y, KC_X, KC_C, KC_V, KC_B},
			{KC_NONE, KC_NONE, KC_NONE, KC_MEDIA_PLAYPAUSE, KC_NONE, KC_SPACE, KC_NONE}

	};

	uint8_t modMap[ROWS][COLS] = {
 80008ce:	4bc9      	ldr	r3, [pc, #804]	; (8000bf4 <main+0x37c>)
 80008d0:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80008d4:	461d      	mov	r5, r3
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	8022      	strh	r2, [r4, #0]
 80008e4:	3402      	adds	r4, #2
 80008e6:	0c1b      	lsrs	r3, r3, #16
 80008e8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fb01 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f985 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff fded 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f6:	f7ff fec3 	bl	8000680 <MX_I2C1_Init>
  MX_I2C3_Init();
 80008fa:	f7ff feef 	bl	80006dc <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 80008fe:	f006 fc87 	bl	8007210 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000902:	f000 fa59 	bl	8000db8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


	extern USBD_HandleTypeDef hUsbDeviceFS;
	uint8_t keyState[ROWS][COLS] = {0};  // Keeps track of the current state of each key
 8000906:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800090a:	2223      	movs	r2, #35	; 0x23
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f007 f930 	bl	8007b74 <memset>
	uint8_t HID_buffer[8] = {0};         // USB HID report buffer
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t keyTimers[ROWS][COLS] = {0}; // Key debounce and repeat timers
 8000920:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000924:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000928:	4618      	mov	r0, r3
 800092a:	238c      	movs	r3, #140	; 0x8c
 800092c:	461a      	mov	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f007 f920 	bl	8007b74 <memset>
	const uint32_t debounceDelay = 5;    // Debounce delay in ms
 8000934:	2305      	movs	r3, #5
 8000936:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		//	          memcpy(previousHIDBuffer, HID_buffer, 8); // Update previous buffer
		//	      }

		//--------------------- version 4 -----------------------

		uint8_t keyIndex = 2; // Start filling keycodes from HID_buffer[2]
 800093a:	2302      	movs	r3, #2
 800093c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		memset(HID_buffer, 0, 8); // Clear keycode slots
 8000940:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000944:	2208      	movs	r2, #8
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f007 f913 	bl	8007b74 <memset>

		for (uint8_t i = 0; i < COLS; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 8000954:	e13a      	b.n	8000bcc <main+0x354>
			// Activate only the current column
			for (uint8_t c = 0; c < COLS; c++) {
 8000956:	2300      	movs	r3, #0
 8000958:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
 800095c:	e020      	b.n	80009a0 <main+0x128>
				HAL_GPIO_WritePin(COL[c].GPIO_PORT, COL[c].GPIO_PIN, (c == i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800095e:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000968:	443b      	add	r3, r7
 800096a:	f853 0c48 	ldr.w	r0, [r3, #-72]
 800096e:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000978:	443b      	add	r3, r7
 800097a:	f833 1c44 	ldrh.w	r1, [r3, #-68]
 800097e:	f897 216d 	ldrb.w	r2, [r7, #365]	; 0x16d
 8000982:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8000986:	429a      	cmp	r2, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	f000 fdf1 	bl	8001578 <HAL_GPIO_WritePin>
			for (uint8_t c = 0; c < COLS; c++) {
 8000996:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800099a:	3301      	adds	r3, #1
 800099c:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
 80009a0:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 80009a4:	2b06      	cmp	r3, #6
 80009a6:	d9da      	bls.n	800095e <main+0xe6>
			}

			HAL_Delay(1); // Allow signal to stabilize
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fb13 	bl	8000fd4 <HAL_Delay>

			// Check rows for pressed keys
			for (uint8_t j = 0; j < ROWS; j++) {
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 316c 	strb.w	r3, [r7, #364]	; 0x16c
 80009b4:	e0fd      	b.n	8000bb2 <main+0x33a>
				uint8_t isPressed = HAL_GPIO_ReadPin(ROW[j].GPIO_PORT, ROW[j].GPIO_PIN) == GPIO_PIN_SET;
 80009b6:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80009c0:	443b      	add	r3, r7
 80009c2:	f853 2c70 	ldr.w	r2, [r3, #-112]
 80009c6:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80009d0:	443b      	add	r3, r7
 80009d2:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4610      	mov	r0, r2
 80009da:	f000 fdb5 	bl	8001548 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	bf0c      	ite	eq
 80009e4:	2301      	moveq	r3, #1
 80009e6:	2300      	movne	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
				uint32_t currentTime = HAL_GetTick();
 80009ee:	f000 fae5 	bl	8000fbc <HAL_GetTick>
 80009f2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

				if (isPressed) {
 80009f6:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8092 	beq.w	8000b24 <main+0x2ac>
					// Handle key press or hold
					if ( ( keyState[j][i] == 0 && (currentTime - keyTimers[j][i] >= debounceDelay) ) || (keyState[j][i] == 1 )) { // It it is not pressed yet, or it is held down
 8000a00:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000a04:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000a08:	4613      	mov	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000a12:	443b      	add	r3, r7
 8000a14:	440b      	add	r3, r1
 8000a16:	3bdc      	subs	r3, #220	; 0xdc
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d114      	bne.n	8000a48 <main+0x1d0>
 8000a1e:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000a22:	f897 016e 	ldrb.w	r0, [r7, #366]	; 0x16e
 8000a26:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000a2a:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8000a2e:	4613      	mov	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	4403      	add	r3, r0
 8000a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a3a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d90f      	bls.n	8000a68 <main+0x1f0>
 8000a48:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000a4c:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000a50:	4613      	mov	r3, r2
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	1a9b      	subs	r3, r3, r2
 8000a56:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000a5a:	443b      	add	r3, r7
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3bdc      	subs	r3, #220	; 0xdc
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	f040 80a0 	bne.w	8000ba8 <main+0x330>
						if (modMap[j][i] != KC_NONE) {
 8000a68:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000a6c:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000a70:	4613      	mov	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	1a9b      	subs	r3, r3, r2
 8000a76:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000a7a:	443b      	add	r3, r7
 8000a7c:	440b      	add	r3, r1
 8000a7e:	3bb8      	subs	r3, #184	; 0xb8
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d013      	beq.n	8000aae <main+0x236>
							// It's a modifier key, set the corresponding bit in HID_buffer[0]
							HID_buffer[0] |= modMap[j][i];
 8000a86:	f897 108c 	ldrb.w	r1, [r7, #140]	; 0x8c
 8000a8a:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000a8e:	f897 016e 	ldrb.w	r0, [r7, #366]	; 0x16e
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000a9c:	443b      	add	r3, r7
 8000a9e:	4403      	add	r3, r0
 8000aa0:	3bb8      	subs	r3, #184	; 0xb8
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000aac:	e01b      	b.n	8000ae6 <main+0x26e>
						}
						else {
							if (keyIndex < 8) {
 8000aae:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d817      	bhi.n	8000ae6 <main+0x26e>
								HID_buffer[keyIndex++] = keyMap[j][i]; // Add keycode to HID buffer
 8000ab6:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000aba:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000abe:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000ac2:	1c58      	adds	r0, r3, #1
 8000ac4:	f887 016f 	strb.w	r0, [r7, #367]	; 0x16f
 8000ac8:	4618      	mov	r0, r3
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000ad4:	443b      	add	r3, r7
 8000ad6:	440b      	add	r3, r1
 8000ad8:	3b94      	subs	r3, #148	; 0x94
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	f500 73b8 	add.w	r3, r0, #368	; 0x170
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f803 2ce4 	strb.w	r2, [r3, #-228]
							}
						}
						keyTimers[j][i] = currentTime; // Reset timer for repeat
 8000ae6:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000aea:	f897 016e 	ldrb.w	r0, [r7, #366]	; 0x16e
 8000aee:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000af2:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8000af6:	4613      	mov	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	1a9b      	subs	r3, r3, r2
 8000afc:	4403      	add	r3, r0
 8000afe:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						keyState[j][i] = 1; // Mark key as pressed
 8000b06:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000b0a:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000b0e:	4613      	mov	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000b18:	443b      	add	r3, r7
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3bdc      	subs	r3, #220	; 0xdc
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e041      	b.n	8000ba8 <main+0x330>
					}
				}
				else {
					if (keyState[j][i] == 1 && (currentTime - keyTimers[j][i] >= debounceDelay)) {
 8000b24:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000b28:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	1a9b      	subs	r3, r3, r2
 8000b32:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000b36:	443b      	add	r3, r7
 8000b38:	440b      	add	r3, r1
 8000b3a:	3bdc      	subs	r3, #220	; 0xdc
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d132      	bne.n	8000ba8 <main+0x330>
 8000b42:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000b46:	f897 016e 	ldrb.w	r0, [r7, #366]	; 0x16e
 8000b4a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000b4e:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	1a9b      	subs	r3, r3, r2
 8000b58:	4403      	add	r3, r0
 8000b5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b5e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d81d      	bhi.n	8000ba8 <main+0x330>
						keyState[j][i] = 0; // Mark as released
 8000b6c:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000b70:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000b7e:	443b      	add	r3, r7
 8000b80:	440b      	add	r3, r1
 8000b82:	3bdc      	subs	r3, #220	; 0xdc
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
						keyTimers[j][i] = currentTime; // Reset timer
 8000b88:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8000b8c:	f897 016e 	ldrb.w	r0, [r7, #366]	; 0x16e
 8000b90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000b94:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
 8000b98:	4613      	mov	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	4403      	add	r3, r0
 8000ba0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (uint8_t j = 0; j < ROWS; j++) {
 8000ba8:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 8000bac:	3301      	adds	r3, #1
 8000bae:	f887 316c 	strb.w	r3, [r7, #364]	; 0x16c
 8000bb2:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	f67f aefd 	bls.w	80009b6 <main+0x13e>
					}
				}
			}

			HAL_Delay(1); // Small delay before switching columns
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fa09 	bl	8000fd4 <HAL_Delay>
		for (uint8_t i = 0; i < COLS; i++) {
 8000bc2:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 8000bcc:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	f67f aec0 	bls.w	8000956 <main+0xde>
		}

		//USBD_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8);
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, HID_buffer, 8, 0);
 8000bd6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2208      	movs	r2, #8
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <main+0x380>)
 8000be0:	f004 fd8a 	bl	80056f8 <USBD_CUSTOM_HID_SendReport>
	{
 8000be4:	e6a9      	b.n	800093a <main+0xc2>
 8000be6:	bf00      	nop
 8000be8:	08007be4 	.word	0x08007be4
 8000bec:	08007c1c 	.word	0x08007c1c
 8000bf0:	08007c44 	.word	0x08007c44
 8000bf4:	08007c68 	.word	0x08007c68
 8000bf8:	20000284 	.word	0x20000284

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 ffb2 	bl	8007b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <SystemClock_Config+0xcc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c48:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	2302      	movs	r3, #2
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c74:	23a8      	movs	r3, #168	; 0xa8
 8000c76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 f80f 	bl	8002ca8 <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c90:	f000 f81e 	bl	8000cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	230f      	movs	r3, #15
 8000c96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f002 fa71 	bl	8003198 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cbc:	f000 f808 	bl	8000cd0 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	; 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f90c 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <OTG_FS_IRQHandler+0x10>)
 8000d86:	f000 fe99 	bl	8001abc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200007d4 	.word	0x200007d4

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_USART1_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000df0:	f002 fbf2 	bl	80035d8 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f7ff ff69 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000234 	.word	0x20000234
 8000e08:	40011000 	.word	0x40011000

08000e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12c      	bne.n	8000e88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_UART_MspInit+0x8c>)
 8000e84:	f000 f9dc 	bl	8001240 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40011000 	.word	0x40011000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea0:	f7ff ff78 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f006 fe5b 	bl	8007b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fcd3 	bl	8000878 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000ee0:	08007cfc 	.word	0x08007cfc
  ldr r2, =_sbss
 8000ee4:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000ee8:	20000cd8 	.word	0x20000cd8

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f94f 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff feda 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f967 	bl	8001226 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f92f 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	2000027c 	.word	0x2000027c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000027c 	.word	0x2000027c

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff29 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff3e 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff31 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa2 	bl	8001178 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e159      	b.n	8001510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8148 	bne.w	800150a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a2 	beq.w	800150a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b57      	ldr	r3, [pc, #348]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a56      	ldr	r2, [pc, #344]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b54      	ldr	r3, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x2ec>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x202>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x1fe>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a47      	ldr	r2, [pc, #284]	; (8001538 <HAL_GPIO_Init+0x2f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x1fa>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a46      	ldr	r2, [pc, #280]	; (800153c <HAL_GPIO_Init+0x2fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x1f6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a45      	ldr	r2, [pc, #276]	; (8001540 <HAL_GPIO_Init+0x300>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x1f2>
 800142e:	2304      	movs	r3, #4
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001432:	2307      	movs	r3, #7
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	; (800152c <HAL_GPIO_Init+0x2ec>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_GPIO_Init+0x304>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a24      	ldr	r2, [pc, #144]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_GPIO_Init+0x304>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_GPIO_Init+0x304>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f aea2 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e001      	b.n	800156a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e12b      	b.n	8001816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff f8b0 	bl	8000738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800160e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001610:	f001 ffba 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8001614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a81      	ldr	r2, [pc, #516]	; (8001820 <HAL_I2C_Init+0x274>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d807      	bhi.n	8001630 <HAL_I2C_Init+0x84>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4a80      	ldr	r2, [pc, #512]	; (8001824 <HAL_I2C_Init+0x278>)
 8001624:	4293      	cmp	r3, r2
 8001626:	bf94      	ite	ls
 8001628:	2301      	movls	r3, #1
 800162a:	2300      	movhi	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e006      	b.n	800163e <HAL_I2C_Init+0x92>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a7d      	ldr	r2, [pc, #500]	; (8001828 <HAL_I2C_Init+0x27c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	bf94      	ite	ls
 8001638:	2301      	movls	r3, #1
 800163a:	2300      	movhi	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0e7      	b.n	8001816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4a78      	ldr	r2, [pc, #480]	; (800182c <HAL_I2C_Init+0x280>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0c9b      	lsrs	r3, r3, #18
 8001650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a6a      	ldr	r2, [pc, #424]	; (8001820 <HAL_I2C_Init+0x274>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d802      	bhi.n	8001680 <HAL_I2C_Init+0xd4>
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	e009      	b.n	8001694 <HAL_I2C_Init+0xe8>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	4a69      	ldr	r2, [pc, #420]	; (8001830 <HAL_I2C_Init+0x284>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	3301      	adds	r3, #1
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	430b      	orrs	r3, r1
 800169a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	495c      	ldr	r1, [pc, #368]	; (8001820 <HAL_I2C_Init+0x274>)
 80016b0:	428b      	cmp	r3, r1
 80016b2:	d819      	bhi.n	80016e8 <HAL_I2C_Init+0x13c>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e59      	subs	r1, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016c8:	400b      	ands	r3, r1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <HAL_I2C_Init+0x138>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1e59      	subs	r1, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e2:	e051      	b.n	8001788 <HAL_I2C_Init+0x1dc>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e04f      	b.n	8001788 <HAL_I2C_Init+0x1dc>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d111      	bne.n	8001714 <HAL_I2C_Init+0x168>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	440b      	add	r3, r1
 80016fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001702:	3301      	adds	r3, #1
 8001704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf0c      	ite	eq
 800170c:	2301      	moveq	r3, #1
 800170e:	2300      	movne	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	e012      	b.n	800173a <HAL_I2C_Init+0x18e>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1e58      	subs	r0, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	0099      	lsls	r1, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	fbb0 f3f3 	udiv	r3, r0, r3
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Init+0x196>
 800173e:	2301      	movs	r3, #1
 8001740:	e022      	b.n	8001788 <HAL_I2C_Init+0x1dc>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10e      	bne.n	8001768 <HAL_I2C_Init+0x1bc>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e58      	subs	r0, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6859      	ldr	r1, [r3, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	440b      	add	r3, r1
 8001758:	fbb0 f3f3 	udiv	r3, r0, r3
 800175c:	3301      	adds	r3, #1
 800175e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001766:	e00f      	b.n	8001788 <HAL_I2C_Init+0x1dc>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	0099      	lsls	r1, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	6809      	ldr	r1, [r1, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6911      	ldr	r1, [r2, #16]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68d2      	ldr	r2, [r2, #12]
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695a      	ldr	r2, [r3, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0201 	orr.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	000186a0 	.word	0x000186a0
 8001824:	001e847f 	.word	0x001e847f
 8001828:	003d08ff 	.word	0x003d08ff
 800182c:	431bde83 	.word	0x431bde83
 8001830:	10624dd3 	.word	0x10624dd3

08001834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e101      	b.n	8001a4a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f005 fe85 	bl	8007570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001874:	d102      	bne.n	800187c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fa84 	bl	8003d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7c1a      	ldrb	r2, [r3, #16]
 800188e:	f88d 2000 	strb.w	r2, [sp]
 8001892:	3304      	adds	r3, #4
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	f002 f963 	bl	8003b60 <USB_CoreInit>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ce      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 fa7c 	bl	8003db0 <USB_SetCurrentMode>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0bf      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
 80018ce:	e04a      	b.n	8001966 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3315      	adds	r3, #21
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3314      	adds	r3, #20
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	b298      	uxth	r0, r3
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	332e      	adds	r3, #46	; 0x2e
 800190c:	4602      	mov	r2, r0
 800190e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3318      	adds	r3, #24
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	331c      	adds	r3, #28
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3320      	adds	r3, #32
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	3324      	adds	r3, #36	; 0x24
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	791b      	ldrb	r3, [r3, #4]
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3af      	bcc.n	80018d0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e044      	b.n	8001a00 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	791b      	ldrb	r3, [r3, #4]
 8001a04:	7bfa      	ldrb	r2, [r7, #15]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3b5      	bcc.n	8001976 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7c1a      	ldrb	r2, [r3, #16]
 8001a12:	f88d 2000 	strb.w	r2, [sp]
 8001a16:	3304      	adds	r3, #4
 8001a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1a:	f002 fa15 	bl	8003e48 <USB_DevInit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e00c      	b.n	8001a4a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fa5f 	bl	8004f06 <USB_DevDisconnect>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_PCD_Start+0x1c>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e022      	b.n	8001ab4 <HAL_PCD_Start+0x62>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 f966 	bl	8003d6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fa0d 	bl	8004ec4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b08d      	sub	sp, #52	; 0x34
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 facb 	bl	800506e <USB_GetMode>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 848c 	bne.w	80023f8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fa2f 	bl	8004f48 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8482 	beq.w	80023f6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fa1c 	bl	8004f48 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d107      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f002 0202 	and.w	r2, r2, #2
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fa0a 	bl	8004f48 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d161      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0210 	bic.w	r2, r2, #16
 8001b4c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 020f 	and.w	r2, r3, #15
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d124      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d035      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	6a38      	ldr	r0, [r7, #32]
 8001b9a:	f003 f841 	bl	8004c20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001baa:	441a      	add	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bbc:	441a      	add	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	615a      	str	r2, [r3, #20]
 8001bc2:	e016      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d110      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	6a38      	ldr	r0, [r7, #32]
 8001bdc:	f003 f820 	bl	8004c20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bec:	441a      	add	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699a      	ldr	r2, [r3, #24]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0210 	orr.w	r2, r2, #16
 8001c00:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 f99e 	bl	8004f48 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c16:	f040 80a7 	bne.w	8001d68 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f9a3 	bl	8004f6e <USB_ReadDevAllOutEpInterrupt>
 8001c28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c2a:	e099      	b.n	8001d60 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 808e 	beq.w	8001d54 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f9c7 	bl	8004fd6 <USB_ReadDevOutEPInterrupt>
 8001c48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00c      	beq.n	8001c6e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c60:	461a      	mov	r2, r3
 8001c62:	2301      	movs	r3, #1
 8001c64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fe8b 	bl	8002984 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c84:	461a      	mov	r2, r3
 8001c86:	2308      	movs	r3, #8
 8001c88:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 ff61 	bl	8002b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2310      	movs	r3, #16
 8001cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d030      	beq.n	8001d1a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d109      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	3304      	adds	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	78db      	ldrb	r3, [r3, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f005 fd3a 	bl	800777c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d14:	461a      	mov	r2, r3
 8001d16:	2302      	movs	r3, #2
 8001d18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	015a      	lsls	r2, r3, #5
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d30:	461a      	mov	r2, r3
 8001d32:	2320      	movs	r3, #32
 8001d34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f47f af62 	bne.w	8001c2c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f8eb 	bl	8004f48 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d7c:	f040 80db 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 f90c 	bl	8004fa2 <USB_ReadDevAllInEpInterrupt>
 8001d8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d90:	e0cd      	b.n	8001f2e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80c2 	beq.w	8001f22 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 f932 	bl	8005012 <USB_ReadDevInEPInterrupt>
 8001dae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d057      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69f9      	ldr	r1, [r7, #28]
 8001dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dda:	4013      	ands	r3, r2
 8001ddc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	015a      	lsls	r2, r3, #5
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dea:	461a      	mov	r2, r3
 8001dec:	2301      	movs	r3, #1
 8001dee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	799b      	ldrb	r3, [r3, #6]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d132      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	3320      	adds	r3, #32
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4403      	add	r3, r0
 8001e18:	331c      	adds	r3, #28
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4419      	add	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4403      	add	r3, r0
 8001e2c:	3320      	adds	r3, #32
 8001e2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d113      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3324      	adds	r3, #36	; 0x24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e56:	461a      	mov	r2, r3
 8001e58:	2101      	movs	r1, #1
 8001e5a:	f003 f939 	bl	80050d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4619      	mov	r1, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f005 fc04 	bl	8007672 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e80:	461a      	mov	r2, r3
 8001e82:	2308      	movs	r3, #8
 8001e84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d023      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eca:	6a38      	ldr	r0, [r7, #32]
 8001ecc:	f002 f920 	bl	8004110 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3310      	adds	r3, #16
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f005 fc51 	bl	80077a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fca5 	bl	800286c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f af2e 	bne.w	8001d92 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f804 	bl	8004f48 <USB_ReadInterrupts>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f4a:	d122      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fe8b 	bl	8002c90 <HAL_PCDEx_LPM_Callback>
 8001f7a:	e002      	b.n	8001f82 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f005 fbef 	bl	8007760 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 ffd6 	bl	8004f48 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa6:	d112      	bne.n	8001fce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d102      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f005 fbab 	bl	8007714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fcc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 ffb8 	bl	8004f48 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe2:	f040 80b7 	bne.w	8002154 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2110      	movs	r1, #16
 8002000:	4618      	mov	r0, r3
 8002002:	f002 f885 	bl	8004110 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	e046      	b.n	800209a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002018:	461a      	mov	r2, r3
 800201a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800201e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	440a      	add	r2, r1
 8002036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800203a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800203e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	461a      	mov	r2, r3
 800204e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002052:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002064:	0151      	lsls	r1, r2, #5
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	440a      	add	r2, r1
 800206a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800206e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002072:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	440a      	add	r2, r1
 800208a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800208e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002092:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	3301      	adds	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d3b2      	bcc.n	800200c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7bdb      	ldrb	r3, [r3, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f043 030b 	orr.w	r3, r3, #11
 80020d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e8:	f043 030b 	orr.w	r3, r3, #11
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	e015      	b.n	800211c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002102:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002106:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002116:	f043 030b 	orr.w	r3, r3, #11
 800211a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800212e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800213e:	461a      	mov	r2, r3
 8002140:	f002 ffc6 	bl	80050d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fef5 	bl	8004f48 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002168:	d123      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 ff8b 	bl	800508a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f002 f842 	bl	8004202 <USB_GetDevSpeed>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	f001 f9f1 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 800218e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002194:	461a      	mov	r2, r3
 8002196:	4620      	mov	r0, r4
 8002198:	f001 fd46 	bl	8003c28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f005 fa90 	bl	80076c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fec6 	bl	8004f48 <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d10a      	bne.n	80021dc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f005 fa6d 	bl	80076a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f002 0208 	and.w	r2, r2, #8
 80021da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 feb1 	bl	8004f48 <USB_ReadInterrupts>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d123      	bne.n	8002238 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	e014      	b.n	800222c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 faf2 	bl	800280a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	4293      	cmp	r3, r2
 8002236:	d3e4      	bcc.n	8002202 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fe83 	bl	8004f48 <USB_ReadInterrupts>
 8002242:	4603      	mov	r3, r0
 8002244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800224c:	d13c      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e02b      	b.n	80022ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3318      	adds	r3, #24
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d115      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800227a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	da12      	bge.n	80022a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3317      	adds	r3, #23
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fab2 	bl	800280a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	3301      	adds	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d3cd      	bcc.n	8002254 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 fe3b 	bl	8004f48 <USB_ReadInterrupts>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022dc:	d156      	bne.n	800238c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	e045      	b.n	8002370 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d12e      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800230c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800230e:	2b00      	cmp	r3, #0
 8002310:	da2b      	bge.n	800236a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800231e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002322:	429a      	cmp	r2, r3
 8002324:	d121      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002366:	6053      	str	r3, [r2, #4]
            break;
 8002368:	e008      	b.n	800237c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	791b      	ldrb	r3, [r3, #4]
 8002374:	461a      	mov	r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	4293      	cmp	r3, r2
 800237a:	d3b3      	bcc.n	80022e4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695a      	ldr	r2, [r3, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800238a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fdd9 	bl	8004f48 <USB_ReadInterrupts>
 8002396:	4603      	mov	r3, r0
 8002398:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d10a      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f005 fa0e 	bl	80077c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 fdc3 	bl	8004f48 <USB_ReadInterrupts>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d115      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f005 f9fe 	bl	80077e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e000      	b.n	80023f8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80023f6:	bf00      	nop
    }
  }
}
 80023f8:	3734      	adds	r7, #52	; 0x34
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}

080023fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_PCD_SetAddress+0x1a>
 8002414:	2302      	movs	r3, #2
 8002416:	e012      	b.n	800243e <HAL_PCD_SetAddress+0x40>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fd22 	bl	8004e78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	4608      	mov	r0, r1
 8002450:	4611      	mov	r1, r2
 8002452:	461a      	mov	r2, r3
 8002454:	4603      	mov	r3, r0
 8002456:	70fb      	strb	r3, [r7, #3]
 8002458:	460b      	mov	r3, r1
 800245a:	803b      	strh	r3, [r7, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da0f      	bge.n	800248c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3310      	adds	r3, #16
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
 800248a:	e00f      	b.n	80024ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	78ba      	ldrb	r2, [r7, #2]
 80024c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024da:	78bb      	ldrb	r3, [r7, #2]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d102      	bne.n	80024e6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_PCD_EP_Open+0xae>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e00e      	b.n	8002512 <HAL_PCD_EP_Open+0xcc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fea2 	bl	800424c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002510:	7afb      	ldrb	r3, [r7, #11]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0f      	bge.n	800254e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3310      	adds	r3, #16
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	3304      	adds	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	705a      	strb	r2, [r3, #1]
 800254c:	e00f      	b.n	800256e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_PCD_EP_Close+0x6e>
 8002584:	2302      	movs	r3, #2
 8002586:	e00e      	b.n	80025a6 <HAL_PCD_EP_Close+0x8c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fee0 	bl	800435c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	460b      	mov	r3, r1
 80025bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025be:	7afb      	ldrb	r3, [r7, #11]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2200      	movs	r2, #0
 80025e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2200      	movs	r2, #0
 80025ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	799b      	ldrb	r3, [r3, #6]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	799b      	ldrb	r3, [r3, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	f001 ff7d 	bl	8004514 <USB_EPStartXfer>

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	460b      	mov	r3, r1
 8002632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3310      	adds	r3, #16
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2201      	movs	r2, #1
 8002662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b2da      	uxtb	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	799b      	ldrb	r3, [r3, #6]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d102      	bne.n	800267e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	799b      	ldrb	r3, [r3, #6]
 8002686:	461a      	mov	r2, r3
 8002688:	6979      	ldr	r1, [r7, #20]
 800268a:	f001 ff43 	bl	8004514 <USB_EPStartXfer>

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	7912      	ldrb	r2, [r2, #4]
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e04f      	b.n	8002756 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da0f      	bge.n	80026de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 020f 	and.w	r2, r3, #15
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	3310      	adds	r3, #16
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	e00d      	b.n	80026fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_EP_SetStall+0x82>
 8002716:	2302      	movs	r3, #2
 8002718:	e01d      	b.n	8002756 <HAL_PCD_EP_SetStall+0xbe>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fad1 	bl	8004cd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7999      	ldrb	r1, [r3, #6]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002746:	461a      	mov	r2, r3
 8002748:	f002 fcc2 	bl	80050d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	7912      	ldrb	r2, [r2, #4]
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e042      	b.n	8002802 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800277c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0f      	bge.n	80027a4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 020f 	and.w	r2, r3, #15
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	3310      	adds	r3, #16
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	705a      	strb	r2, [r3, #1]
 80027a2:	e00f      	b.n	80027c4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	f003 020f 	and.w	r2, r3, #15
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_EP_ClrStall+0x86>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e00e      	b.n	8002802 <HAL_PCD_EP_ClrStall+0xa4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fada 	bl	8004dac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281a:	2b00      	cmp	r3, #0
 800281c:	da0c      	bge.n	8002838 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	f003 020f 	and.w	r2, r3, #15
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	3310      	adds	r3, #16
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	e00c      	b.n	8002852 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	3304      	adds	r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	4618      	mov	r0, r3
 800285a:	f002 f8f9 	bl	8004a50 <USB_EPStopXfer>
 800285e:	4603      	mov	r3, r0
 8002860:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002862:	7afb      	ldrb	r3, [r7, #11]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af02      	add	r7, sp, #8
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	3310      	adds	r3, #16
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	429a      	cmp	r2, r3
 800289e:	d901      	bls.n	80028a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e06b      	b.n	800297c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d902      	bls.n	80028c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	3303      	adds	r3, #3
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028c8:	e02a      	b.n	8002920 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d902      	bls.n	80028e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3303      	adds	r3, #3
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	68d9      	ldr	r1, [r3, #12]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f002 f94e 	bl	8004ba4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	429a      	cmp	r2, r3
 8002934:	d809      	bhi.n	800294a <PCD_WriteEmptyTxFifo+0xde>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800293e:	429a      	cmp	r2, r3
 8002940:	d203      	bcs.n	800294a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1bf      	bne.n	80028ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	429a      	cmp	r2, r3
 8002954:	d811      	bhi.n	800297a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	2201      	movs	r2, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	43db      	mvns	r3, r3
 8002970:	6939      	ldr	r1, [r7, #16]
 8002972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002976:	4013      	ands	r3, r2
 8002978:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	333c      	adds	r3, #60	; 0x3c
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	799b      	ldrb	r3, [r3, #6]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d17b      	bne.n	8002ab2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4a61      	ldr	r2, [pc, #388]	; (8002b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f240 80b9 	bls.w	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b3 	beq.w	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e6:	461a      	mov	r2, r3
 80029e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	e0a7      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a06:	461a      	mov	r2, r3
 8002a08:	2320      	movs	r3, #32
 8002a0a:	6093      	str	r3, [r2, #8]
 8002a0c:	e098      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 8093 	bne.w	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d90f      	bls.n	8002a42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3e:	6093      	str	r3, [r2, #8]
 8002a40:	e07e      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	0159      	lsls	r1, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d114      	bne.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2101      	movs	r1, #1
 8002a90:	f002 fb1e 	bl	80050d0 <USB_EP0_OutStart>
 8002a94:	e006      	b.n	8002aa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f004 fdc6 	bl	800763c <HAL_PCD_DataOutStageCallback>
 8002ab0:	e046      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d124      	bne.n	8002b04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	e032      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af0:	461a      	mov	r2, r3
 8002af2:	2320      	movs	r3, #32
 8002af4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f004 fd9d 	bl	800763c <HAL_PCD_DataOutStageCallback>
 8002b02:	e01d      	b.n	8002b40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d114      	bne.n	8002b34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2100      	movs	r1, #0
 8002b30:	f002 face 	bl	80050d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f004 fd7e 	bl	800763c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	4f54300a 	.word	0x4f54300a
 8002b50:	4f54310a 	.word	0x4f54310a

08002b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	333c      	adds	r3, #60	; 0x3c
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d90e      	bls.n	8002ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f004 fd35 	bl	8007618 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d90c      	bls.n	8002bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	799b      	ldrb	r3, [r3, #6]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2101      	movs	r1, #1
 8002bcc:	f002 fa80 	bl	80050d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	4f54300a 	.word	0x4f54300a

08002be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
 8002bec:	4613      	mov	r3, r2
 8002bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bfe:	883b      	ldrh	r3, [r7, #0]
 8002c00:	0419      	lsls	r1, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c0c:	e028      	b.n	8002c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e00d      	b.n	8002c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	3340      	adds	r3, #64	; 0x40
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4413      	add	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3ec      	bcc.n	8002c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c48:	883b      	ldrh	r3, [r7, #0]
 8002c4a:	0418      	lsls	r0, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	4302      	orrs	r2, r0
 8002c58:	3340      	adds	r3, #64	; 0x40
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e267      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b7e      	ldr	r3, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e242      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6f      	ldr	r2, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f92c 	bl	8000fbc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe f928 	bl	8000fbc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e207      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe f918 	bl	8000fbc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe f914 	bl	8000fbc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1f3      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c7      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f8cd 	bl	8000fbc <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8c9 	bl	8000fbc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1a8      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe f8ac 	bl	8000fbc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe f8a8 	bl	8000fbc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e187      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe f88c 	bl	8000fbc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f888 	bl	8000fbc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e167      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe f875 	bl	8000fbc <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f871 	bl	8000fbc <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e150      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7d      	ldr	r3, [pc, #500]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b77      	ldr	r3, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b74      	ldr	r3, [pc, #464]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe f831 	bl	8000fbc <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe f82d 	bl	8000fbc <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e10c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_OscConfig+0x474>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a63      	ldr	r2, [pc, #396]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	4a5b      	ldr	r2, [pc, #364]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a57      	ldr	r2, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b55      	ldr	r3, [pc, #340]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fd fff2 	bl	8000fbc <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fd ffee 	bl	8000fbc <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fd ffdc 	bl	8000fbc <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd ffd8 	bl	8000fbc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b5      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d05c      	beq.n	800310c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d141      	bne.n	80030de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd ffac 	bl	8000fbc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fd ffa8 	bl	8000fbc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e087      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fd ff81 	bl	8000fbc <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fd ff7d 	bl	8000fbc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x416>
 80030dc:	e054      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd ff6a 	bl	8000fbc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd ff66 	bl	8000fbc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e045      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e038      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d028      	beq.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d121      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d90c      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d044      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	2b03      	cmp	r3, #3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e067      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b37      	ldr	r3, [pc, #220]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7fd fe98 	bl	8000fbc <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fd fe94 	bl	8000fbc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b2b      	ldr	r3, [pc, #172]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd fdf8 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	08007cd4 	.word	0x08007cd4
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b094      	sub	sp, #80	; 0x50
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80e1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e0db      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339c:	e0db      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_GetSysClockFreq+0x208>)
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a2:	e0d8      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ae:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
 80033d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	0159      	lsls	r1, r3, #5
 80033e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e8:	0150      	lsls	r0, r2, #5
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4621      	mov	r1, r4
 80033f0:	1a51      	subs	r1, r2, r1
 80033f2:	6139      	str	r1, [r7, #16]
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	018b      	lsls	r3, r1, #6
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003412:	4651      	mov	r1, sl
 8003414:	018a      	lsls	r2, r1, #6
 8003416:	4651      	mov	r1, sl
 8003418:	ebb2 0801 	subs.w	r8, r2, r1
 800341c:	4659      	mov	r1, fp
 800341e:	eb63 0901 	sbc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	462b      	mov	r3, r5
 8003444:	eb49 0303 	adc.w	r3, r9, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003456:	4629      	mov	r1, r5
 8003458:	024b      	lsls	r3, r1, #9
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003460:	4621      	mov	r1, r4
 8003462:	024a      	lsls	r2, r1, #9
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
 800346e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003474:	f7fc feae 	bl	80001d4 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	e058      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	4611      	mov	r1, r2
 800348e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d4:	ebb2 040a 	subs.w	r4, r2, sl
 80034d8:	eb63 050b 	sbc.w	r5, r3, fp
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	61fa      	str	r2, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	f7fc fe54 	bl	80001d4 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003558:	4618      	mov	r0, r3
 800355a:	3750      	adds	r7, #80	; 0x50
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	; (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08007ce4 	.word	0x08007ce4

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08007ce4 	.word	0x08007ce4

080035d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fc04 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f82b 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b0c0      	sub	sp, #256	; 0x100
 800367e:	af00      	add	r7, sp, #0
 8003680:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	ea40 0301 	orr.w	r3, r0, r1
 80036a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d0:	f021 010c 	bic.w	r1, r1, #12
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036de:	430b      	orrs	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	ea40 0301 	orr.w	r3, r0, r1
 80036fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8f      	ldr	r3, [pc, #572]	; (8003944 <UART_SetConfig+0x2cc>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d005      	beq.n	8003718 <UART_SetConfig+0xa0>
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <UART_SetConfig+0x2d0>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7ff ff4a 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800371c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003720:	e003      	b.n	800372a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7ff ff31 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8003726:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	f040 810c 	bne.w	8003950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003742:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	1891      	adds	r1, r2, r2
 8003750:	65b9      	str	r1, [r7, #88]	; 0x58
 8003752:	415b      	adcs	r3, r3
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800375a:	4621      	mov	r1, r4
 800375c:	eb12 0801 	adds.w	r8, r2, r1
 8003760:	4629      	mov	r1, r5
 8003762:	eb43 0901 	adc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003788:	462b      	mov	r3, r5
 800378a:	eb49 0303 	adc.w	r3, r9, r3
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800379e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037a6:	460b      	mov	r3, r1
 80037a8:	18db      	adds	r3, r3, r3
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
 80037ac:	4613      	mov	r3, r2
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	657b      	str	r3, [r7, #84]	; 0x54
 80037b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037bc:	f7fc fd0a 	bl	80001d4 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	011c      	lsls	r4, r3, #4
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e8:	415b      	adcs	r3, r3
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037f0:	4641      	mov	r1, r8
 80037f2:	eb12 0a01 	adds.w	sl, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb43 0b01 	adc.w	fp, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800380c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003810:	4692      	mov	sl, r2
 8003812:	469b      	mov	fp, r3
 8003814:	4643      	mov	r3, r8
 8003816:	eb1a 0303 	adds.w	r3, sl, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800381e:	464b      	mov	r3, r9
 8003820:	eb4b 0303 	adc.w	r3, fp, r3
 8003824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003834:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800383c:	460b      	mov	r3, r1
 800383e:	18db      	adds	r3, r3, r3
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
 8003842:	4613      	mov	r3, r2
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
 800384a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800384e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003852:	f7fc fcbf 	bl	80001d4 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4611      	mov	r1, r2
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <UART_SetConfig+0x2d4>)
 800385e:	fba3 2301 	umull	r2, r3, r3, r1
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	; 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1acb      	subs	r3, r1, r3
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <UART_SetConfig+0x2d4>)
 8003874:	fba3 2302 	umull	r2, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800388c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	63b9      	str	r1, [r7, #56]	; 0x38
 800389c:	415b      	adcs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6339      	str	r1, [r7, #48]	; 0x30
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f8:	460b      	mov	r3, r1
 80038fa:	18db      	adds	r3, r3, r3
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	4613      	mov	r3, r2
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800390e:	f7fc fc61 	bl	80001d4 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <UART_SetConfig+0x2d4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <UART_SetConfig+0x2d4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4422      	add	r2, r4
 800393e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003940:	e106      	b.n	8003b50 <UART_SetConfig+0x4d8>
 8003942:	bf00      	nop
 8003944:	40011000 	.word	0x40011000
 8003948:	40011400 	.word	0x40011400
 800394c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800395a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800395e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003962:	4642      	mov	r2, r8
 8003964:	464b      	mov	r3, r9
 8003966:	1891      	adds	r1, r2, r2
 8003968:	6239      	str	r1, [r7, #32]
 800396a:	415b      	adcs	r3, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	4641      	mov	r1, r8
 8003974:	1854      	adds	r4, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb43 0501 	adc.w	r5, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003998:	464b      	mov	r3, r9
 800399a:	eb45 0303 	adc.w	r3, r5, r3
 800399e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039be:	4629      	mov	r1, r5
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4621      	mov	r1, r4
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039d0:	f7fc fc00 	bl	80001d4 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <UART_SetConfig+0x4e4>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011c      	lsls	r4, r3, #4
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	61b9      	str	r1, [r7, #24]
 80039fc:	415b      	adcs	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6139      	str	r1, [r7, #16]
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	4641      	mov	r1, r8
 8003a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a66:	4641      	mov	r1, r8
 8003a68:	008a      	lsls	r2, r1, #2
 8003a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a6e:	f7fc fbb1 	bl	80001d4 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	2264      	movs	r2, #100	; 0x64
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	1acb      	subs	r3, r1, r3
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	3332      	adds	r3, #50	; 0x32
 8003a8c:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a98:	441c      	add	r4, r3
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa2:	677a      	str	r2, [r7, #116]	; 0x74
 8003aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	1891      	adds	r1, r2, r2
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	415b      	adcs	r3, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab8:	4641      	mov	r1, r8
 8003aba:	1851      	adds	r1, r2, r1
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	4649      	mov	r1, r9
 8003ac0:	414b      	adcs	r3, r1
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	00cb      	lsls	r3, r1, #3
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ada:	4651      	mov	r1, sl
 8003adc:	00ca      	lsls	r2, r1, #3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aea:	464b      	mov	r3, r9
 8003aec:	460a      	mov	r2, r1
 8003aee:	eb42 0303 	adc.w	r3, r2, r3
 8003af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	663b      	str	r3, [r7, #96]	; 0x60
 8003afe:	667a      	str	r2, [r7, #100]	; 0x64
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b1e:	f7fc fb59 	bl	80001d4 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4422      	add	r2, r4
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5c:	51eb851f 	.word	0x51eb851f

08003b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b60:	b084      	sub	sp, #16
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	f107 001c 	add.w	r0, r7, #28
 8003b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b72:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d123      	bne.n	8003bc2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ba2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d105      	bne.n	8003bb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 fae8 	bl	800518c <USB_CoreReset>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e01b      	b.n	8003bfa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f001 fadc 	bl	800518c <USB_CoreReset>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bd8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
 8003bec:	e005      	b.n	8003bfa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003bfa:	7fbb      	ldrb	r3, [r7, #30]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d10b      	bne.n	8003c18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f043 0206 	orr.w	r2, r3, #6
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f043 0220 	orr.w	r2, r3, #32
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c24:	b004      	add	sp, #16
 8003c26:	4770      	bx	lr

08003c28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d165      	bne.n	8003d08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4a41      	ldr	r2, [pc, #260]	; (8003d44 <USB_SetTurnaroundTime+0x11c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d906      	bls.n	8003c52 <USB_SetTurnaroundTime+0x2a>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <USB_SetTurnaroundTime+0x120>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d202      	bcs.n	8003c52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e062      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <USB_SetTurnaroundTime+0x120>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d306      	bcc.n	8003c68 <USB_SetTurnaroundTime+0x40>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <USB_SetTurnaroundTime+0x124>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d202      	bcs.n	8003c68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c62:	230e      	movs	r3, #14
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e057      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <USB_SetTurnaroundTime+0x124>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d306      	bcc.n	8003c7e <USB_SetTurnaroundTime+0x56>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4a37      	ldr	r2, [pc, #220]	; (8003d50 <USB_SetTurnaroundTime+0x128>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d202      	bcs.n	8003c7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c78:	230d      	movs	r3, #13
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e04c      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <USB_SetTurnaroundTime+0x128>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d306      	bcc.n	8003c94 <USB_SetTurnaroundTime+0x6c>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4a32      	ldr	r2, [pc, #200]	; (8003d54 <USB_SetTurnaroundTime+0x12c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d802      	bhi.n	8003c94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c8e:	230c      	movs	r3, #12
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e041      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <USB_SetTurnaroundTime+0x12c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d906      	bls.n	8003caa <USB_SetTurnaroundTime+0x82>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4a2e      	ldr	r2, [pc, #184]	; (8003d58 <USB_SetTurnaroundTime+0x130>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d802      	bhi.n	8003caa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ca4:	230b      	movs	r3, #11
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e036      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <USB_SetTurnaroundTime+0x130>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d906      	bls.n	8003cc0 <USB_SetTurnaroundTime+0x98>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <USB_SetTurnaroundTime+0x134>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cba:	230a      	movs	r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e02b      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <USB_SetTurnaroundTime+0x134>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d906      	bls.n	8003cd6 <USB_SetTurnaroundTime+0xae>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <USB_SetTurnaroundTime+0x138>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d202      	bcs.n	8003cd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cd0:	2309      	movs	r3, #9
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e020      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a21      	ldr	r2, [pc, #132]	; (8003d60 <USB_SetTurnaroundTime+0x138>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d306      	bcc.n	8003cec <USB_SetTurnaroundTime+0xc4>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <USB_SetTurnaroundTime+0x13c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d802      	bhi.n	8003cec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ce6:	2308      	movs	r3, #8
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e015      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <USB_SetTurnaroundTime+0x13c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d906      	bls.n	8003d02 <USB_SetTurnaroundTime+0xda>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <USB_SetTurnaroundTime+0x140>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d202      	bcs.n	8003d02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e00a      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d02:	2306      	movs	r3, #6
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	e007      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d0e:	2309      	movs	r3, #9
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e001      	b.n	8003d18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d14:	2309      	movs	r3, #9
 8003d16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	00d8acbf 	.word	0x00d8acbf
 8003d48:	00e4e1c0 	.word	0x00e4e1c0
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	01067380 	.word	0x01067380
 8003d54:	011a499f 	.word	0x011a499f
 8003d58:	01312cff 	.word	0x01312cff
 8003d5c:	014ca43f 	.word	0x014ca43f
 8003d60:	016e3600 	.word	0x016e3600
 8003d64:	01a6ab1f 	.word	0x01a6ab1f
 8003d68:	01e84800 	.word	0x01e84800

08003d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d115      	bne.n	8003dfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dde:	200a      	movs	r0, #10
 8003de0:	f7fd f8f8 	bl	8000fd4 <HAL_Delay>
      ms += 10U;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	330a      	adds	r3, #10
 8003de8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f001 f93f 	bl	800506e <USB_GetMode>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d01e      	beq.n	8003e34 <USB_SetCurrentMode+0x84>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2bc7      	cmp	r3, #199	; 0xc7
 8003dfa:	d9f0      	bls.n	8003dde <USB_SetCurrentMode+0x2e>
 8003dfc:	e01a      	b.n	8003e34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d115      	bne.n	8003e30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e10:	200a      	movs	r0, #10
 8003e12:	f7fd f8df 	bl	8000fd4 <HAL_Delay>
      ms += 10U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	330a      	adds	r3, #10
 8003e1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f001 f926 	bl	800506e <USB_GetMode>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <USB_SetCurrentMode+0x84>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2bc7      	cmp	r3, #199	; 0xc7
 8003e2c:	d9f0      	bls.n	8003e10 <USB_SetCurrentMode+0x60>
 8003e2e:	e001      	b.n	8003e34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e005      	b.n	8003e40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2bc8      	cmp	r3, #200	; 0xc8
 8003e38:	d101      	bne.n	8003e3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e48:	b084      	sub	sp, #16
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	e009      	b.n	8003e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3340      	adds	r3, #64	; 0x40
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b0e      	cmp	r3, #14
 8003e80:	d9f2      	bls.n	8003e68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11c      	bne.n	8003ec4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec2:	e00b      	b.n	8003edc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ee8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10d      	bne.n	8003f0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ef8:	2100      	movs	r1, #0
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f968 	bl	80041d0 <USB_SetDevSpeed>
 8003f00:	e008      	b.n	8003f14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f02:	2101      	movs	r1, #1
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f963 	bl	80041d0 <USB_SetDevSpeed>
 8003f0a:	e003      	b.n	8003f14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f95e 	bl	80041d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f14:	2110      	movs	r1, #16
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8fa 	bl	8004110 <USB_FlushTxFifo>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f924 	bl	8004174 <USB_FlushRxFifo>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f54:	461a      	mov	r2, r3
 8003f56:	2300      	movs	r3, #0
 8003f58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e043      	b.n	8003fe8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f76:	d118      	bne.n	8003faa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e013      	b.n	8003fbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e008      	b.n	8003fbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2300      	movs	r3, #0
 8003fba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fe0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fec:	461a      	mov	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d3b5      	bcc.n	8003f60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e043      	b.n	8004082 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800400c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004010:	d118      	bne.n	8004044 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	461a      	mov	r2, r3
 8004026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e013      	b.n	8004056 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403a:	461a      	mov	r2, r3
 800403c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e008      	b.n	8004056 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004074:	461a      	mov	r2, r3
 8004076:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800407a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3301      	adds	r3, #1
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004086:	461a      	mov	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4293      	cmp	r3, r2
 800408c:	d3b5      	bcc.n	8003ffa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f043 0210 	orr.w	r2, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <USB_DevInit+0x2c4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f043 0208 	orr.w	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004108:	b004      	add	sp, #16
 800410a:	4770      	bx	lr
 800410c:	803c3800 	.word	0x803c3800

08004110 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800412a:	d901      	bls.n	8004130 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e01b      	b.n	8004168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	daf2      	bge.n	800411e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	019b      	lsls	r3, r3, #6
 8004140:	f043 0220 	orr.w	r2, r3, #32
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004154:	d901      	bls.n	800415a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e006      	b.n	8004168 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d0f0      	beq.n	8004148 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800418c:	d901      	bls.n	8004192 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e018      	b.n	80041c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	daf2      	bge.n	8004180 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2210      	movs	r2, #16
 80041a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80041b0:	d901      	bls.n	80041b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e006      	b.n	80041c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d0f0      	beq.n	80041a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	68f9      	ldr	r1, [r7, #12]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
 8004226:	e00a      	b.n	800423e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d002      	beq.n	8004234 <USB_GetDevSpeed+0x32>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b06      	cmp	r3, #6
 8004232:	d102      	bne.n	800423a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004234:	2302      	movs	r3, #2
 8004236:	75fb      	strb	r3, [r7, #23]
 8004238:	e001      	b.n	800423e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800423a:	230f      	movs	r3, #15
 800423c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800423e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004240:	4618      	mov	r0, r3
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	785b      	ldrb	r3, [r3, #1]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d13a      	bne.n	80042de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004286:	4313      	orrs	r3, r2
 8004288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d155      	bne.n	800434c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	791b      	ldrb	r3, [r3, #4]
 80042ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	059b      	lsls	r3, r3, #22
 80042c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042c4:	4313      	orrs	r3, r2
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e036      	b.n	800434c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11a      	bne.n	800434c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	791b      	ldrb	r3, [r3, #4]
 8004330:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004332:	430b      	orrs	r3, r1
 8004334:	4313      	orrs	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d161      	bne.n	800443c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800438e:	d11f      	bne.n	80043d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f0:	4013      	ands	r3, r2
 80043f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004414:	4013      	ands	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	0159      	lsls	r1, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	440b      	add	r3, r1
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	4619      	mov	r1, r3
 8004434:	4b35      	ldr	r3, [pc, #212]	; (800450c <USB_DeactivateEndpoint+0x1b0>)
 8004436:	4013      	ands	r3, r2
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	e060      	b.n	80044fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800444e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004452:	d11f      	bne.n	8004494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	43db      	mvns	r3, r3
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b4:	4013      	ands	r3, r2
 80044b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	2101      	movs	r1, #1
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	43db      	mvns	r3, r3
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d8:	4013      	ands	r3, r2
 80044da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f6:	4619      	mov	r1, r3
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <USB_DeactivateEndpoint+0x1b4>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	ec337800 	.word	0xec337800
 8004510:	eff37800 	.word	0xeff37800

08004514 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 8180 	bne.w	8004836 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d132      	bne.n	80045a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800455c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	0cdb      	lsrs	r3, r3, #19
 800459e:	04db      	lsls	r3, r3, #19
 80045a0:	6113      	str	r3, [r2, #16]
 80045a2:	e098      	b.n	80046d6 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	0cdb      	lsrs	r3, r3, #19
 80045c0:	04db      	lsls	r3, r3, #19
 80045c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11a      	bne.n	8004624 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d903      	bls.n	8004602 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004620:	6113      	str	r3, [r2, #16]
 8004622:	e045      	b.n	80046b0 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4413      	add	r3, r2
 800462e:	1e5a      	subs	r2, r3, #1
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	8afb      	ldrh	r3, [r7, #22]
 800464a:	04db      	lsls	r3, r3, #19
 800464c:	4619      	mov	r1, r3
 800464e:	4ba4      	ldr	r3, [pc, #656]	; (80048e0 <USB_EPStartXfer+0x3cc>)
 8004650:	400b      	ands	r3, r1
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	0148      	lsls	r0, r1, #5
 8004656:	69f9      	ldr	r1, [r7, #28]
 8004658:	4401      	add	r1, r0
 800465a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	791b      	ldrb	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d122      	bne.n	80046b0 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004688:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	8afb      	ldrh	r3, [r7, #22]
 800469a:	075b      	lsls	r3, r3, #29
 800469c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80046a0:	69b9      	ldr	r1, [r7, #24]
 80046a2:	0148      	lsls	r0, r1, #5
 80046a4:	69f9      	ldr	r1, [r7, #28]
 80046a6:	4401      	add	r1, r0
 80046a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ac:	4313      	orrs	r3, r2
 80046ae:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	0148      	lsls	r0, r1, #5
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	4401      	add	r1, r0
 80046ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d14b      	bne.n	8004774 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d128      	bne.n	8004752 <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d110      	bne.n	8004732 <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e00f      	b.n	8004752 <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e165      	b.n	8004a40 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004792:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	791b      	ldrb	r3, [r3, #4]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d015      	beq.n	80047c8 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 814d 	beq.w	8004a40 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c2:	4313      	orrs	r3, r2
 80047c4:	634b      	str	r3, [r1, #52]	; 0x34
 80047c6:	e13b      	b.n	8004a40 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d110      	bne.n	80047fa <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e00f      	b.n	800481a <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	68d9      	ldr	r1, [r3, #12]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	b298      	uxth	r0, r3
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	4603      	mov	r3, r0
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f9b8 	bl	8004ba4 <USB_WritePacket>
 8004834:	e104      	b.n	8004a40 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	0cdb      	lsrs	r3, r3, #19
 8004852:	04db      	lsls	r3, r3, #19
 8004854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004878:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d131      	bne.n	80048e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ae:	69b9      	ldr	r1, [r7, #24]
 80048b0:	0148      	lsls	r0, r1, #5
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	4401      	add	r1, r0
 80048b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048ba:	4313      	orrs	r3, r2
 80048bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048dc:	6113      	str	r3, [r2, #16]
 80048de:	e061      	b.n	80049a4 <USB_EPStartXfer+0x490>
 80048e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d123      	bne.n	8004934 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	0148      	lsls	r0, r1, #5
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	4401      	add	r1, r0
 800490a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800490e:	4313      	orrs	r3, r2
 8004910:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800492c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004930:	6113      	str	r3, [r2, #16]
 8004932:	e037      	b.n	80049a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4413      	add	r3, r2
 800493e:	1e5a      	subs	r2, r3, #1
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	8afa      	ldrh	r2, [r7, #22]
 8004950:	fb03 f202 	mul.w	r2, r3, r2
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	8afb      	ldrh	r3, [r7, #22]
 8004968:	04d9      	lsls	r1, r3, #19
 800496a:	4b38      	ldr	r3, [pc, #224]	; (8004a4c <USB_EPStartXfer+0x538>)
 800496c:	400b      	ands	r3, r1
 800496e:	69b9      	ldr	r1, [r7, #24]
 8004970:	0148      	lsls	r0, r1, #5
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	4401      	add	r1, r0
 8004976:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004994:	69b9      	ldr	r1, [r7, #24]
 8004996:	0148      	lsls	r0, r1, #5
 8004998:	69f9      	ldr	r1, [r7, #28]
 800499a:	4401      	add	r1, r0
 800499c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10d      	bne.n	80049c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	460a      	mov	r2, r1
 80049c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d128      	bne.n	8004a20 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d110      	bne.n	8004a00 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e00f      	b.n	8004a20 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	1ff80000 	.word	0x1ff80000

08004a50 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d14a      	bne.n	8004b04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a86:	f040 8086 	bne.w	8004b96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d902      	bls.n	8004ae8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ae6:	e056      	b.n	8004b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b00:	d0e7      	beq.n	8004ad2 <USB_EPStopXfer+0x82>
 8004b02:	e048      	b.n	8004b96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1c:	d13b      	bne.n	8004b96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d902      	bls.n	8004b7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
          break;
 8004b7a:	e00c      	b.n	8004b96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b94:	d0e7      	beq.n	8004b66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	71fb      	strb	r3, [r7, #7]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d123      	bne.n	8004c12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004bca:	88bb      	ldrh	r3, [r7, #4]
 8004bcc:	3303      	adds	r3, #3
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e018      	b.n	8004c0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	031a      	lsls	r2, r3, #12
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	461a      	mov	r2, r3
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	3301      	adds	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3e2      	bcc.n	8004bd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3724      	adds	r7, #36	; 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b08b      	sub	sp, #44	; 0x2c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	e014      	b.n	8004c76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	3301      	adds	r3, #1
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	3301      	adds	r3, #1
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3e6      	bcc.n	8004c4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c7e:	8bfb      	ldrh	r3, [r7, #30]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01e      	beq.n	8004cc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f107 0310 	add.w	r3, r7, #16
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	701a      	strb	r2, [r3, #0]
      i++;
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	3301      	adds	r3, #1
 8004cae:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cb6:	8bfb      	ldrh	r3, [r7, #30]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cbc:	8bfb      	ldrh	r3, [r7, #30]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ea      	bne.n	8004c98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	372c      	adds	r7, #44	; 0x2c
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d12c      	bne.n	8004d46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	db12      	blt.n	8004d24 <USB_EPSetStall+0x54>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00f      	beq.n	8004d24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e02b      	b.n	8004d9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	db12      	blt.n	8004d7e <USB_EPSetStall+0xae>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d128      	bne.n	8004e1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004de6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d003      	beq.n	8004df8 <USB_EPClearStall+0x4c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	791b      	ldrb	r3, [r3, #4]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d138      	bne.n	8004e6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e027      	b.n	8004e6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d003      	beq.n	8004e4a <USB_EPClearStall+0x9e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d10f      	bne.n	8004e6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef2:	f023 0302 	bic.w	r3, r3, #2
 8004ef6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f20:	f023 0303 	bic.w	r3, r3, #3
 8004f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f60:	68fb      	ldr	r3, [r7, #12]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	0c1b      	lsrs	r3, r3, #16
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b085      	sub	sp, #20
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	b29b      	uxth	r3, r3
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005004:	68bb      	ldr	r3, [r7, #8]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	01db      	lsls	r3, r3, #7
 8005044:	b2db      	uxtb	r3, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005060:	68bb      	ldr	r3, [r7, #8]
}
 8005062:	4618      	mov	r0, r3
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0301 	and.w	r3, r3, #1
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050a8:	f023 0307 	bic.w	r3, r3, #7
 80050ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	460b      	mov	r3, r1
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	333c      	adds	r3, #60	; 0x3c
 80050e6:	3304      	adds	r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4a26      	ldr	r2, [pc, #152]	; (8005188 <USB_EP0_OutStart+0xb8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d90a      	bls.n	800510a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005104:	d101      	bne.n	800510a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e037      	b.n	800517a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	461a      	mov	r2, r3
 8005112:	2300      	movs	r3, #0
 8005114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005138:	f043 0318 	orr.w	r3, r3, #24
 800513c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005150:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005152:	7afb      	ldrb	r3, [r7, #11]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d10f      	bne.n	8005178 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	461a      	mov	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005172:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005176:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	4f54300a 	.word	0x4f54300a

0800518c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051a4:	d901      	bls.n	80051aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e01b      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	daf2      	bge.n	8005198 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80051ce:	d901      	bls.n	80051d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e006      	b.n	80051e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d0f0      	beq.n	80051c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80051fc:	201c      	movs	r0, #28
 80051fe:	f002 fc75 	bl	8007aec <USBD_static_malloc>
 8005202:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10a      	bne.n	8005220 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	33b2      	adds	r3, #178	; 0xb2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800521c:	2302      	movs	r3, #2
 800521e:	e0a6      	b.n	800536e <USBD_CUSTOM_HID_Init+0x17e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	33b2      	adds	r3, #178	; 0xb2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	33b2      	adds	r3, #178	; 0xb2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2203      	movs	r2, #3
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f864 	bl	8006322 <USBD_CoreGetEPAdd>
 800525a:	4603      	mov	r3, r0
 800525c:	461a      	mov	r2, r3
 800525e:	4b46      	ldr	r3, [pc, #280]	; (8005378 <USBD_CUSTOM_HID_Init+0x188>)
 8005260:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2203      	movs	r2, #3
 800526c:	2100      	movs	r1, #0
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 f857 	bl	8006322 <USBD_CoreGetEPAdd>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 800527a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7c1b      	ldrb	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11b      	bne.n	80052bc <USBD_CUSTOM_HID_Init+0xcc>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005284:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <USBD_CUSTOM_HID_Init+0x188>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3326      	adds	r3, #38	; 0x26
 800529a:	2205      	movs	r2, #5
 800529c:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800529e:	4b37      	ldr	r3, [pc, #220]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 020f 	and.w	r2, r3, #15
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80052b6:	2205      	movs	r2, #5
 80052b8:	801a      	strh	r2, [r3, #0]
 80052ba:	e01a      	b.n	80052f2 <USBD_CUSTOM_HID_Init+0x102>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052bc:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <USBD_CUSTOM_HID_Init+0x188>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3326      	adds	r3, #38	; 0x26
 80052d2:	220a      	movs	r2, #10
 80052d4:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052d6:	4b29      	ldr	r3, [pc, #164]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80052ee:	220a      	movs	r2, #10
 80052f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <USBD_CUSTOM_HID_Init+0x188>)
 80052f4:	7819      	ldrb	r1, [r3, #0]
 80052f6:	2308      	movs	r3, #8
 80052f8:	2203      	movs	r2, #3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fae5 	bl	80078ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <USBD_CUSTOM_HID_Init+0x188>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3324      	adds	r3, #36	; 0x24
 8005316:	2201      	movs	r2, #1
 8005318:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 800531c:	7819      	ldrb	r1, [r3, #0]
 800531e:	2302      	movs	r3, #2
 8005320:	2203      	movs	r2, #3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f002 fad1 	bl	80078ca <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f003 020f 	and.w	r2, r3, #15
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005340:	2201      	movs	r2, #1
 8005342:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	33b6      	adds	r3, #182	; 0xb6
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <USBD_CUSTOM_HID_Init+0x18c>)
 8005360:	7819      	ldrb	r1, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	2308      	movs	r3, #8
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f002 fb9e 	bl	8007aa8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2000004d 	.word	0x2000004d
 800537c:	2000004e 	.word	0x2000004e

08005380 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2203      	movs	r2, #3
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 ffc2 	bl	8006322 <USBD_CoreGetEPAdd>
 800539e:	4603      	mov	r3, r0
 80053a0:	461a      	mov	r2, r3
 80053a2:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <USBD_CUSTOM_HID_DeInit+0x128>)
 80053a4:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2203      	movs	r2, #3
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 ffb5 	bl	8006322 <USBD_CoreGetEPAdd>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <USBD_CUSTOM_HID_DeInit+0x12c>)
 80053be:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80053c0:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <USBD_CUSTOM_HID_DeInit+0x128>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f002 faa5 	bl	8007916 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80053cc:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <USBD_CUSTOM_HID_DeInit+0x128>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 020f 	and.w	r2, r3, #15
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3324      	adds	r3, #36	; 0x24
 80053e2:	2200      	movs	r2, #0
 80053e4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80053e6:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <USBD_CUSTOM_HID_DeInit+0x128>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3326      	adds	r3, #38	; 0x26
 80053fc:	2200      	movs	r2, #0
 80053fe:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005400:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <USBD_CUSTOM_HID_DeInit+0x12c>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f002 fa85 	bl	8007916 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800540c:	4b27      	ldr	r3, [pc, #156]	; (80054ac <USBD_CUSTOM_HID_DeInit+0x12c>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005424:	2200      	movs	r2, #0
 8005426:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8005428:	4b20      	ldr	r3, [pc, #128]	; (80054ac <USBD_CUSTOM_HID_DeInit+0x12c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8005440:	2200      	movs	r2, #0
 8005442:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	33b2      	adds	r3, #178	; 0xb2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d021      	beq.n	800549c <USBD_CUSTOM_HID_DeInit+0x11c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	33b6      	adds	r3, #182	; 0xb6
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	33b2      	adds	r3, #178	; 0xb2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4618      	mov	r0, r3
 800547e:	f002 fb43 	bl	8007b08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	33b2      	adds	r3, #178	; 0xb2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
  }

  return (uint8_t)USBD_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000004d 	.word	0x2000004d
 80054ac:	2000004e 	.word	0x2000004e

080054b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	33b2      	adds	r3, #178	; 0xb2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <USBD_CUSTOM_HID_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e101      	b.n	80056ea <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d055      	beq.n	800559e <USBD_CUSTOM_HID_Setup+0xee>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	f040 80f1 	bne.w	80056da <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	3b02      	subs	r3, #2
 80054fe:	2b09      	cmp	r3, #9
 8005500:	d845      	bhi.n	800558e <USBD_CUSTOM_HID_Setup+0xde>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <USBD_CUSTOM_HID_Setup+0x58>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005561 	.word	0x08005561
 800550c:	0800553f 	.word	0x0800553f
 8005510:	0800558f 	.word	0x0800558f
 8005514:	0800558f 	.word	0x0800558f
 8005518:	0800558f 	.word	0x0800558f
 800551c:	0800558f 	.word	0x0800558f
 8005520:	0800558f 	.word	0x0800558f
 8005524:	08005571 	.word	0x08005571
 8005528:	0800554f 	.word	0x0800554f
 800552c:	08005531 	.word	0x08005531
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	885b      	ldrh	r3, [r3, #2]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	609a      	str	r2, [r3, #8]
          break;
 800553c:	e02e      	b.n	800559c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3308      	adds	r3, #8
 8005542:	2201      	movs	r2, #1
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 fde2 	bl	8007110 <USBD_CtlSendData>
          break;
 800554c:	e026      	b.n	800559c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	885b      	ldrh	r3, [r3, #2]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b29b      	uxth	r3, r3
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	60da      	str	r2, [r3, #12]
          break;
 800555e:	e01d      	b.n	800559c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	330c      	adds	r3, #12
 8005564:	2201      	movs	r2, #1
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fdd1 	bl	8007110 <USBD_CtlSendData>
          break;
 800556e:	e015      	b.n	800559c <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005576:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	88db      	ldrh	r3, [r3, #6]
 800557c:	2b08      	cmp	r3, #8
 800557e:	bf28      	it	cs
 8005580:	2308      	movcs	r3, #8
 8005582:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005584:	461a      	mov	r2, r3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 fdee 	bl	8007168 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800558c:	e006      	b.n	800559c <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fd42 	bl	800701a <USBD_CtlError>
          ret = USBD_FAIL;
 8005596:	2303      	movs	r3, #3
 8005598:	75fb      	strb	r3, [r7, #23]
          break;
 800559a:	bf00      	nop
      }
      break;
 800559c:	e0a4      	b.n	80056e8 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b0b      	cmp	r3, #11
 80055a4:	f200 8090 	bhi.w	80056c8 <USBD_CUSTOM_HID_Setup+0x218>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <USBD_CUSTOM_HID_Setup+0x100>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080056d7 	.word	0x080056d7
 80055b8:	080056c9 	.word	0x080056c9
 80055bc:	080056c9 	.word	0x080056c9
 80055c0:	080056c9 	.word	0x080056c9
 80055c4:	080056c9 	.word	0x080056c9
 80055c8:	0800560b 	.word	0x0800560b
 80055cc:	080056c9 	.word	0x080056c9
 80055d0:	080056c9 	.word	0x080056c9
 80055d4:	080056c9 	.word	0x080056c9
 80055d8:	08005677 	.word	0x08005677
 80055dc:	080056a1 	.word	0x080056a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d107      	bne.n	80055fc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055ec:	f107 030e 	add.w	r3, r7, #14
 80055f0:	2202      	movs	r2, #2
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fd8b 	bl	8007110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055fa:	e06d      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f001 fd0b 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	75fb      	strb	r3, [r7, #23]
          break;
 8005608:	e066      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b22      	cmp	r3, #34	; 0x22
 8005614:	d110      	bne.n	8005638 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	2b7a      	cmp	r3, #122	; 0x7a
 800561c:	bf28      	it	cs
 800561e:	237a      	movcs	r3, #122	; 0x7a
 8005620:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	33b6      	adds	r3, #182	; 0xb6
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e00d      	b.n	8005654 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	885b      	ldrh	r3, [r3, #2]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b21      	cmp	r3, #33	; 0x21
 8005642:	d107      	bne.n	8005654 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005644:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <USBD_CUSTOM_HID_Setup+0x244>)
 8005646:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	88db      	ldrh	r3, [r3, #6]
 800564c:	2b09      	cmp	r3, #9
 800564e:	bf28      	it	cs
 8005650:	2309      	movcs	r3, #9
 8005652:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d006      	beq.n	8005668 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800565a:	8bfb      	ldrh	r3, [r7, #30]
 800565c:	461a      	mov	r2, r3
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fd55 	bl	8007110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005666:	e037      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fcd5 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 8005670:	2303      	movs	r3, #3
 8005672:	75fb      	strb	r3, [r7, #23]
          break;
 8005674:	e030      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d107      	bne.n	8005692 <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3310      	adds	r3, #16
 8005686:	2201      	movs	r2, #1
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fd40 	bl	8007110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005690:	e022      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fcc0 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 800569a:	2303      	movs	r3, #3
 800569c:	75fb      	strb	r3, [r7, #23]
          break;
 800569e:	e01b      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d106      	bne.n	80056ba <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	885b      	ldrh	r3, [r3, #2]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056b8:	e00e      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fcac 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	75fb      	strb	r3, [r7, #23]
          break;
 80056c6:	e007      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 fca5 	bl	800701a <USBD_CtlError>
          ret = USBD_FAIL;
 80056d0:	2303      	movs	r3, #3
 80056d2:	75fb      	strb	r3, [r7, #23]
          break;
 80056d4:	e000      	b.n	80056d8 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 80056d6:	bf00      	nop
      }
      break;
 80056d8:	e006      	b.n	80056e8 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fc9c 	bl	800701a <USBD_CtlError>
      ret = USBD_FAIL;
 80056e2:	2303      	movs	r3, #3
 80056e4:	75fb      	strb	r3, [r7, #23]
      break;
 80056e6:	bf00      	nop
  }
  return (uint8_t)ret;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000044 	.word	0x20000044

080056f8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len, uint8_t ClassId)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4611      	mov	r1, r2
 8005704:	461a      	mov	r2, r3
 8005706:	460b      	mov	r3, r1
 8005708:	80fb      	strh	r3, [r7, #6]
 800570a:	4613      	mov	r3, r2
 800570c:	717b      	strb	r3, [r7, #5]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 800570e:	797b      	ldrb	r3, [r7, #5]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	33b2      	adds	r3, #178	; 0xb2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	617b      	str	r3, [r7, #20]
                                   uint8_t *report, uint16_t len)
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <USBD_CUSTOM_HID_SendReport+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005722:	2303      	movs	r3, #3
 8005724:	e021      	b.n	800576a <USBD_CUSTOM_HID_SendReport+0x72>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
 8005726:	797b      	ldrb	r3, [r7, #5]
 8005728:	2203      	movs	r2, #3
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fdf8 	bl	8006322 <USBD_CoreGetEPAdd>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <USBD_CUSTOM_HID_SendReport+0x7c>)
 8005738:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b03      	cmp	r3, #3
 8005744:	d110      	bne.n	8005768 <USBD_CUSTOM_HID_SendReport+0x70>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	7e1b      	ldrb	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <USBD_CUSTOM_HID_SendReport+0x6c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2201      	movs	r2, #1
 8005752:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005754:	4b07      	ldr	r3, [pc, #28]	; (8005774 <USBD_CUSTOM_HID_SendReport+0x7c>)
 8005756:	7819      	ldrb	r1, [r3, #0]
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f002 f982 	bl	8007a66 <USBD_LL_Transmit>
 8005762:	e001      	b.n	8005768 <USBD_CUSTOM_HID_SendReport+0x70>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <USBD_CUSTOM_HID_SendReport+0x72>
    }
  }
  return (uint8_t)USBD_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000004d 	.word	0x2000004d

08005778 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	33b2      	adds	r3, #178	; 0xb2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	33b2      	adds	r3, #178	; 0xb2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <USBD_CUSTOM_HID_DataOut+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e018      	b.n	80057fc <USBD_CUSTOM_HID_DataOut+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	33b2      	adds	r3, #178	; 0xb2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	33b6      	adds	r3, #182	; 0xb6
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	7810      	ldrb	r0, [r2, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	7852      	ldrb	r2, [r2, #1]
 80057f6:	4611      	mov	r1, r2
 80057f8:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	33b2      	adds	r3, #178	; 0xb2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_CUSTOM_HID_ReceivePacket+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e01d      	b.n	8005860 <USBD_CUSTOM_HID_ReceivePacket+0x5c>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2203      	movs	r2, #3
 800582e:	2100      	movs	r1, #0
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fd76 	bl	8006322 <USBD_CoreGetEPAdd>
 8005836:	4603      	mov	r3, r0
 8005838:	461a      	mov	r2, r3
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 800583c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	33b2      	adds	r3, #178	; 0xb2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <USBD_CUSTOM_HID_ReceivePacket+0x64>)
 8005852:	7819      	ldrb	r1, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	2308      	movs	r3, #8
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 f925 	bl	8007aa8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	2000004e 	.word	0x2000004e

0800586c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	33b2      	adds	r3, #178	; 0xb2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBD_CUSTOM_HID_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800588c:	2303      	movs	r3, #3
 800588e:	e016      	b.n	80058be <USBD_CUSTOM_HID_EP0_RxReady+0x52>
  }

  if (hhid->IsReportAvailable == 1U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d111      	bne.n	80058bc <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	33b6      	adds	r3, #182	; 0xb6
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	7810      	ldrb	r0, [r2, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	7852      	ldrb	r2, [r2, #1]
 80058b2:	4611      	mov	r1, r2
 80058b4:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e009      	b.n	80058ee <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	33b6      	adds	r3, #182	; 0xb6
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800590e:	2303      	movs	r3, #3
 8005910:	e040      	b.n	8005994 <USBD_Init+0x9a>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e022      	b.n	800595e <USBD_Init+0x64>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	32ae      	adds	r2, #174	; 0xae
 800591e:	2100      	movs	r1, #0
 8005920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	33b6      	adds	r3, #182	; 0xb6
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	2200      	movs	r2, #0
 8005930:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    pdev->classId = 0;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	3301      	adds	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d9d9      	bls.n	8005918 <USBD_Init+0x1e>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <USBD_Init+0x80>
  {
    pdev->pDesc = pdesc;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	79fa      	ldrb	r2, [r7, #7]
 8005986:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f001 ff37 	bl	80077fc <USBD_LL_Init>
 800598e:	4603      	mov	r3, r0
 8005990:	74fb      	strb	r3, [r7, #19]

  return ret;
 8005992:	7cfb      	ldrb	r3, [r7, #19]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e025      	b.n	8005a00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	32ae      	adds	r2, #174	; 0xae
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	32ae      	adds	r2, #174	; 0xae
 80059da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	f107 020e 	add.w	r2, r7, #14
 80059e4:	4610      	mov	r0, r2
 80059e6:	4798      	blx	r3
 80059e8:	4602      	mov	r2, r0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

  return USBD_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 ff3b 	bl	8007894 <USBD_LL_Start>
 8005a1e:	4603      	mov	r3, r0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	e028      	b.n	8005aa6 <USBD_SetClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d119      	bne.n	8005aa0 <USBD_SetClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	32ae      	adds	r2, #174	; 0xae
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d012      	beq.n	8005aa0 <USBD_SetClassConfig+0x62>
      {
        pdev->classId = i;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	32ae      	adds	r2, #174	; 0xae
 8005a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	4611      	mov	r1, r2
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <USBD_SetClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d9d3      	bls.n	8005a54 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	e028      	b.n	8005b1e <USBD_ClrClassConfig+0x68>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d119      	bne.n	8005b18 <USBD_ClrClassConfig+0x62>
    {
      if (pdev->pClass[i] != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	32ae      	adds	r2, #174	; 0xae
 8005aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <USBD_ClrClassConfig+0x62>
      {
        pdev->classId = i;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	32ae      	adds	r2, #174	; 0xae
 8005b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	4798      	blx	r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <USBD_ClrClassConfig+0x62>
        {
          ret = USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d9d3      	bls.n	8005acc <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fa30 	bl	8006fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d01a      	beq.n	8005ba0 <USBD_LL_SetupStage+0x72>
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d822      	bhi.n	8005bb4 <USBD_LL_SetupStage+0x86>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <USBD_LL_SetupStage+0x4a>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d00a      	beq.n	8005b8c <USBD_LL_SetupStage+0x5e>
 8005b76:	e01d      	b.n	8005bb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fc4d 	bl	8006420 <USBD_StdDevReq>
 8005b86:	4603      	mov	r3, r0
 8005b88:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8a:	e020      	b.n	8005bce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fcb5 	bl	8006504 <USBD_StdItfReq>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9e:	e016      	b.n	8005bce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fd17 	bl	80065dc <USBD_StdEPReq>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb2:	e00c      	b.n	8005bce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 fec6 	bl	8007954 <USBD_LL_StallEP>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	bf00      	nop
  }

  return ret;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	460b      	mov	r3, r1
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d16e      	bne.n	8005cce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005bf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	f040 8098 	bne.w	8005d34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d913      	bls.n	8005c38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	1ad2      	subs	r2, r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bf28      	it	cs
 8005c2a:	4613      	movcs	r3, r2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f001 fab6 	bl	80071a2 <USBD_CtlContinueRx>
 8005c36:	e07d      	b.n	8005d34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d014      	beq.n	8005c70 <USBD_LL_DataOutStage+0x98>
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d81d      	bhi.n	8005c86 <USBD_LL_DataOutStage+0xae>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <USBD_LL_DataOutStage+0x7c>
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d003      	beq.n	8005c5a <USBD_LL_DataOutStage+0x82>
 8005c52:	e018      	b.n	8005c86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	75bb      	strb	r3, [r7, #22]
            break;
 8005c58:	e018      	b.n	8005c8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fabf 	bl	80061e8 <USBD_CoreFindIF>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75bb      	strb	r3, [r7, #22]
            break;
 8005c6e:	e00d      	b.n	8005c8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fb03 	bl	8006286 <USBD_CoreFindEP>
 8005c80:	4603      	mov	r3, r0
 8005c82:	75bb      	strb	r3, [r7, #22]
            break;
 8005c84:	e002      	b.n	8005c8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75bb      	strb	r3, [r7, #22]
            break;
 8005c8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c8c:	7dbb      	ldrb	r3, [r7, #22]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d819      	bhi.n	8005cc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d113      	bne.n	8005cc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c9e:	7dba      	ldrb	r2, [r7, #22]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	32ae      	adds	r2, #174	; 0xae
 8005ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cae:	7dba      	ldrb	r2, [r7, #22]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cb6:	7dba      	ldrb	r2, [r7, #22]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	32ae      	adds	r2, #174	; 0xae
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f001 fa7c 	bl	80071c4 <USBD_CtlSendStatus>
 8005ccc:	e032      	b.n	8005d34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fad4 	bl	8006286 <USBD_CoreFindEP>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ce2:	7dbb      	ldrb	r3, [r7, #22]
 8005ce4:	2bff      	cmp	r3, #255	; 0xff
 8005ce6:	d025      	beq.n	8005d34 <USBD_LL_DataOutStage+0x15c>
 8005ce8:	7dbb      	ldrb	r3, [r7, #22]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d822      	bhi.n	8005d34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d117      	bne.n	8005d2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005cfa:	7dba      	ldrb	r2, [r7, #22]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	32ae      	adds	r2, #174	; 0xae
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d0a:	7dba      	ldrb	r2, [r7, #22]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d12:	7dba      	ldrb	r2, [r7, #22]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	32ae      	adds	r2, #174	; 0xae
 8005d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	7afa      	ldrb	r2, [r7, #11]
 8005d20:	4611      	mov	r1, r2
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	e000      	b.n	8005d36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b086      	sub	sp, #24
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	460b      	mov	r3, r1
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d16f      	bne.n	8005e32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3314      	adds	r3, #20
 8005d56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d15a      	bne.n	8005e18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d914      	bls.n	8005d98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f001 f9de 	bl	8007146 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2100      	movs	r1, #0
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 fe89 	bl	8007aa8 <USBD_LL_PrepareReceive>
 8005d96:	e03f      	b.n	8005e18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d11c      	bne.n	8005dde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d316      	bcc.n	8005dde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20f      	bcs.n	8005dde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 f9bf 	bl	8007146 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f001 fe66 	bl	8007aa8 <USBD_LL_PrepareReceive>
 8005ddc:	e01c      	b.n	8005e18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d10f      	bne.n	8005e0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f001 fda1 	bl	8007954 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f001 f9e9 	bl	80071ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d03a      	beq.n	8005e98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff fe00 	bl	8005a28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e30:	e032      	b.n	8005e98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fa22 	bl	8006286 <USBD_CoreFindEP>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2bff      	cmp	r3, #255	; 0xff
 8005e4a:	d025      	beq.n	8005e98 <USBD_LL_DataInStage+0x15a>
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d822      	bhi.n	8005e98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d11c      	bne.n	8005e98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e5e:	7dfa      	ldrb	r2, [r7, #23]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	32ae      	adds	r2, #174	; 0xae
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e6e:	7dfa      	ldrb	r2, [r7, #23]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e76:	7dfa      	ldrb	r2, [r7, #23]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	32ae      	adds	r2, #174	; 0xae
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	7afa      	ldrb	r2, [r7, #11]
 8005e84:	4611      	mov	r1, r2
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	4798      	blx	r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e8e:	7dbb      	ldrb	r3, [r7, #22]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e94:	7dbb      	ldrb	r3, [r7, #22]
 8005e96:	e000      	b.n	8005e9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	e032      	b.n	8005f40 <USBD_LL_Reset+0x9e>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	440b      	add	r3, r1
 8005ee8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d123      	bne.n	8005f3a <USBD_LL_Reset+0x98>
    {
      if (pdev->pClass[i] != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	32ae      	adds	r2, #174	; 0xae
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01c      	beq.n	8005f3a <USBD_LL_Reset+0x98>
      {
        pdev->classId = i;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	32ae      	adds	r2, #174	; 0xae
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d010      	beq.n	8005f3a <USBD_LL_Reset+0x98>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	32ae      	adds	r2, #174	; 0xae
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6852      	ldr	r2, [r2, #4]
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <USBD_LL_Reset+0x98>
          {
            ret = USBD_FAIL;
 8005f36:	2303      	movs	r3, #3
 8005f38:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	60bb      	str	r3, [r7, #8]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d9c9      	bls.n	8005eda <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fcbc 	bl	80078ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2240      	movs	r2, #64	; 0x40
 8005f5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f62:	2340      	movs	r3, #64	; 0x40
 8005f64:	2200      	movs	r2, #0
 8005f66:	2180      	movs	r1, #128	; 0x80
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fcae 	bl	80078ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2240      	movs	r2, #64	; 0x40
 8005f78:	621a      	str	r2, [r3, #32]

  return ret;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d006      	beq.n	8005fc6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d106      	bne.n	8005ffe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b03      	cmp	r3, #3
 800601e:	d12f      	bne.n	8006080 <USBD_LL_SOF+0x74>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e029      	b.n	800607a <USBD_LL_SOF+0x6e>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	440b      	add	r3, r1
 8006034:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d11a      	bne.n	8006074 <USBD_LL_SOF+0x68>
      {
        if (pdev->pClass[i] != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	32ae      	adds	r2, #174	; 0xae
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d013      	beq.n	8006074 <USBD_LL_SOF+0x68>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	32ae      	adds	r2, #174	; 0xae
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_LL_SOF+0x68>
          {
            pdev->classId = i;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
            (void)pdev->pClass[i]->SOF(pdev);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	32ae      	adds	r2, #174	; 0xae
 800606a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b03      	cmp	r3, #3
 800607e:	d9d2      	bls.n	8006026 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	32ae      	adds	r2, #174	; 0xae
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e01c      	b.n	80060e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d115      	bne.n	80060e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	32ae      	adds	r2, #174	; 0xae
 80060c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32ae      	adds	r2, #174	; 0xae
 80060d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	4611      	mov	r1, r2
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	32ae      	adds	r2, #174	; 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	e01c      	b.n	800614a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b03      	cmp	r3, #3
 800611a:	d115      	bne.n	8006148 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	32ae      	adds	r2, #174	; 0xae
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	32ae      	adds	r2, #174	; 0xae
 800613a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	4611      	mov	r1, r2
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	e02a      	b.n	80061d8 <USBD_LL_DevDisconnected+0x70>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d11b      	bne.n	80061d2 <USBD_LL_DevDisconnected+0x6a>
    {
      if (pdev->pClass[i] != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	32ae      	adds	r2, #174	; 0xae
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d014      	beq.n	80061d2 <USBD_LL_DevDisconnected+0x6a>
      {
        pdev->classId = i;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Clear configuration  and De-initialize the Class process*/
        if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	32ae      	adds	r2, #174	; 0xae
 80061b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6852      	ldr	r2, [r2, #4]
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	4611      	mov	r1, r2
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4798      	blx	r3
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <USBD_LL_DevDisconnected+0x6a>
        {
          ret = USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d9d1      	bls.n	8006182 <USBD_LL_DevDisconnected+0x1a>
      ret = USBD_FAIL;
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e03b      	b.n	8006272 <USBD_CoreFindIF+0x8a>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4613      	mov	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	440b      	add	r3, r1
 8006208:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d12c      	bne.n	800626c <USBD_CoreFindIF+0x84>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	e01c      	b.n	8006252 <USBD_CoreFindIF+0x6a>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4613      	mov	r3, r2
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	18ca      	adds	r2, r1, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	429a      	cmp	r2, r3
 8006234:	d10a      	bne.n	800624c <USBD_CoreFindIF+0x64>
        {
          if (pdev->pClass[i]->Setup != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	32ae      	adds	r2, #174	; 0xae
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <USBD_CoreFindIF+0x64>
          {
            return (uint8_t)i;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e016      	b.n	800627a <USBD_CoreFindIF+0x92>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	3301      	adds	r3, #1
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	440b      	add	r3, r1
 8006260:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	d3d5      	bcc.n	8006218 <USBD_CoreFindIF+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d9c0      	bls.n	80061fa <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8006278:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e03a      	b.n	800630e <USBD_CoreFindEP+0x88>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4613      	mov	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	440b      	add	r3, r1
 80062a6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d12b      	bne.n	8006308 <USBD_CoreFindEP+0x82>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	e01b      	b.n	80062ee <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	4413      	add	r3, r2
 80062c6:	33c4      	adds	r3, #196	; 0xc4
 80062c8:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80062cc:	78fa      	ldrb	r2, [r7, #3]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d10a      	bne.n	80062e8 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	32ae      	adds	r2, #174	; 0xae
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	e016      	b.n	8006316 <USBD_CoreFindEP+0x90>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	440b      	add	r3, r1
 80062fc:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d3d6      	bcc.n	80062b6 <USBD_CoreFindEP+0x30>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d9c1      	bls.n	8006298 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8006314:	23ff      	movs	r3, #255	; 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	4608      	mov	r0, r1
 800632c:	4611      	mov	r1, r2
 800632e:	461a      	mov	r2, r3
 8006330:	4603      	mov	r3, r0
 8006332:	70fb      	strb	r3, [r7, #3]
 8006334:	460b      	mov	r3, r1
 8006336:	70bb      	strb	r3, [r7, #2]
 8006338:	4613      	mov	r3, r2
 800633a:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]
 8006340:	e03b      	b.n	80063ba <USBD_CoreGetEPAdd+0x98>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8006342:	787a      	ldrb	r2, [r7, #1]
 8006344:	7bf8      	ldrb	r0, [r7, #15]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	4403      	add	r3, r0
 8006352:	33c4      	adds	r3, #196	; 0xc4
 8006354:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8006358:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	429a      	cmp	r2, r3
 8006360:	d128      	bne.n	80063b4 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8006362:	787a      	ldrb	r2, [r7, #1]
 8006364:	7bf8      	ldrb	r0, [r7, #15]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4403      	add	r3, r0
 8006372:	33c4      	adds	r3, #196	; 0xc4
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800637a:	78ba      	ldrb	r2, [r7, #2]
 800637c:	429a      	cmp	r2, r3
 800637e:	d119      	bne.n	80063b4 <USBD_CoreGetEPAdd+0x92>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 8006380:	787a      	ldrb	r2, [r7, #1]
 8006382:	7bf8      	ldrb	r0, [r7, #15]
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4613      	mov	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	1a9b      	subs	r3, r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4403      	add	r3, r0
 8006390:	33c4      	adds	r3, #196	; 0xc4
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00b      	beq.n	80063b4 <USBD_CoreGetEPAdd+0x92>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800639c:	787a      	ldrb	r2, [r7, #1]
 800639e:	7bf8      	ldrb	r0, [r7, #15]
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	4403      	add	r3, r0
 80063ac:	33c4      	adds	r3, #196	; 0xc4
 80063ae:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 80063b2:	e010      	b.n	80063d6 <USBD_CoreGetEPAdd+0xb4>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	3301      	adds	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
 80063ba:	7bf9      	ldrb	r1, [r7, #15]
 80063bc:	787a      	ldrb	r2, [r7, #1]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4403      	add	r3, r0
 80063ca:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d3b6      	bcc.n	8006342 <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 80063d4:	23ff      	movs	r3, #255	; 0xff
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3301      	adds	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006400:	8a3b      	ldrh	r3, [r7, #16]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	b21a      	sxth	r2, r3
 8006406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800640a:	4313      	orrs	r3, r2
 800640c:	b21b      	sxth	r3, r3
 800640e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006410:	89fb      	ldrh	r3, [r7, #14]
}
 8006412:	4618      	mov	r0, r3
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d005      	beq.n	8006446 <USBD_StdDevReq+0x26>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d857      	bhi.n	80064ee <USBD_StdDevReq+0xce>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00f      	beq.n	8006462 <USBD_StdDevReq+0x42>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d153      	bne.n	80064ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	32ae      	adds	r2, #174	; 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e04a      	b.n	80064f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b09      	cmp	r3, #9
 8006468:	d83b      	bhi.n	80064e2 <USBD_StdDevReq+0xc2>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <USBD_StdDevReq+0x50>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064c5 	.word	0x080064c5
 8006474:	080064d9 	.word	0x080064d9
 8006478:	080064e3 	.word	0x080064e3
 800647c:	080064cf 	.word	0x080064cf
 8006480:	080064e3 	.word	0x080064e3
 8006484:	080064a3 	.word	0x080064a3
 8006488:	08006499 	.word	0x08006499
 800648c:	080064e3 	.word	0x080064e3
 8006490:	080064bb 	.word	0x080064bb
 8006494:	080064ad 	.word	0x080064ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa3c 	bl	8006918 <USBD_GetDescriptor>
          break;
 80064a0:	e024      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fbdb 	bl	8006c60 <USBD_SetAddress>
          break;
 80064aa:	e01f      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fc1a 	bl	8006ce8 <USBD_SetConfig>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
          break;
 80064b8:	e018      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fcbd 	bl	8006e3c <USBD_GetConfig>
          break;
 80064c2:	e013      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fcee 	bl	8006ea8 <USBD_GetStatus>
          break;
 80064cc:	e00e      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fd1d 	bl	8006f10 <USBD_SetFeature>
          break;
 80064d6:	e009      	b.n	80064ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fd41 	bl	8006f62 <USBD_ClrFeature>
          break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd98 	bl	800701a <USBD_CtlError>
          break;
 80064ea:	bf00      	nop
      }
      break;
 80064ec:	e004      	b.n	80064f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fd92 	bl	800701a <USBD_CtlError>
      break;
 80064f6:	bf00      	nop
  }

  return ret;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop

08006504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800651a:	2b40      	cmp	r3, #64	; 0x40
 800651c:	d005      	beq.n	800652a <USBD_StdItfReq+0x26>
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d852      	bhi.n	80065c8 <USBD_StdItfReq+0xc4>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USBD_StdItfReq+0x26>
 8006526:	2b20      	cmp	r3, #32
 8006528:	d14e      	bne.n	80065c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	2b02      	cmp	r3, #2
 8006536:	d840      	bhi.n	80065ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	889b      	ldrh	r3, [r3, #4]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d836      	bhi.n	80065b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff fe4c 	bl	80061e8 <USBD_CoreFindIF>
 8006550:	4603      	mov	r3, r0
 8006552:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2bff      	cmp	r3, #255	; 0xff
 8006558:	d01d      	beq.n	8006596 <USBD_StdItfReq+0x92>
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d81a      	bhi.n	8006596 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006560:	7bba      	ldrb	r2, [r7, #14]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	32ae      	adds	r2, #174	; 0xae
 8006566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00f      	beq.n	8006590 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006570:	7bba      	ldrb	r2, [r7, #14]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006578:	7bba      	ldrb	r2, [r7, #14]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32ae      	adds	r2, #174	; 0xae
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800658e:	e004      	b.n	800659a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006590:	2303      	movs	r3, #3
 8006592:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006594:	e001      	b.n	800659a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	88db      	ldrh	r3, [r3, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d110      	bne.n	80065c4 <USBD_StdItfReq+0xc0>
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fe0b 	bl	80071c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065ae:	e009      	b.n	80065c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fd31 	bl	800701a <USBD_CtlError>
          break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fd2c 	bl	800701a <USBD_CtlError>
          break;
 80065c2:	e000      	b.n	80065c6 <USBD_StdItfReq+0xc2>
          break;
 80065c4:	bf00      	nop
      }
      break;
 80065c6:	e004      	b.n	80065d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fd25 	bl	800701a <USBD_CtlError>
      break;
 80065d0:	bf00      	nop
  }

  return ret;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	889b      	ldrh	r3, [r3, #4]
 80065ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d007      	beq.n	800660c <USBD_StdEPReq+0x30>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	f200 817f 	bhi.w	8006900 <USBD_StdEPReq+0x324>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d02a      	beq.n	800665c <USBD_StdEPReq+0x80>
 8006606:	2b20      	cmp	r3, #32
 8006608:	f040 817a 	bne.w	8006900 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fe38 	bl	8006286 <USBD_CoreFindEP>
 8006616:	4603      	mov	r3, r0
 8006618:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800661a:	7b7b      	ldrb	r3, [r7, #13]
 800661c:	2bff      	cmp	r3, #255	; 0xff
 800661e:	f000 8174 	beq.w	800690a <USBD_StdEPReq+0x32e>
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	2b03      	cmp	r3, #3
 8006626:	f200 8170 	bhi.w	800690a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800662a:	7b7a      	ldrb	r2, [r7, #13]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006632:	7b7a      	ldrb	r2, [r7, #13]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	32ae      	adds	r2, #174	; 0xae
 8006638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8163 	beq.w	800690a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006644:	7b7a      	ldrb	r2, [r7, #13]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32ae      	adds	r2, #174	; 0xae
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800665a:	e156      	b.n	800690a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d008      	beq.n	8006676 <USBD_StdEPReq+0x9a>
 8006664:	2b03      	cmp	r3, #3
 8006666:	f300 8145 	bgt.w	80068f4 <USBD_StdEPReq+0x318>
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 809b 	beq.w	80067a6 <USBD_StdEPReq+0x1ca>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d03c      	beq.n	80066ee <USBD_StdEPReq+0x112>
 8006674:	e13e      	b.n	80068f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d002      	beq.n	8006688 <USBD_StdEPReq+0xac>
 8006682:	2b03      	cmp	r3, #3
 8006684:	d016      	beq.n	80066b4 <USBD_StdEPReq+0xd8>
 8006686:	e02c      	b.n	80066e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00d      	beq.n	80066aa <USBD_StdEPReq+0xce>
 800668e:	7bbb      	ldrb	r3, [r7, #14]
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d00a      	beq.n	80066aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f95b 	bl	8007954 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 f957 	bl	8007954 <USBD_LL_StallEP>
 80066a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066a8:	e020      	b.n	80066ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fcb4 	bl	800701a <USBD_CtlError>
              break;
 80066b2:	e01b      	b.n	80066ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	885b      	ldrh	r3, [r3, #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10e      	bne.n	80066da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <USBD_StdEPReq+0xfe>
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d008      	beq.n	80066da <USBD_StdEPReq+0xfe>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 f93d 	bl	8007954 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fd72 	bl	80071c4 <USBD_CtlSendStatus>

              break;
 80066e0:	e004      	b.n	80066ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc98 	bl	800701a <USBD_CtlError>
              break;
 80066ea:	bf00      	nop
          }
          break;
 80066ec:	e107      	b.n	80068fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d002      	beq.n	8006700 <USBD_StdEPReq+0x124>
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d016      	beq.n	800672c <USBD_StdEPReq+0x150>
 80066fe:	e04b      	b.n	8006798 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <USBD_StdEPReq+0x146>
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d00a      	beq.n	8006722 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f91f 	bl	8007954 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 f91b 	bl	8007954 <USBD_LL_StallEP>
 800671e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006720:	e040      	b.n	80067a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc78 	bl	800701a <USBD_CtlError>
              break;
 800672a:	e03b      	b.n	80067a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	885b      	ldrh	r3, [r3, #2]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d136      	bne.n	80067a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 f925 	bl	8007992 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fd3b 	bl	80071c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fd97 	bl	8006286 <USBD_CoreFindEP>
 8006758:	4603      	mov	r3, r0
 800675a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800675c:	7b7b      	ldrb	r3, [r7, #13]
 800675e:	2bff      	cmp	r3, #255	; 0xff
 8006760:	d01f      	beq.n	80067a2 <USBD_StdEPReq+0x1c6>
 8006762:	7b7b      	ldrb	r3, [r7, #13]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d81c      	bhi.n	80067a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006768:	7b7a      	ldrb	r2, [r7, #13]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006770:	7b7a      	ldrb	r2, [r7, #13]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32ae      	adds	r2, #174	; 0xae
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006780:	7b7a      	ldrb	r2, [r7, #13]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32ae      	adds	r2, #174	; 0xae
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006796:	e004      	b.n	80067a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc3d 	bl	800701a <USBD_CtlError>
              break;
 80067a0:	e000      	b.n	80067a4 <USBD_StdEPReq+0x1c8>
              break;
 80067a2:	bf00      	nop
          }
          break;
 80067a4:	e0ab      	b.n	80068fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d002      	beq.n	80067b8 <USBD_StdEPReq+0x1dc>
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d032      	beq.n	800681c <USBD_StdEPReq+0x240>
 80067b6:	e097      	b.n	80068e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <USBD_StdEPReq+0x1f2>
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d004      	beq.n	80067ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc27 	bl	800701a <USBD_CtlError>
                break;
 80067cc:	e091      	b.n	80068f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da0b      	bge.n	80067ee <USBD_StdEPReq+0x212>
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	3310      	adds	r3, #16
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	3304      	adds	r3, #4
 80067ec:	e00b      	b.n	8006806 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2202      	movs	r2, #2
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fc7b 	bl	8007110 <USBD_CtlSendData>
              break;
 800681a:	e06a      	b.n	80068f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da11      	bge.n	8006848 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d117      	bne.n	800686e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbea 	bl	800701a <USBD_CtlError>
                  break;
 8006846:	e054      	b.n	80068f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fbd7 	bl	800701a <USBD_CtlError>
                  break;
 800686c:	e041      	b.n	80068f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800686e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da0b      	bge.n	800688e <USBD_StdEPReq+0x2b2>
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	3310      	adds	r3, #16
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	3304      	adds	r3, #4
 800688c:	e00b      	b.n	80068a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	3304      	adds	r3, #4
 80068a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <USBD_StdEPReq+0x2d8>
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d103      	bne.n	80068bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e00e      	b.n	80068da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f885 	bl	80079d0 <USBD_LL_IsStallEP>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fc15 	bl	8007110 <USBD_CtlSendData>
              break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb95 	bl	800701a <USBD_CtlError>
              break;
 80068f0:	bf00      	nop
          }
          break;
 80068f2:	e004      	b.n	80068fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fb8f 	bl	800701a <USBD_CtlError>
          break;
 80068fc:	bf00      	nop
      }
      break;
 80068fe:	e005      	b.n	800690c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fb89 	bl	800701a <USBD_CtlError>
      break;
 8006908:	e000      	b.n	800690c <USBD_StdEPReq+0x330>
      break;
 800690a:	bf00      	nop
  }

  return ret;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	2b06      	cmp	r3, #6
 800693a:	f200 8163 	bhi.w	8006c04 <USBD_GetDescriptor+0x2ec>
 800693e:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <USBD_GetDescriptor+0x2c>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006961 	.word	0x08006961
 8006948:	08006979 	.word	0x08006979
 800694c:	080069f1 	.word	0x080069f1
 8006950:	08006c05 	.word	0x08006c05
 8006954:	08006c05 	.word	0x08006c05
 8006958:	08006b67 	.word	0x08006b67
 800695c:	08006baf 	.word	0x08006baf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
      break;
 8006976:	e14d      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7c1b      	ldrb	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11b      	bne.n	80069b8 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <USBD_GetDescriptor+0x84>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800698c:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <USBD_GetDescriptor+0x2e8>)
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	f107 0208 	add.w	r2, r7, #8
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	e008      	b.n	80069ae <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f107 0208 	add.w	r2, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069b6:	e12d      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d007      	beq.n	80069d4 <USBD_GetDescriptor+0xbc>
          pbuf = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 80069c4:	4b8e      	ldr	r3, [pc, #568]	; (8006c00 <USBD_GetDescriptor+0x2e8>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f107 0208 	add.w	r2, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	e008      	b.n	80069e6 <USBD_GetDescriptor+0xce>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2202      	movs	r2, #2
 80069ec:	701a      	strb	r2, [r3, #0]
      break;
 80069ee:	e111      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	885b      	ldrh	r3, [r3, #2]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	f200 80ac 	bhi.w	8006b54 <USBD_GetDescriptor+0x23c>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_GetDescriptor+0xec>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a1d 	.word	0x08006a1d
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a85 	.word	0x08006a85
 8006a10:	08006ab9 	.word	0x08006ab9
 8006a14:	08006aed 	.word	0x08006aed
 8006a18:	08006b21 	.word	0x08006b21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00b      	beq.n	8006a40 <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	7c12      	ldrb	r2, [r2, #16]
 8006a34:	f107 0108 	add.w	r1, r7, #8
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a3e:	e091      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fae9 	bl	800701a <USBD_CtlError>
            err++;
 8006a48:	7afb      	ldrb	r3, [r7, #11]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a4e:	e089      	b.n	8006b64 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	7c12      	ldrb	r2, [r2, #16]
 8006a68:	f107 0108 	add.w	r1, r7, #8
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a72:	e077      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 facf 	bl	800701a <USBD_CtlError>
            err++;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	72fb      	strb	r3, [r7, #11]
          break;
 8006a82:	e06f      	b.n	8006b64 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	7c12      	ldrb	r2, [r2, #16]
 8006a9c:	f107 0108 	add.w	r1, r7, #8
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4798      	blx	r3
 8006aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aa6:	e05d      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fab5 	bl	800701a <USBD_CtlError>
            err++;
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ab6:	e055      	b.n	8006b64 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	7c12      	ldrb	r2, [r2, #16]
 8006ad0:	f107 0108 	add.w	r1, r7, #8
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ada:	e043      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa9b 	bl	800701a <USBD_CtlError>
            err++;
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aea:	e03b      	b.n	8006b64 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7c12      	ldrb	r2, [r2, #16]
 8006b04:	f107 0108 	add.w	r1, r7, #8
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4798      	blx	r3
 8006b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b0e:	e029      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa81 	bl	800701a <USBD_CtlError>
            err++;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b1e:	e021      	b.n	8006b64 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00b      	beq.n	8006b44 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 0108 	add.w	r1, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b42:	e00f      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa67 	bl	800701a <USBD_CtlError>
            err++;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	72fb      	strb	r3, [r7, #11]
          break;
 8006b52:	e007      	b.n	8006b64 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa5f 	bl	800701a <USBD_CtlError>
          err++;
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b62:	bf00      	nop
      }
      break;
 8006b64:	e056      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7c1b      	ldrb	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d117      	bne.n	8006b9e <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 8006b7a:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <USBD_GetDescriptor+0x2e8>)
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	f107 0208 	add.w	r2, r7, #8
 8006b82:	4610      	mov	r0, r2
 8006b84:	4798      	blx	r3
 8006b86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b88:	e044      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f107 0208 	add.w	r2, r7, #8
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	60f8      	str	r0, [r7, #12]
      break;
 8006b9c:	e03a      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa3a 	bl	800701a <USBD_CtlError>
        err++;
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	72fb      	strb	r3, [r7, #11]
      break;
 8006bac:	e032      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d11b      	bne.n	8006bee <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 8006bc2:	4b0f      	ldr	r3, [pc, #60]	; (8006c00 <USBD_GetDescriptor+0x2e8>)
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	f107 0208 	add.w	r2, r7, #8
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4798      	blx	r3
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	e008      	b.n	8006be4 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	f107 0208 	add.w	r2, r7, #8
 8006bde:	4610      	mov	r0, r2
 8006be0:	4798      	blx	r3
 8006be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	2207      	movs	r2, #7
 8006bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bec:	e012      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa12 	bl	800701a <USBD_CtlError>
        err++;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8006bfc:	e00a      	b.n	8006c14 <USBD_GetDescriptor+0x2fc>
 8006bfe:	bf00      	nop
 8006c00:	20000050 	.word	0x20000050

    default:
      USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa07 	bl	800701a <USBD_CtlError>
      err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
      break;
 8006c12:	bf00      	nop
  }

  if (err != 0U)
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11e      	bne.n	8006c58 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 8006c22:	893b      	ldrh	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00e      	beq.n	8006c46 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	88da      	ldrh	r2, [r3, #6]
 8006c2c:	893b      	ldrh	r3, [r7, #8]
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	bf28      	it	cs
 8006c32:	4613      	movcs	r3, r2
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c38:	893b      	ldrh	r3, [r7, #8]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa66 	bl	8007110 <USBD_CtlSendData>
 8006c44:	e009      	b.n	8006c5a <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9e6 	bl	800701a <USBD_CtlError>
 8006c4e:	e004      	b.n	8006c5a <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fab7 	bl	80071c4 <USBD_CtlSendStatus>
 8006c56:	e000      	b.n	8006c5a <USBD_GetDescriptor+0x342>
    return;
 8006c58:	bf00      	nop
  }
}
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d131      	bne.n	8006cd6 <USBD_SetAddress+0x76>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	88db      	ldrh	r3, [r3, #6]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d12d      	bne.n	8006cd6 <USBD_SetAddress+0x76>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c80:	d829      	bhi.n	8006cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d104      	bne.n	8006ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9bc 	bl	800701a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca2:	e01d      	b.n	8006ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 feb9 	bl	8007a28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa84 	bl	80071c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cca:	e009      	b.n	8006ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd4:	e004      	b.n	8006ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f99e 	bl	800701a <USBD_CtlError>
  }
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b4e      	ldr	r3, [pc, #312]	; (8006e38 <USBD_SetConfig+0x150>)
 8006cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d00:	4b4d      	ldr	r3, [pc, #308]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d905      	bls.n	8006d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f985 	bl	800701a <USBD_CtlError>
    return USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e08c      	b.n	8006e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d002      	beq.n	8006d26 <USBD_SetConfig+0x3e>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d029      	beq.n	8006d78 <USBD_SetConfig+0x90>
 8006d24:	e075      	b.n	8006e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d020      	beq.n	8006d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d2e:	4b42      	ldr	r3, [pc, #264]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fe fe7d 	bl	8005a3e <USBD_SetClassConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f962 	bl	800701a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d5e:	e065      	b.n	8006e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa2f 	bl	80071c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d6e:	e05d      	b.n	8006e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa27 	bl	80071c4 <USBD_CtlSendStatus>
      break;
 8006d76:	e059      	b.n	8006e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d78:	4b2f      	ldr	r3, [pc, #188]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d112      	bne.n	8006da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d88:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d92:	4b29      	ldr	r3, [pc, #164]	; (8006e38 <USBD_SetConfig+0x150>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fe fe8c 	bl	8005ab6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa10 	bl	80071c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006da4:	e042      	b.n	8006e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006da6:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <USBD_SetConfig+0x150>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d02a      	beq.n	8006e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fe fe7a 	bl	8005ab6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <USBD_SetConfig+0x150>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <USBD_SetConfig+0x150>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fe fe33 	bl	8005a3e <USBD_SetClassConfig>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f918 	bl	800701a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fe fe5f 	bl	8005ab6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e00:	e014      	b.n	8006e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9de 	bl	80071c4 <USBD_CtlSendStatus>
      break;
 8006e08:	e010      	b.n	8006e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9da 	bl	80071c4 <USBD_CtlSendStatus>
      break;
 8006e10:	e00c      	b.n	8006e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f900 	bl	800701a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <USBD_SetConfig+0x150>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fe fe48 	bl	8005ab6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000280 	.word	0x20000280

08006e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	88db      	ldrh	r3, [r3, #6]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d004      	beq.n	8006e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f8e2 	bl	800701a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e56:	e023      	b.n	8006ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	dc02      	bgt.n	8006e6a <USBD_GetConfig+0x2e>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dc03      	bgt.n	8006e70 <USBD_GetConfig+0x34>
 8006e68:	e015      	b.n	8006e96 <USBD_GetConfig+0x5a>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d00b      	beq.n	8006e86 <USBD_GetConfig+0x4a>
 8006e6e:	e012      	b.n	8006e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f946 	bl	8007110 <USBD_CtlSendData>
        break;
 8006e84:	e00c      	b.n	8006ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f93e 	bl	8007110 <USBD_CtlSendData>
        break;
 8006e94:	e004      	b.n	8006ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8be 	bl	800701a <USBD_CtlError>
        break;
 8006e9e:	bf00      	nop
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d81e      	bhi.n	8006efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	88db      	ldrh	r3, [r3, #6]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d004      	beq.n	8006ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8a5 	bl	800701a <USBD_CtlError>
        break;
 8006ed0:	e01a      	b.n	8006f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f043 0202 	orr.w	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f90a 	bl	8007110 <USBD_CtlSendData>
      break;
 8006efc:	e004      	b.n	8006f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f88a 	bl	800701a <USBD_CtlError>
      break;
 8006f06:	bf00      	nop
  }
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d107      	bne.n	8006f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f94a 	bl	80071c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f30:	e013      	b.n	8006f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d10b      	bne.n	8006f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f93a 	bl	80071c4 <USBD_CtlSendStatus>
}
 8006f50:	e003      	b.n	8006f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f860 	bl	800701a <USBD_CtlError>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d80b      	bhi.n	8006f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	885b      	ldrh	r3, [r3, #2]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d10c      	bne.n	8006f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f91a 	bl	80071c4 <USBD_CtlSendStatus>
      }
      break;
 8006f90:	e004      	b.n	8006f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f840 	bl	800701a <USBD_CtlError>
      break;
 8006f9a:	e000      	b.n	8006f9e <USBD_ClrFeature+0x3c>
      break;
 8006f9c:	bf00      	nop
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fa06 	bl	80063e2 <SWAPBYTE>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff f9f9 	bl	80063e2 <SWAPBYTE>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff f9ec 	bl	80063e2 <SWAPBYTE>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	80da      	strh	r2, [r3, #6]
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007024:	2180      	movs	r1, #128	; 0x80
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fc94 	bl	8007954 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc90 	bl	8007954 <USBD_LL_StallEP>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d040      	beq.n	80070d4 <USBD_GetString+0x98>
  {
    return;
  }

  pdesc = desc;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007056:	6938      	ldr	r0, [r7, #16]
 8007058:	f000 f840 	bl	80070dc <USBD_GetLen>
 800705c:	4603      	mov	r3, r0
 800705e:	3301      	adds	r3, #1
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d808      	bhi.n	8007078 <USBD_GetString+0x3c>
 8007066:	6938      	ldr	r0, [r7, #16]
 8007068:	f000 f838 	bl	80070dc <USBD_GetLen>
 800706c:	4603      	mov	r3, r0
 800706e:	3301      	adds	r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	e000      	b.n	800707a <USBD_GetString+0x3e>
 8007078:	2240      	movs	r2, #64	; 0x40
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4413      	add	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
  idx++;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	2203      	movs	r2, #3
 8007098:	701a      	strb	r2, [r3, #0]
  idx++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070a0:	e013      	b.n	80070ca <USBD_GetString+0x8e>
  {
    unicode[idx] = *pdesc;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4413      	add	r3, r2
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
    idx++;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	3301      	adds	r3, #1
 80070b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	3301      	adds	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e7      	bne.n	80070a2 <USBD_GetString+0x66>
 80070d2:	e000      	b.n	80070d6 <USBD_GetString+0x9a>
    return;
 80070d4:	bf00      	nop
  }
}
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070ec:	e005      	b.n	80070fa <USBD_GetLen+0x1e>
  {
    len++;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	3301      	adds	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f5      	bne.n	80070ee <USBD_GetLen+0x12>
  }

  return len;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2202      	movs	r2, #2
 8007120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	2100      	movs	r1, #0
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fc95 	bl	8007a66 <USBD_LL_Transmit>

  return USBD_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	2100      	movs	r1, #0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fc84 	bl	8007a66 <USBD_LL_Transmit>

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2203      	movs	r2, #3
 8007178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	2100      	movs	r1, #0
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fc88 	bl	8007aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	2100      	movs	r1, #0
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 fc77 	bl	8007aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2204      	movs	r2, #4
 80071d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071d4:	2300      	movs	r3, #0
 80071d6:	2200      	movs	r2, #0
 80071d8:	2100      	movs	r1, #0
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fc43 	bl	8007a66 <USBD_LL_Transmit>

  return USBD_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2205      	movs	r2, #5
 80071f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fa:	2300      	movs	r3, #0
 80071fc:	2200      	movs	r2, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc51 	bl	8007aa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

    // Initialize the Device Library, add supported class and start the library
    USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8007214:	2200      	movs	r2, #0
 8007216:	491a      	ldr	r1, [pc, #104]	; (8007280 <MX_USB_DEVICE_Init+0x70>)
 8007218:	481a      	ldr	r0, [pc, #104]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800721a:	f7fe fb6e 	bl	80058fa <USBD_Init>

    // Register the HID class
    USBD_RegisterClass(&hUsbDeviceFS, USBD_CUSTOM_HID_CLASS);
 800721e:	491a      	ldr	r1, [pc, #104]	; (8007288 <MX_USB_DEVICE_Init+0x78>)
 8007220:	4818      	ldr	r0, [pc, #96]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 8007222:	f7fe fbbb 	bl	800599c <USBD_RegisterClass>

    // Register the custom HID interface
    USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8007226:	4919      	ldr	r1, [pc, #100]	; (800728c <MX_USB_DEVICE_Init+0x7c>)
 8007228:	4816      	ldr	r0, [pc, #88]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800722a:	f7fe fb4c 	bl	80058c6 <USBD_CUSTOM_HID_RegisterInterface>

    // Start the USB device
    USBD_Start(&hUsbDeviceFS);
 800722e:	4815      	ldr	r0, [pc, #84]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 8007230:	f7fe fbea 	bl	8005a08 <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007234:	2200      	movs	r2, #0
 8007236:	4912      	ldr	r1, [pc, #72]	; (8007280 <MX_USB_DEVICE_Init+0x70>)
 8007238:	4812      	ldr	r0, [pc, #72]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800723a:	f7fe fb5e 	bl	80058fa <USBD_Init>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
 8007244:	f7f9 fd44 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007248:	490f      	ldr	r1, [pc, #60]	; (8007288 <MX_USB_DEVICE_Init+0x78>)
 800724a:	480e      	ldr	r0, [pc, #56]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800724c:	f7fe fba6 	bl	800599c <USBD_RegisterClass>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <MX_USB_DEVICE_Init+0x4a>
  {
    Error_Handler();
 8007256:	f7f9 fd3b 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800725a:	490c      	ldr	r1, [pc, #48]	; (800728c <MX_USB_DEVICE_Init+0x7c>)
 800725c:	4809      	ldr	r0, [pc, #36]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800725e:	f7fe fb32 	bl	80058c6 <USBD_CUSTOM_HID_RegisterInterface>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <MX_USB_DEVICE_Init+0x5c>
  {
    Error_Handler();
 8007268:	f7f9 fd32 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800726c:	4805      	ldr	r0, [pc, #20]	; (8007284 <MX_USB_DEVICE_Init+0x74>)
 800726e:	f7fe fbcb 	bl	8005a08 <USBD_Start>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <MX_USB_DEVICE_Init+0x6c>
  {
    Error_Handler();
 8007278:	f7f9 fd2a 	bl	8000cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800727c:	bf00      	nop
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20000120 	.word	0x20000120
 8007284:	20000284 	.word	0x20000284
 8007288:	2000000c 	.word	0x2000000c
 800728c:	20000110 	.word	0x20000110

08007290 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 80072a2:	4b04      	ldr	r3, [pc, #16]	; (80072b4 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20000790 	.word	0x20000790
 80072b4:	20000664 	.word	0x20000664

080072b8 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 80072c0:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 80072ca:	4b04      	ldr	r3, [pc, #16]	; (80072dc <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000790 	.word	0x20000790
 80072dc:	20000664 	.word	0x20000664

080072e0 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	220a      	movs	r2, #10
 80072ec:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 80072ee:	4b03      	ldr	r3, [pc, #12]	; (80072fc <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20000088 	.word	0x20000088

08007300 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007304:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007306:	4618      	mov	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007314:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007316:	4618      	mov	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	460a      	mov	r2, r1
 800732a:	71fb      	strb	r3, [r7, #7]
 800732c:	4613      	mov	r3, r2
 800732e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8007330:	4806      	ldr	r0, [pc, #24]	; (800734c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8007332:	f7fe fa67 	bl	8005804 <USBD_CUSTOM_HID_ReceivePacket>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	e000      	b.n	8007344 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8007342:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000284 	.word	0x20000284

08007350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	6039      	str	r1, [r7, #0]
 800735a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2212      	movs	r2, #18
 8007360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	2000013c 	.word	0x2000013c

08007374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2204      	movs	r2, #4
 8007384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007386:	4b03      	ldr	r3, [pc, #12]	; (8007394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000150 	.word	0x20000150

08007398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d105      	bne.n	80073b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	4907      	ldr	r1, [pc, #28]	; (80073cc <USBD_FS_ProductStrDescriptor+0x34>)
 80073ae:	4808      	ldr	r0, [pc, #32]	; (80073d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80073b0:	f7ff fe44 	bl	800703c <USBD_GetString>
 80073b4:	e004      	b.n	80073c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	4904      	ldr	r1, [pc, #16]	; (80073cc <USBD_FS_ProductStrDescriptor+0x34>)
 80073ba:	4805      	ldr	r0, [pc, #20]	; (80073d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80073bc:	f7ff fe3e 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000794 	.word	0x20000794
 80073d0:	08007c8c 	.word	0x08007c8c

080073d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	4904      	ldr	r1, [pc, #16]	; (80073f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073e4:	4804      	ldr	r0, [pc, #16]	; (80073f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073e6:	f7ff fe29 	bl	800703c <USBD_GetString>
  return USBD_StrDesc;
 80073ea:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20000794 	.word	0x20000794
 80073f8:	08007c94 	.word	0x08007c94

080073fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	221a      	movs	r2, #26
 800740c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800740e:	f000 f843 	bl	8007498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007412:	4b02      	ldr	r3, [pc, #8]	; (800741c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20000154 	.word	0x20000154

08007420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4907      	ldr	r1, [pc, #28]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007438:	f7ff fe00 	bl	800703c <USBD_GetString>
 800743c:	e004      	b.n	8007448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4904      	ldr	r1, [pc, #16]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007444:	f7ff fdfa 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000794 	.word	0x20000794
 8007458:	08007ca8 	.word	0x08007ca8

0800745c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	4907      	ldr	r1, [pc, #28]	; (8007490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007472:	4808      	ldr	r0, [pc, #32]	; (8007494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007474:	f7ff fde2 	bl	800703c <USBD_GetString>
 8007478:	e004      	b.n	8007484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	4904      	ldr	r1, [pc, #16]	; (8007490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800747e:	4805      	ldr	r0, [pc, #20]	; (8007494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007480:	f7ff fddc 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000794 	.word	0x20000794
 8007494:	08007cbc 	.word	0x08007cbc

08007498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <Get_SerialNum+0x44>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <Get_SerialNum+0x48>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074aa:	4b0e      	ldr	r3, [pc, #56]	; (80074e4 <Get_SerialNum+0x4c>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4413      	add	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074be:	2208      	movs	r2, #8
 80074c0:	4909      	ldr	r1, [pc, #36]	; (80074e8 <Get_SerialNum+0x50>)
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f814 	bl	80074f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074c8:	2204      	movs	r2, #4
 80074ca:	4908      	ldr	r1, [pc, #32]	; (80074ec <Get_SerialNum+0x54>)
 80074cc:	68b8      	ldr	r0, [r7, #8]
 80074ce:	f000 f80f 	bl	80074f0 <IntToUnicode>
  }
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	1fff7a10 	.word	0x1fff7a10
 80074e0:	1fff7a14 	.word	0x1fff7a14
 80074e4:	1fff7a18 	.word	0x1fff7a18
 80074e8:	20000156 	.word	0x20000156
 80074ec:	20000166 	.word	0x20000166

080074f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
 8007506:	e027      	b.n	8007558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	0f1b      	lsrs	r3, r3, #28
 800750c:	2b09      	cmp	r3, #9
 800750e:	d80b      	bhi.n	8007528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	0f1b      	lsrs	r3, r3, #28
 8007514:	b2da      	uxtb	r2, r3
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4619      	mov	r1, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	440b      	add	r3, r1
 8007520:	3230      	adds	r2, #48	; 0x30
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e00a      	b.n	800753e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	b2da      	uxtb	r2, r3
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4619      	mov	r1, r3
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	440b      	add	r3, r1
 8007538:	3237      	adds	r2, #55	; 0x37
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	3301      	adds	r3, #1
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	3301      	adds	r3, #1
 8007556:	75fb      	strb	r3, [r7, #23]
 8007558:	7dfa      	ldrb	r2, [r7, #23]
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	429a      	cmp	r2, r3
 800755e:	d3d3      	bcc.n	8007508 <IntToUnicode+0x18>
  }
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	605a      	str	r2, [r3, #4]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	60da      	str	r2, [r3, #12]
 8007586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007590:	d13a      	bne.n	8007608 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
 8007596:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	6313      	str	r3, [r2, #48]	; 0x30
 80075a2:	4b1b      	ldr	r3, [pc, #108]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
 80075ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b4:	2302      	movs	r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075bc:	2303      	movs	r3, #3
 80075be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075c0:	230a      	movs	r3, #10
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c4:	f107 0314 	add.w	r3, r7, #20
 80075c8:	4619      	mov	r1, r3
 80075ca:	4812      	ldr	r0, [pc, #72]	; (8007614 <HAL_PCD_MspInit+0xa4>)
 80075cc:	f7f9 fe38 	bl	8001240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075d0:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d4:	4a0e      	ldr	r2, [pc, #56]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	6353      	str	r3, [r2, #52]	; 0x34
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e4:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ea:	6453      	str	r3, [r2, #68]	; 0x44
 80075ec:	4b08      	ldr	r3, [pc, #32]	; (8007610 <HAL_PCD_MspInit+0xa0>)
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	2043      	movs	r0, #67	; 0x43
 80075fe:	f7f9 fde8 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007602:	2043      	movs	r0, #67	; 0x43
 8007604:	f7f9 fe01 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007608:	bf00      	nop
 800760a:	3728      	adds	r7, #40	; 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40023800 	.word	0x40023800
 8007614:	40020000 	.word	0x40020000

08007618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f7fe fa7d 	bl	8005b2e <USBD_LL_SetupStage>
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800764e:	78fa      	ldrb	r2, [r7, #3]
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	4619      	mov	r1, r3
 8007666:	f7fe fab7 	bl	8005bd8 <USBD_LL_DataOutStage>
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4613      	mov	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	3320      	adds	r3, #32
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	4619      	mov	r1, r3
 800769a:	f7fe fb50 	bl	8005d3e <USBD_LL_DataInStage>
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe fca9 	bl	800600c <USBD_LL_SOF>
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076ca:	2301      	movs	r3, #1
 80076cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	79db      	ldrb	r3, [r3, #7]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e008      	b.n	80076ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	79db      	ldrb	r3, [r3, #7]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d102      	bne.n	80076ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	e001      	b.n	80076ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076ea:	f7f9 faf1 	bl	8000cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80076f4:	7bfa      	ldrb	r2, [r7, #15]
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fc43 	bl	8005f84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fbcc 	bl	8005ea2 <USBD_LL_Reset>
}
 800770a:	bf00      	nop
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fc3e 	bl	8005fa4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7adb      	ldrb	r3, [r3, #11]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <HAL_PCD_SuspendCallback+0x48>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	4a03      	ldr	r2, [pc, #12]	; (800775c <HAL_PCD_SuspendCallback+0x48>)
 800774e:	f043 0306 	orr.w	r3, r3, #6
 8007752:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	e000ed00 	.word	0xe000ed00

08007760 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fc34 	bl	8005fdc <USBD_LL_Resume>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800778e:	78fa      	ldrb	r2, [r7, #3]
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fcab 	bl	80060ee <USBD_LL_IsoOUTIncomplete>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fc67 	bl	800608a <USBD_LL_IsoINIncomplete>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fe fcbd 	bl	8006152 <USBD_LL_DevConnected>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fcba 	bl	8006168 <USBD_LL_DevDisconnected>
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d13c      	bne.n	8007886 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <USBD_LL_Init+0x94>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <USBD_LL_Init+0x94>)
 8007818:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800781c:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <USBD_LL_Init+0x94>)
 800781e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007822:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <USBD_LL_Init+0x94>)
 8007826:	2204      	movs	r2, #4
 8007828:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800782a:	4b19      	ldr	r3, [pc, #100]	; (8007890 <USBD_LL_Init+0x94>)
 800782c:	2202      	movs	r2, #2
 800782e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007830:	4b17      	ldr	r3, [pc, #92]	; (8007890 <USBD_LL_Init+0x94>)
 8007832:	2200      	movs	r2, #0
 8007834:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007836:	4b16      	ldr	r3, [pc, #88]	; (8007890 <USBD_LL_Init+0x94>)
 8007838:	2202      	movs	r2, #2
 800783a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800783c:	4b14      	ldr	r3, [pc, #80]	; (8007890 <USBD_LL_Init+0x94>)
 800783e:	2200      	movs	r2, #0
 8007840:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <USBD_LL_Init+0x94>)
 8007844:	2200      	movs	r2, #0
 8007846:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007848:	4b11      	ldr	r3, [pc, #68]	; (8007890 <USBD_LL_Init+0x94>)
 800784a:	2200      	movs	r2, #0
 800784c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <USBD_LL_Init+0x94>)
 8007850:	2200      	movs	r2, #0
 8007852:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007854:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <USBD_LL_Init+0x94>)
 8007856:	2200      	movs	r2, #0
 8007858:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800785a:	480d      	ldr	r0, [pc, #52]	; (8007890 <USBD_LL_Init+0x94>)
 800785c:	f7f9 ffea 	bl	8001834 <HAL_PCD_Init>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007866:	f7f9 fa33 	bl	8000cd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800786a:	2180      	movs	r1, #128	; 0x80
 800786c:	4808      	ldr	r0, [pc, #32]	; (8007890 <USBD_LL_Init+0x94>)
 800786e:	f7fb f9fe 	bl	8002c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007872:	2240      	movs	r2, #64	; 0x40
 8007874:	2100      	movs	r1, #0
 8007876:	4806      	ldr	r0, [pc, #24]	; (8007890 <USBD_LL_Init+0x94>)
 8007878:	f7fb f9b2 	bl	8002be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800787c:	2280      	movs	r2, #128	; 0x80
 800787e:	2101      	movs	r1, #1
 8007880:	4803      	ldr	r0, [pc, #12]	; (8007890 <USBD_LL_Init+0x94>)
 8007882:	f7fb f9ad 	bl	8002be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200007d4 	.word	0x200007d4

08007894 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fa f8d1 	bl	8001a52 <HAL_PCD_Start>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f930 	bl	8007b1c <USBD_Get_USB_Status>
 80078bc:	4603      	mov	r3, r0
 80078be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	4608      	mov	r0, r1
 80078d4:	4611      	mov	r1, r2
 80078d6:	461a      	mov	r2, r3
 80078d8:	4603      	mov	r3, r0
 80078da:	70fb      	strb	r3, [r7, #3]
 80078dc:	460b      	mov	r3, r1
 80078de:	70bb      	strb	r3, [r7, #2]
 80078e0:	4613      	mov	r3, r2
 80078e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80078f2:	78bb      	ldrb	r3, [r7, #2]
 80078f4:	883a      	ldrh	r2, [r7, #0]
 80078f6:	78f9      	ldrb	r1, [r7, #3]
 80078f8:	f7fa fda5 	bl	8002446 <HAL_PCD_EP_Open>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f90a 	bl	8007b1c <USBD_Get_USB_Status>
 8007908:	4603      	mov	r3, r0
 800790a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007930:	78fa      	ldrb	r2, [r7, #3]
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f7fa fdf0 	bl	800251a <HAL_PCD_EP_Close>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f8eb 	bl	8007b1c <USBD_Get_USB_Status>
 8007946:	4603      	mov	r3, r0
 8007948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800794a:	7bbb      	ldrb	r3, [r7, #14]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f7fa fe90 	bl	8002698 <HAL_PCD_EP_SetStall>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f8cc 	bl	8007b1c <USBD_Get_USB_Status>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007988:	7bbb      	ldrb	r3, [r7, #14]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	460b      	mov	r3, r1
 800799c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fa fed4 	bl	800275e <HAL_PCD_EP_ClrStall>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 f8ad 	bl	8007b1c <USBD_Get_USB_Status>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	460b      	mov	r3, r1
 80079da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80079e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	da0b      	bge.n	8007a04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	3316      	adds	r3, #22
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	e00b      	b.n	8007a1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007a1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fa fcd9 	bl	80023fe <HAL_PCD_SetAddress>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f862 	bl	8007b1c <USBD_Get_USB_Status>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	460b      	mov	r3, r1
 8007a74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007a84:	7af9      	ldrb	r1, [r7, #11]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	f7fa fdcb 	bl	8002624 <HAL_PCD_EP_Transmit>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f841 	bl	8007b1c <USBD_Get_USB_Status>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007ac6:	7af9      	ldrb	r1, [r7, #11]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	f7fa fd6f 	bl	80025ae <HAL_PCD_EP_Receive>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f820 	bl	8007b1c <USBD_Get_USB_Status>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007af4:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <USBD_static_malloc+0x18>)
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000cb8 	.word	0x20000cb8

08007b08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]

}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d817      	bhi.n	8007b60 <USBD_Get_USB_Status+0x44>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <USBD_Get_USB_Status+0x1c>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b4f 	.word	0x08007b4f
 8007b40:	08007b55 	.word	0x08007b55
 8007b44:	08007b5b 	.word	0x08007b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4c:	e00b      	b.n	8007b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	73fb      	strb	r3, [r7, #15]
    break;
 8007b52:	e008      	b.n	8007b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b54:	2301      	movs	r3, #1
 8007b56:	73fb      	strb	r3, [r7, #15]
    break;
 8007b58:	e005      	b.n	8007b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5e:	e002      	b.n	8007b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	73fb      	strb	r3, [r7, #15]
    break;
 8007b64:	bf00      	nop
  }
  return usb_status;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <memset>:
 8007b74:	4402      	add	r2, r0
 8007b76:	4603      	mov	r3, r0
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <memset+0xa>
 8007b7c:	4770      	bx	lr
 8007b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b82:	e7f9      	b.n	8007b78 <memset+0x4>

08007b84 <__libc_init_array>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4d0d      	ldr	r5, [pc, #52]	; (8007bbc <__libc_init_array+0x38>)
 8007b88:	4c0d      	ldr	r4, [pc, #52]	; (8007bc0 <__libc_init_array+0x3c>)
 8007b8a:	1b64      	subs	r4, r4, r5
 8007b8c:	10a4      	asrs	r4, r4, #2
 8007b8e:	2600      	movs	r6, #0
 8007b90:	42a6      	cmp	r6, r4
 8007b92:	d109      	bne.n	8007ba8 <__libc_init_array+0x24>
 8007b94:	4d0b      	ldr	r5, [pc, #44]	; (8007bc4 <__libc_init_array+0x40>)
 8007b96:	4c0c      	ldr	r4, [pc, #48]	; (8007bc8 <__libc_init_array+0x44>)
 8007b98:	f000 f818 	bl	8007bcc <_init>
 8007b9c:	1b64      	subs	r4, r4, r5
 8007b9e:	10a4      	asrs	r4, r4, #2
 8007ba0:	2600      	movs	r6, #0
 8007ba2:	42a6      	cmp	r6, r4
 8007ba4:	d105      	bne.n	8007bb2 <__libc_init_array+0x2e>
 8007ba6:	bd70      	pop	{r4, r5, r6, pc}
 8007ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bac:	4798      	blx	r3
 8007bae:	3601      	adds	r6, #1
 8007bb0:	e7ee      	b.n	8007b90 <__libc_init_array+0xc>
 8007bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb6:	4798      	blx	r3
 8007bb8:	3601      	adds	r6, #1
 8007bba:	e7f2      	b.n	8007ba2 <__libc_init_array+0x1e>
 8007bbc:	08007cf4 	.word	0x08007cf4
 8007bc0:	08007cf4 	.word	0x08007cf4
 8007bc4:	08007cf4 	.word	0x08007cf4
 8007bc8:	08007cf8 	.word	0x08007cf8

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
